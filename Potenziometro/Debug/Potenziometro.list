
Potenziometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a4  080057a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ac  080057ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080057b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000074  08005828  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08005828  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a62  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002434  00000000  00000000  00034b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00036f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  000380b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002796b  00000000  00000000  00039158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f04  00000000  00000000  00060ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f98f  00000000  00000000  000749c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f40  00000000  00000000  001843a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005690 	.word	0x08005690

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08005690 	.word	0x08005690

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b0a6      	sub	sp, #152	; 0x98
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
		uint16_t AD_RES = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		uint8_t MSG1[] = "Warning!: Undervoltage\r\n";
 80005e0:	4b74      	ldr	r3, [pc, #464]	; (80007b4 <main+0x1e0>)
 80005e2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	c403      	stmia	r4!, {r0, r1}
 80005f2:	7022      	strb	r2, [r4, #0]
		uint8_t MSG2[] = "Warning!: Overvoltage\r\n";
 80005f4:	4b70      	ldr	r3, [pc, #448]	; (80007b8 <main+0x1e4>)
 80005f6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000604:	e884 0003 	stmia.w	r4, {r0, r1}
		uint8_t MSG3[] = "Voltage:\r\n";
 8000608:	4a6c      	ldr	r2, [pc, #432]	; (80007bc <main+0x1e8>)
 800060a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800060e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000610:	c303      	stmia	r3!, {r0, r1}
 8000612:	801a      	strh	r2, [r3, #0]
 8000614:	3302      	adds	r3, #2
 8000616:	0c12      	lsrs	r2, r2, #16
 8000618:	701a      	strb	r2, [r3, #0]
		uint8_t MSG4[] = "Board in waiting state - please press the emergency button\r\n";
 800061a:	4b69      	ldr	r3, [pc, #420]	; (80007c0 <main+0x1ec>)
 800061c:	f107 0410 	add.w	r4, r7, #16
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000632:	c407      	stmia	r4!, {r0, r1, r2}
 8000634:	7023      	strb	r3, [r4, #0]
		char msg[10];
		uint16_t led_time = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		uint16_t delay_sensor = 1999;
 800063c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000640:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		uint16_t delay_voltage = 3499;
 8000644:	f640 53ab 	movw	r3, #3499	; 0xdab
 8000648:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fc31 	bl	8000eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f8c4 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f9f8 	bl	8000a48 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000658:	f000 f984 	bl	8000964 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800065c:	f000 f90a 	bl	8000874 <MX_ADC1_Init>
  MX_TIM16_Init();
 8000660:	f000 f9ca 	bl	80009f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 8000664:	4857      	ldr	r0, [pc, #348]	; (80007c4 <main+0x1f0>)
 8000666:	f003 fbc1 	bl	8003dec <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 800066a:	4857      	ldr	r0, [pc, #348]	; (80007c8 <main+0x1f4>)
 800066c:	f001 f8a6 	bl	80017bc <HAL_ADC_Start>
	 	     // Poll ADC1 Perihperal & TimeOut = 200mSec
	 	      HAL_ADC_PollForConversion(&hadc1, 200);
 8000670:	21c8      	movs	r1, #200	; 0xc8
 8000672:	4855      	ldr	r0, [pc, #340]	; (80007c8 <main+0x1f4>)
 8000674:	f001 f986 	bl	8001984 <HAL_ADC_PollForConversion>
	 	     // Read The ADC Conversion Result
	 	      AD_RES = HAL_ADC_GetValue(&hadc1);
 8000678:	4853      	ldr	r0, [pc, #332]	; (80007c8 <main+0x1f4>)
 800067a:	f001 fa89 	bl	8001b90 <HAL_ADC_GetValue>
 800067e:	4603      	mov	r3, r0
 8000680:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	 	     led_time = __HAL_TIM_GET_COUNTER(&htim16);
 8000684:	4b4f      	ldr	r3, [pc, #316]	; (80007c4 <main+0x1f0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	 	    // Waiting state
	 	    if(interrupt%2!=(uint16_t)0)
 800068e:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <main+0x1f8>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d015      	beq.n	80006c8 <main+0xf4>
	 	     	      {
	 	    	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	484b      	ldr	r0, [pc, #300]	; (80007d0 <main+0x1fc>)
 80006a2:	f002 fae5 	bl	8002c70 <HAL_GPIO_WritePin>
	 	    		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	4849      	ldr	r0, [pc, #292]	; (80007d0 <main+0x1fc>)
 80006ac:	f002 fae0 	bl	8002c70 <HAL_GPIO_WritePin>
	 	     	        HAL_UART_Transmit(&hlpuart1, MSG4, sizeof(MSG4), 1000);
 80006b0:	f107 0110 	add.w	r1, r7, #16
 80006b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b8:	223d      	movs	r2, #61	; 0x3d
 80006ba:	4846      	ldr	r0, [pc, #280]	; (80007d4 <main+0x200>)
 80006bc:	f003 fcfe 	bl	80040bc <HAL_UART_Transmit>
	 	     	        HAL_Delay(500);
 80006c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c4:	f000 fc66 	bl	8000f94 <HAL_Delay>
	 	     	      }
	 	   // Running state
	 	     if(interrupt%2==(uint16_t)0){
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <main+0x1f8>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1c9      	bne.n	800066a <main+0x96>
	 	    // Check voltage every 350ms
	 	     if(led_time%delay_voltage==(uint16_t)0){
 80006d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80006da:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80006de:	fbb3 f1f2 	udiv	r1, r3, r2
 80006e2:	fb01 f202 	mul.w	r2, r1, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1bd      	bne.n	800066a <main+0x96>
	 	     if(AD_RES<=2234){
 80006ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80006f2:	f640 02ba 	movw	r2, #2234	; 0x8ba
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d811      	bhi.n	800071e <main+0x14a>
	 		      // Undervoltage
	 	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2110      	movs	r1, #16
 80006fe:	4834      	ldr	r0, [pc, #208]	; (80007d0 <main+0x1fc>)
 8000700:	f002 fab6 	bl	8002c70 <HAL_GPIO_WritePin>
	 	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4831      	ldr	r0, [pc, #196]	; (80007d0 <main+0x1fc>)
 800070a:	f002 fab1 	bl	8002c70 <HAL_GPIO_WritePin>
	 	    	  HAL_UART_Transmit(&hlpuart1, MSG1, sizeof(MSG1), 100);
 800070e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	2219      	movs	r2, #25
 8000716:	482f      	ldr	r0, [pc, #188]	; (80007d4 <main+0x200>)
 8000718:	f003 fcd0 	bl	80040bc <HAL_UART_Transmit>
 800071c:	e02d      	b.n	800077a <main+0x1a6>
	 	      }
	 	      else if(AD_RES>=3351){
 800071e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000722:	f640 5216 	movw	r2, #3350	; 0xd16
 8000726:	4293      	cmp	r3, r2
 8000728:	d911      	bls.n	800074e <main+0x17a>
	 		      // Overvoltage
	 	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2110      	movs	r1, #16
 800072e:	4828      	ldr	r0, [pc, #160]	; (80007d0 <main+0x1fc>)
 8000730:	f002 fa9e 	bl	8002c70 <HAL_GPIO_WritePin>
	 	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2120      	movs	r1, #32
 8000738:	4825      	ldr	r0, [pc, #148]	; (80007d0 <main+0x1fc>)
 800073a:	f002 fa99 	bl	8002c70 <HAL_GPIO_WritePin>
	 	    	  HAL_UART_Transmit(&hlpuart1, MSG2, sizeof(MSG2), 100);
 800073e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2218      	movs	r2, #24
 8000746:	4823      	ldr	r0, [pc, #140]	; (80007d4 <main+0x200>)
 8000748:	f003 fcb8 	bl	80040bc <HAL_UART_Transmit>
 800074c:	e015      	b.n	800077a <main+0x1a6>
	 	      }
	 	      else if(AD_RES<3351 && AD_RES>2234){
 800074e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000752:	f640 5216 	movw	r2, #3350	; 0xd16
 8000756:	4293      	cmp	r3, r2
 8000758:	d80f      	bhi.n	800077a <main+0x1a6>
 800075a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800075e:	f640 02ba 	movw	r2, #2234	; 0x8ba
 8000762:	4293      	cmp	r3, r2
 8000764:	d909      	bls.n	800077a <main+0x1a6>
	 	    	   // Volatge OK
	 	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2110      	movs	r1, #16
 800076a:	4819      	ldr	r0, [pc, #100]	; (80007d0 <main+0x1fc>)
 800076c:	f002 fa80 	bl	8002c70 <HAL_GPIO_WritePin>
	 	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <main+0x1fc>)
 8000776:	f002 fa7b 	bl	8002c70 <HAL_GPIO_WritePin>
	 	      }
	 	    	  sprintf(msg, "%hu\r\n", AD_RES);
 800077a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4915      	ldr	r1, [pc, #84]	; (80007d8 <main+0x204>)
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fb16 	bl	8004db4 <siprintf>
	 	    	  HAL_UART_Transmit(&hlpuart1, MSG3, sizeof(MSG3), 1000);
 8000788:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800078c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000790:	220b      	movs	r2, #11
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <main+0x200>)
 8000794:	f003 fc92 	bl	80040bc <HAL_UART_Transmit>
	 	    	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), 1000);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fd40 	bl	8000220 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	1d39      	adds	r1, r7, #4
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	480a      	ldr	r0, [pc, #40]	; (80007d4 <main+0x200>)
 80007ac:	f003 fc86 	bl	80040bc <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 80007b0:	e75b      	b.n	800066a <main+0x96>
 80007b2:	bf00      	nop
 80007b4:	080056b0 	.word	0x080056b0
 80007b8:	080056cc 	.word	0x080056cc
 80007bc:	080056e4 	.word	0x080056e4
 80007c0:	080056f0 	.word	0x080056f0
 80007c4:	2000018c 	.word	0x2000018c
 80007c8:	20000090 	.word	0x20000090
 80007cc:	20000000 	.word	0x20000000
 80007d0:	48000800 	.word	0x48000800
 80007d4:	200000fc 	.word	0x200000fc
 80007d8:	080056a8 	.word	0x080056a8

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	; 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2238      	movs	r2, #56	; 0x38
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fada 	bl	8004da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007fe:	2000      	movs	r0, #0
 8000800:	f002 fa66 	bl	8002cd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800081a:	2304      	movs	r3, #4
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800081e:	2355      	movs	r3, #85	; 0x55
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fb00 	bl	8002e38 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800083e:	f000 f99f 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2303      	movs	r3, #3
 8000848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2104      	movs	r1, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fe04 	bl	8003468 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000866:	f000 f98b 	bl	8000b80 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2220      	movs	r2, #32
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fa89 	bl	8004da4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <MX_ADC1_Init+0xe8>)
 8000894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <MX_ADC1_Init+0xe8>)
 800089c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_ADC1_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_ADC1_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_ADC1_Init+0xe8>)
 80008bc:	2204      	movs	r2, #4
 80008be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_ADC1_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_ADC1_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_ADC1_Init+0xe8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_ADC1_Init+0xe8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_ADC1_Init+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ADC1_Init+0xe8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ADC1_Init+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ADC1_Init+0xe8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <MX_ADC1_Init+0xe8>)
 80008fe:	f000 fd9b 	bl	8001438 <HAL_ADC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000908:	f000 f93a 	bl	8000b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_ADC1_Init+0xe8>)
 8000918:	f001 fe10 	bl	800253c <HAL_ADCEx_MultiModeConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000922:	f000 f92d 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_ADC1_Init+0xec>)
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092a:	2306      	movs	r3, #6
 800092c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000932:	237f      	movs	r3, #127	; 0x7f
 8000934:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000936:	2304      	movs	r3, #4
 8000938:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_ADC1_Init+0xe8>)
 8000944:	f001 f932 	bl	8001bac <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800094e:	f000 f917 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	; 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000090 	.word	0x20000090
 8000960:	08600004 	.word	0x08600004

08000964 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <MX_LPUART1_UART_Init+0x90>)
 800096c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 80009a8:	f003 fb38 	bl	800401c <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f8e5 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	f004 f8ff 	bl	8004bbc <HAL_UARTEx_SetTxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009c4:	f000 f8dc 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f004 f934 	bl	8004c38 <HAL_UARTEx_SetRxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009d6:	f000 f8d3 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_LPUART1_UART_Init+0x8c>)
 80009dc:	f004 f8b5 	bl	8004b4a <HAL_UARTEx_DisableFifoMode>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009e6:	f000 f8cb 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000fc 	.word	0x200000fc
 80009f4:	40008000 	.word	0x40008000

080009f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_TIM16_Init+0x48>)
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <MX_TIM16_Init+0x4c>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16999;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a04:	f244 2267 	movw	r2, #16999	; 0x4267
 8000a08:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3499;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a12:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000a16:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM16_Init+0x48>)
 8000a2c:	f003 f986 	bl	8003d3c <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a36:	f000 f8a3 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000018c 	.word	0x2000018c
 8000a44:	40014400 	.word	0x40014400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_GPIO_Init+0x100>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f002 f8d2 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2130      	movs	r1, #48	; 0x30
 8000ad0:	481e      	ldr	r0, [pc, #120]	; (8000b4c <MX_GPIO_Init+0x104>)
 8000ad2:	f002 f8cd 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000adc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4817      	ldr	r0, [pc, #92]	; (8000b4c <MX_GPIO_Init+0x104>)
 8000aee:	f001 ff3d 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000af2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f001 ff2d 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b12:	2330      	movs	r3, #48	; 0x30
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <MX_GPIO_Init+0x104>)
 8000b2a:	f001 ff1f 	bl	800296c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2028      	movs	r0, #40	; 0x28
 8000b34:	f001 fee5 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b38:	2028      	movs	r0, #40	; 0x28
 8000b3a:	f001 fefc 	bl	8002936 <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000800 	.word	0x48000800

08000b50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b60:	d105      	bne.n	8000b6e <HAL_GPIO_EXTI_Callback+0x1e>
	{
	 // Counter of User button
	 interrupt ++;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b6c:	801a      	strh	r2, [r3, #0]
	}
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000000 	.word	0x20000000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc2:	f002 f929 	bl	8002e18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09e      	sub	sp, #120	; 0x78
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2254      	movs	r2, #84	; 0x54
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 f8d5 	bl	8004da4 <memset>
  if(hadc->Instance==ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c02:	d134      	bne.n	8000c6e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c0e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 fe43 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c20:	f7ff ffae 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_ADC_MspInit+0xa4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c54:	2302      	movs	r3, #2
 8000c56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f001 fe7f 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3778      	adds	r7, #120	; 0x78
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09e      	sub	sp, #120	; 0x78
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2254      	movs	r2, #84	; 0x54
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 f881 	bl	8004da4 <memset>
  if(huart->Instance==LPUART1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <HAL_UART_MspInit+0xa8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d136      	bne.n	8000d1a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cac:	2320      	movs	r3, #32
 8000cae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fdf1 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f7ff ff5c 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0xac>)
 8000cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ccc:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <HAL_UART_MspInit+0xac>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0xac>)
 8000cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0xac>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0xac>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_UART_MspInit+0xac>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f001 fe29 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3778      	adds	r7, #120	; 0x78
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40008000 	.word	0x40008000
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_TIM_Base_MspInit+0x38>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10b      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40014400 	.word	0x40014400
 8000d68:	40021000 	.word	0x40021000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8ce 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc8:	f001 ff6a 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f003 ffa6 	bl	8004d50 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	200001d8 	.word	0x200001d8
 8000e38:	200001f0 	.word	0x200001f0

08000e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f003 ff65 	bl	8004d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e92:	f7ff fb9f 	bl	80005d4 <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ea4:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 8000ea8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eac:	200001f0 	.word	0x200001f0

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>

08000eb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f001 fd15 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f80e 	bl	8000ee4 <HAL_InitTick>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	e001      	b.n	8000ed8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed4:	f7ff fe5a 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_InitTick+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d022      	beq.n	8000f3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_InitTick+0x6c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_InitTick+0x68>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fd20 	bl	8002952 <HAL_SYSTICK_Config>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10f      	bne.n	8000f38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	d809      	bhi.n	8000f32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f26:	f001 fcec 	bl	8002902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_InitTick+0x70>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e007      	b.n	8000f42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e004      	b.n	8000f42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e001      	b.n	8000f42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000004 	.word	0x20000004
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f68:	6013      	str	r3, [r2, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200001dc 	.word	0x200001dc
 8000f78:	2000000c 	.word	0x2000000c

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200001dc 	.word	0x200001dc

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fac:	d004      	beq.n	8000fb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_Delay+0x40>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb8:	bf00      	nop
 8000fba:	f7ff ffdf 	bl	8000f7c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d8f7      	bhi.n	8000fba <HAL_Delay+0x26>
  {
  }
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3360      	adds	r3, #96	; 0x60
 8001052:	461a      	mov	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <LL_ADC_SetOffset+0x44>)
 8001062:	4013      	ands	r3, r2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	4313      	orrs	r3, r2
 8001070:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	03fff000 	.word	0x03fff000

08001088 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3360      	adds	r3, #96	; 0x60
 8001096:	461a      	mov	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3360      	adds	r3, #96	; 0x60
 80010c4:	461a      	mov	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	431a      	orrs	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010de:	bf00      	nop
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b087      	sub	sp, #28
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3360      	adds	r3, #96	; 0x60
 80010fa:	461a      	mov	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	431a      	orrs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3360      	adds	r3, #96	; 0x60
 8001130:	461a      	mov	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	615a      	str	r2, [r3, #20]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b087      	sub	sp, #28
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3330      	adds	r3, #48	; 0x30
 80011b2:	461a      	mov	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	4413      	add	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	211f      	movs	r1, #31
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	401a      	ands	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0e9b      	lsrs	r3, r3, #26
 80011da:	f003 011f 	and.w	r1, r3, #31
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b087      	sub	sp, #28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3314      	adds	r3, #20
 800120a:	461a      	mov	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	0e5b      	lsrs	r3, r3, #25
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	0d1b      	lsrs	r3, r3, #20
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2107      	movs	r1, #7
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	0d1b      	lsrs	r3, r3, #20
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d10a      	bne.n	800127a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001270:	431a      	orrs	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001278:	e00a      	b.n	8001290 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001286:	43db      	mvns	r3, r3
 8001288:	401a      	ands	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	407f0000 	.word	0x407f0000

080012a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 031f 	and.w	r3, r3, #31
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6093      	str	r3, [r2, #8]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800130c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001310:	d101      	bne.n	8001316 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001360:	d101      	bne.n	8001366 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <LL_ADC_IsEnabled+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_ADC_IsEnabled+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d6:	f043 0204 	orr.w	r2, r3, #4
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d101      	bne.n	8001402 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b08      	cmp	r3, #8
 8001422:	d101      	bne.n	8001428 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e1af      	b.n	80017b2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fbb7 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff3f 	bl	80012fc <LL_ADC_IsDeepPowerDownEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff25 	bl	80012d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff5a 	bl	800134c <LL_ADC_IsInternalRegulatorEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d115      	bne.n	80014ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff3e 	bl	8001324 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014a8:	4b9f      	ldr	r3, [pc, #636]	; (8001728 <HAL_ADC_Init+0x2f0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	4a9f      	ldr	r2, [pc, #636]	; (800172c <HAL_ADC_Init+0x2f4>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	3301      	adds	r3, #1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff3c 	bl	800134c <LL_ADC_IsInternalRegulatorEnabled>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f043 0201 	orr.w	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff75 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001500:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 8148 	bne.w	80017a0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 8144 	bne.w	80017a0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001520:	f043 0202 	orr.w	r2, r3, #2
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff35 	bl	800139c <LL_ADC_IsEnabled>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d141      	bne.n	80015bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001540:	d004      	beq.n	800154c <HAL_ADC_Init+0x114>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <HAL_ADC_Init+0x2f8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d10f      	bne.n	800156c <HAL_ADC_Init+0x134>
 800154c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001550:	f7ff ff24 	bl	800139c <LL_ADC_IsEnabled>
 8001554:	4604      	mov	r4, r0
 8001556:	4876      	ldr	r0, [pc, #472]	; (8001730 <HAL_ADC_Init+0x2f8>)
 8001558:	f7ff ff20 	bl	800139c <LL_ADC_IsEnabled>
 800155c:	4603      	mov	r3, r0
 800155e:	4323      	orrs	r3, r4
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	e012      	b.n	8001592 <HAL_ADC_Init+0x15a>
 800156c:	4871      	ldr	r0, [pc, #452]	; (8001734 <HAL_ADC_Init+0x2fc>)
 800156e:	f7ff ff15 	bl	800139c <LL_ADC_IsEnabled>
 8001572:	4604      	mov	r4, r0
 8001574:	4870      	ldr	r0, [pc, #448]	; (8001738 <HAL_ADC_Init+0x300>)
 8001576:	f7ff ff11 	bl	800139c <LL_ADC_IsEnabled>
 800157a:	4603      	mov	r3, r0
 800157c:	431c      	orrs	r4, r3
 800157e:	486f      	ldr	r0, [pc, #444]	; (800173c <HAL_ADC_Init+0x304>)
 8001580:	f7ff ff0c 	bl	800139c <LL_ADC_IsEnabled>
 8001584:	4603      	mov	r3, r0
 8001586:	4323      	orrs	r3, r4
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d012      	beq.n	80015bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Init+0x172>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a62      	ldr	r2, [pc, #392]	; (8001730 <HAL_ADC_Init+0x2f8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_ADC_Init+0x176>
 80015aa:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_ADC_Init+0x308>)
 80015ac:	e000      	b.n	80015b0 <HAL_ADC_Init+0x178>
 80015ae:	4a65      	ldr	r2, [pc, #404]	; (8001744 <HAL_ADC_Init+0x30c>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f7ff fd0e 	bl	8000fd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7f5b      	ldrb	r3, [r3, #29]
 80015c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	3b01      	subs	r3, #1
 80015f0:	045b      	lsls	r3, r3, #17
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_ADC_Init+0x310>)
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	430b      	orrs	r3, r1
 8001626:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fed1 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001648:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fede 	bl	8001410 <LL_ADC_INJ_IsConversionOngoing>
 8001654:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d17f      	bne.n	800175c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d17c      	bne.n	800175c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001666:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800166e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800167e:	f023 0302 	bic.w	r3, r3, #2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	430b      	orrs	r3, r1
 800168a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d017      	beq.n	80016c4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6911      	ldr	r1, [r2, #16]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	430b      	orrs	r3, r1
 80016be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80016c2:	e013      	b.n	80016ec <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d12a      	bne.n	800174c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800170c:	4311      	orrs	r1, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001718:	430a      	orrs	r2, r1
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	e019      	b.n	800175c <HAL_ADC_Init+0x324>
 8001728:	20000004 	.word	0x20000004
 800172c:	053e2d63 	.word	0x053e2d63
 8001730:	50000100 	.word	0x50000100
 8001734:	50000400 	.word	0x50000400
 8001738:	50000500 	.word	0x50000500
 800173c:	50000600 	.word	0x50000600
 8001740:	50000300 	.word	0x50000300
 8001744:	50000700 	.word	0x50000700
 8001748:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10c      	bne.n	800177e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f023 010f 	bic.w	r1, r3, #15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020f 	bic.w	r2, r2, #15
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	65da      	str	r2, [r3, #92]	; 0x5c
 800179e:	e007      	b.n	80017b0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop

080017bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_Start+0x1c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a67      	ldr	r2, [pc, #412]	; (8001970 <HAL_ADC_Start+0x1b4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_Start+0x20>
 80017d8:	4b66      	ldr	r3, [pc, #408]	; (8001974 <HAL_ADC_Start+0x1b8>)
 80017da:	e000      	b.n	80017de <HAL_ADC_Start+0x22>
 80017dc:	4b66      	ldr	r3, [pc, #408]	; (8001978 <HAL_ADC_Start+0x1bc>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fd5e 	bl	80012a0 <LL_ADC_GetMultimode>
 80017e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdfd 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 80b4 	bne.w	8001960 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Start+0x4a>
 8001802:	2302      	movs	r3, #2
 8001804:	e0af      	b.n	8001966 <HAL_ADC_Start+0x1aa>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fe0c 	bl	800242c <ADC_Enable>
 8001814:	4603      	mov	r3, r0
 8001816:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 809b 	bne.w	8001956 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a4d      	ldr	r2, [pc, #308]	; (8001970 <HAL_ADC_Start+0x1b4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_ADC_Start+0x96>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a4e      	ldr	r2, [pc, #312]	; (800197c <HAL_ADC_Start+0x1c0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d002      	beq.n	800184e <HAL_ADC_Start+0x92>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	e003      	b.n	8001856 <HAL_ADC_Start+0x9a>
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <HAL_ADC_Start+0x1c4>)
 8001850:	e001      	b.n	8001856 <HAL_ADC_Start+0x9a>
 8001852:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	4293      	cmp	r3, r2
 800185c:	d002      	beq.n	8001864 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187c:	d106      	bne.n	800188c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f023 0206 	bic.w	r2, r3, #6
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	661a      	str	r2, [r3, #96]	; 0x60
 800188a:	e002      	b.n	8001892 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	221c      	movs	r2, #28
 8001898:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_ADC_Start+0x1b4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d009      	beq.n	80018c0 <HAL_ADC_Start+0x104>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a32      	ldr	r2, [pc, #200]	; (800197c <HAL_ADC_Start+0x1c0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d002      	beq.n	80018bc <HAL_ADC_Start+0x100>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	e003      	b.n	80018c4 <HAL_ADC_Start+0x108>
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_ADC_Start+0x1c4>)
 80018be:	e001      	b.n	80018c4 <HAL_ADC_Start+0x108>
 80018c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d008      	beq.n	80018de <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d002      	beq.n	80018de <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b09      	cmp	r3, #9
 80018dc:	d114      	bne.n	8001908 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fd5e 	bl	80013c2 <LL_ADC_REG_StartConversion>
 8001906:	e02d      	b.n	8001964 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_ADC_Start+0x1b4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_ADC_Start+0x176>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_ADC_Start+0x1c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d002      	beq.n	800192e <HAL_ADC_Start+0x172>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	e003      	b.n	8001936 <HAL_ADC_Start+0x17a>
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_ADC_Start+0x1c4>)
 8001930:	e001      	b.n	8001936 <HAL_ADC_Start+0x17a>
 8001932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001936:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00f      	beq.n	8001964 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800194c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	65da      	str	r2, [r3, #92]	; 0x5c
 8001954:	e006      	b.n	8001964 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800195e:	e001      	b.n	8001964 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001960:	2302      	movs	r3, #2
 8001962:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001964:	7dfb      	ldrb	r3, [r7, #23]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	50000100 	.word	0x50000100
 8001974:	50000300 	.word	0x50000300
 8001978:	50000700 	.word	0x50000700
 800197c:	50000500 	.word	0x50000500
 8001980:	50000400 	.word	0x50000400

08001984 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001996:	d004      	beq.n	80019a2 <HAL_ADC_PollForConversion+0x1e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a77      	ldr	r2, [pc, #476]	; (8001b7c <HAL_ADC_PollForConversion+0x1f8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x22>
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <HAL_ADC_PollForConversion+0x1fc>)
 80019a4:	e000      	b.n	80019a8 <HAL_ADC_PollForConversion+0x24>
 80019a6:	4b77      	ldr	r3, [pc, #476]	; (8001b84 <HAL_ADC_PollForConversion+0x200>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fc79 	bl	80012a0 <LL_ADC_GetMultimode>
 80019ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d102      	bne.n	80019be <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019b8:	2308      	movs	r3, #8
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	e037      	b.n	8001a2e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d002      	beq.n	80019d0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d111      	bne.n	80019f4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	f043 0220 	orr.w	r2, r3, #32
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0c1      	b.n	8001b72 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019ee:	2304      	movs	r3, #4
 80019f0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019f2:	e01c      	b.n	8001a2e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_PollForConversion+0x84>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a5e      	ldr	r2, [pc, #376]	; (8001b7c <HAL_ADC_PollForConversion+0x1f8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_PollForConversion+0x88>
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_ADC_PollForConversion+0x1fc>)
 8001a0a:	e000      	b.n	8001a0e <HAL_ADC_PollForConversion+0x8a>
 8001a0c:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_ADC_PollForConversion+0x200>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fc54 	bl	80012bc <LL_ADC_GetMultiDMATransfer>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	f043 0220 	orr.w	r2, r3, #32
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0a3      	b.n	8001b72 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a2e:	f7ff faa5 	bl	8000f7c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a34:	e021      	b.n	8001a7a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a3c:	d01d      	beq.n	8001a7a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a3e:	f7ff fa9d 	bl	8000f7c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <HAL_ADC_PollForConversion+0xd0>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d112      	bne.n	8001a7a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10b      	bne.n	8001a7a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	f043 0204 	orr.w	r2, r3, #4
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e07b      	b.n	8001b72 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0d6      	beq.n	8001a36 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb6f 	bl	800117c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01c      	beq.n	8001ade <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7f5b      	ldrb	r3, [r3, #29]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d118      	bne.n	8001ade <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d111      	bne.n	8001ade <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_ADC_PollForConversion+0x1f8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d009      	beq.n	8001afc <HAL_ADC_PollForConversion+0x178>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_ADC_PollForConversion+0x204>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d002      	beq.n	8001af8 <HAL_ADC_PollForConversion+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e003      	b.n	8001b00 <HAL_ADC_PollForConversion+0x17c>
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_ADC_PollForConversion+0x208>)
 8001afa:	e001      	b.n	8001b00 <HAL_ADC_PollForConversion+0x17c>
 8001afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d008      	beq.n	8001b1a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d002      	beq.n	8001b1a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	d104      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	e014      	b.n	8001b4e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_ADC_PollForConversion+0x1f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_ADC_PollForConversion+0x1be>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <HAL_ADC_PollForConversion+0x204>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_PollForConversion+0x1ba>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_PollForConversion+0x1c2>
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_ADC_PollForConversion+0x208>)
 8001b40:	e001      	b.n	8001b46 <HAL_ADC_PollForConversion+0x1c2>
 8001b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b46:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d104      	bne.n	8001b5e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e008      	b.n	8001b70 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d103      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	50000100 	.word	0x50000100
 8001b80:	50000300 	.word	0x50000300
 8001b84:	50000700 	.word	0x50000700
 8001b88:	50000500 	.word	0x50000500
 8001b8c:	50000400 	.word	0x50000400

08001b90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0b6      	sub	sp, #216	; 0xd8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x24>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f000 bc13 	b.w	80023f6 <HAL_ADC_ConfigChannel+0x84a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fc04 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 83f3 	bne.w	80023d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f7ff fad3 	bl	80011a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fbf2 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001c06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fbfe 	bl	8001410 <LL_ADC_INJ_IsConversionOngoing>
 8001c14:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f040 81d9 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 81d4 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c34:	d10f      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7ff fada 	bl	80011fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fa81 	bl	8001156 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c54:	e00e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f7ff fac9 	bl	80011fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa71 	bl	8001156 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d022      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ca6:	f7ff f9cb 	bl	8001040 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6919      	ldr	r1, [r3, #16]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f7ff fa17 	bl	80010ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6919      	ldr	r1, [r3, #16]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x126>
 8001ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x128>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f7ff fa23 	bl	8001120 <LL_ADC_SetOffsetSaturation>
 8001cda:	e17b      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f9d0 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x15c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f9c5 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	f003 021f 	and.w	r2, r3, #31
 8001d06:	e01e      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x19a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f9ba 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d36:	2320      	movs	r3, #32
 8001d38:	e004      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x1b2>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	e018      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x1e4>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f989 	bl	80010b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2101      	movs	r1, #1
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f96d 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x222>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f962 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	e01e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x260>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f957 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e004      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x278>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	e018      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x2aa>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e004      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d106      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f926 	bl	80010b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f90a 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10a      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x2e8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2102      	movs	r1, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f8ff 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 021f 	and.w	r2, r3, #31
 8001e92:	e01e      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x326>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f8f4 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e004      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x33e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0e9b      	lsrs	r3, r3, #26
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	e016      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x36c>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	e004      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2102      	movs	r1, #2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f8c5 	bl	80010b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2103      	movs	r1, #3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8a9 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x3aa>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2103      	movs	r1, #3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f89e 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	e017      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x3da>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f893 	bl	8001088 <LL_ADC_GetOffsetChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e003      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x3f2>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0e9b      	lsrs	r3, r3, #26
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	e011      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x416>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	e003      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d106      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2103      	movs	r1, #3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f870 	bl	80010b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f9df 	bl	800139c <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 813d 	bne.w	8002260 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f7ff f92c 	bl	8001250 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4aa2      	ldr	r2, [pc, #648]	; (8002288 <HAL_ADC_ConfigChannel+0x6dc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	f040 812e 	bne.w	8002260 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <HAL_ADC_ConfigChannel+0x480>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2b09      	cmp	r3, #9
 8002022:	bf94      	ite	ls
 8002024:	2301      	movls	r3, #1
 8002026:	2300      	movhi	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e019      	b.n	8002060 <HAL_ADC_ConfigChannel+0x4b4>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800203a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800203c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800203e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e003      	b.n	8002050 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2b09      	cmp	r3, #9
 8002058:	bf94      	ite	ls
 800205a:	2301      	movls	r3, #1
 800205c:	2300      	movhi	r3, #0
 800205e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002060:	2b00      	cmp	r3, #0
 8002062:	d079      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x4d4>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	3301      	adds	r3, #1
 8002078:	069b      	lsls	r3, r3, #26
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207e:	e015      	b.n	80020ac <HAL_ADC_ConfigChannel+0x500>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800208e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002090:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e003      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x520>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0e9b      	lsrs	r3, r3, #26
 80020be:	3301      	adds	r3, #1
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	e017      	b.n	80020fc <HAL_ADC_ConfigChannel+0x550>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e003      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80020e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	ea42 0103 	orr.w	r1, r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x576>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	3301      	adds	r3, #1
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	051b      	lsls	r3, r3, #20
 8002120:	e018      	b.n	8002154 <HAL_ADC_ConfigChannel+0x5a8>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e003      	b.n	8002146 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800213e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002154:	430b      	orrs	r3, r1
 8002156:	e07e      	b.n	8002256 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x5c8>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	3301      	adds	r3, #1
 800216c:	069b      	lsls	r3, r3, #26
 800216e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002172:	e015      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e003      	b.n	8002198 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x614>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	e017      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x644>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	61fb      	str	r3, [r7, #28]
  return result;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	ea42 0103 	orr.w	r1, r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_ADC_ConfigChannel+0x670>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	3301      	adds	r3, #1
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	3b1e      	subs	r3, #30
 8002214:	051b      	lsls	r3, r3, #20
 8002216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800221a:	e01b      	b.n	8002254 <HAL_ADC_ConfigChannel+0x6a8>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	613b      	str	r3, [r7, #16]
  return result;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002234:	2320      	movs	r3, #32
 8002236:	e003      	b.n	8002240 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f003 021f 	and.w	r2, r3, #31
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	3b1e      	subs	r3, #30
 800224e:	051b      	lsls	r3, r3, #20
 8002250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	430b      	orrs	r3, r1
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	6892      	ldr	r2, [r2, #8]
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe ffcd 	bl	80011fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_ADC_ConfigChannel+0x6e0>)
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80be 	beq.w	80023ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002276:	d004      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x6d6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_ADC_ConfigChannel+0x6e4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10a      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x6ec>
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_ADC_ConfigChannel+0x6e8>)
 8002284:	e009      	b.n	800229a <HAL_ADC_ConfigChannel+0x6ee>
 8002286:	bf00      	nop
 8002288:	407f0000 	.word	0x407f0000
 800228c:	80080000 	.word	0x80080000
 8002290:	50000100 	.word	0x50000100
 8002294:	50000300 	.word	0x50000300
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_ADC_ConfigChannel+0x854>)
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fec2 	bl	8001024 <LL_ADC_GetCommonPathInternalCh>
 80022a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_ADC_ConfigChannel+0x858>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x70c>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_ADC_ConfigChannel+0x85c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d13a      	bne.n	800232e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d134      	bne.n	800232e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022cc:	d005      	beq.n	80022da <HAL_ADC_ConfigChannel+0x72e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a4e      	ldr	r2, [pc, #312]	; (800240c <HAL_ADC_ConfigChannel+0x860>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f040 8085 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e2:	d004      	beq.n	80022ee <HAL_ADC_ConfigChannel+0x742>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a49      	ldr	r2, [pc, #292]	; (8002410 <HAL_ADC_ConfigChannel+0x864>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x746>
 80022ee:	4a49      	ldr	r2, [pc, #292]	; (8002414 <HAL_ADC_ConfigChannel+0x868>)
 80022f0:	e000      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x748>
 80022f2:	4a43      	ldr	r2, [pc, #268]	; (8002400 <HAL_ADC_ConfigChannel+0x854>)
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f7fe fe7d 	bl	8000ffe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002304:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_ADC_ConfigChannel+0x86c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_ADC_ConfigChannel+0x870>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800231e:	e002      	b.n	8002326 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f9      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800232c:	e05a      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <HAL_ADC_ConfigChannel+0x874>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d125      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x7d8>
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11f      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a31      	ldr	r2, [pc, #196]	; (8002410 <HAL_ADC_ConfigChannel+0x864>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d104      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x7ac>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <HAL_ADC_ConfigChannel+0x878>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d047      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002360:	d004      	beq.n	800236c <HAL_ADC_ConfigChannel+0x7c0>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_ADC_ConfigChannel+0x864>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x7c4>
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <HAL_ADC_ConfigChannel+0x868>)
 800236e:	e000      	b.n	8002372 <HAL_ADC_ConfigChannel+0x7c6>
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <HAL_ADC_ConfigChannel+0x854>)
 8002372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7fe fe3e 	bl	8000ffe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002382:	e031      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_ADC_ConfigChannel+0x87c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12d      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800238e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d127      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_ADC_ConfigChannel+0x864>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d022      	beq.n	80023ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ac:	d004      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x80c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_ADC_ConfigChannel+0x864>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x810>
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_ADC_ConfigChannel+0x868>)
 80023ba:	e000      	b.n	80023be <HAL_ADC_ConfigChannel+0x812>
 80023bc:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_ADC_ConfigChannel+0x854>)
 80023be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7fe fe18 	bl	8000ffe <LL_ADC_SetCommonPathInternalCh>
 80023ce:	e00c      	b.n	80023ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023e2:	e002      	b.n	80023ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	37d8      	adds	r7, #216	; 0xd8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	50000700 	.word	0x50000700
 8002404:	c3210000 	.word	0xc3210000
 8002408:	90c00010 	.word	0x90c00010
 800240c:	50000600 	.word	0x50000600
 8002410:	50000100 	.word	0x50000100
 8002414:	50000300 	.word	0x50000300
 8002418:	20000004 	.word	0x20000004
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	c7520000 	.word	0xc7520000
 8002424:	50000500 	.word	0x50000500
 8002428:	cb840000 	.word	0xcb840000

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ffaf 	bl	800139c <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d14d      	bne.n	80024e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <ADC_Enable+0xc0>)
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e039      	b.n	80024e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe ff7e 	bl	8001374 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002478:	f7fe fd80 	bl	8000f7c <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247e:	e028      	b.n	80024d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe ff89 	bl	800139c <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe ff6d 	bl	8001374 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800249a:	f7fe fd6f 	bl	8000f7c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d1cf      	bne.n	8002480 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	8000003f 	.word	0x8000003f

080024f0 <LL_ADC_IsEnabled>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <LL_ADC_IsEnabled+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_ADC_IsEnabled+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_REG_IsConversionOngoing>:
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d101      	bne.n	800252e <LL_ADC_REG_IsConversionOngoing+0x18>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b0a1      	sub	sp, #132	; 0x84
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002556:	2302      	movs	r3, #2
 8002558:	e0e7      	b.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002562:	2300      	movs	r3, #0
 8002564:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002566:	2300      	movs	r3, #0
 8002568:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002572:	d102      	bne.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	e009      	b.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d102      	bne.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	e001      	b.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0be      	b.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ffb1 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 80025b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffab 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 80a0 	bne.w	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 809c 	bne.w	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d8:	d004      	beq.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a55      	ldr	r2, [pc, #340]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025e6:	e000      	b.n	80025ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80025ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d04b      	beq.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002606:	035b      	lsls	r3, r3, #13
 8002608:	430b      	orrs	r3, r1
 800260a:	431a      	orrs	r2, r3
 800260c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002618:	d004      	beq.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10f      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002624:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002628:	f7ff ff62 	bl	80024f0 <LL_ADC_IsEnabled>
 800262c:	4604      	mov	r4, r0
 800262e:	4841      	ldr	r0, [pc, #260]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002630:	f7ff ff5e 	bl	80024f0 <LL_ADC_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	4323      	orrs	r3, r4
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e012      	b.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002644:	483c      	ldr	r0, [pc, #240]	; (8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002646:	f7ff ff53 	bl	80024f0 <LL_ADC_IsEnabled>
 800264a:	4604      	mov	r4, r0
 800264c:	483b      	ldr	r0, [pc, #236]	; (800273c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800264e:	f7ff ff4f 	bl	80024f0 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	431c      	orrs	r4, r3
 8002656:	483c      	ldr	r0, [pc, #240]	; (8002748 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002658:	f7ff ff4a 	bl	80024f0 <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	4323      	orrs	r3, r4
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d056      	beq.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800266e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002676:	f023 030f 	bic.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	6811      	ldr	r1, [r2, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	6892      	ldr	r2, [r2, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	431a      	orrs	r2, r3
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800268a:	e047      	b.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800268c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002696:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a0:	d004      	beq.n	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d10f      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80026ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026b0:	f7ff ff1e 	bl	80024f0 <LL_ADC_IsEnabled>
 80026b4:	4604      	mov	r4, r0
 80026b6:	481f      	ldr	r0, [pc, #124]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026b8:	f7ff ff1a 	bl	80024f0 <LL_ADC_IsEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	4323      	orrs	r3, r4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e012      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80026cc:	481a      	ldr	r0, [pc, #104]	; (8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026ce:	f7ff ff0f 	bl	80024f0 <LL_ADC_IsEnabled>
 80026d2:	4604      	mov	r4, r0
 80026d4:	4819      	ldr	r0, [pc, #100]	; (800273c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026d6:	f7ff ff0b 	bl	80024f0 <LL_ADC_IsEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	431c      	orrs	r4, r3
 80026de:	481a      	ldr	r0, [pc, #104]	; (8002748 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026e0:	f7ff ff06 	bl	80024f0 <LL_ADC_IsEnabled>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4323      	orrs	r3, r4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d012      	beq.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026fe:	f023 030f 	bic.w	r3, r3, #15
 8002702:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002704:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002706:	e009      	b.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800271a:	e000      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800271c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002726:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800272a:	4618      	mov	r0, r3
 800272c:	3784      	adds	r7, #132	; 0x84
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	bf00      	nop
 8002734:	50000100 	.word	0x50000100
 8002738:	50000400 	.word	0x50000400
 800273c:	50000500 	.word	0x50000500
 8002740:	50000300 	.word	0x50000300
 8002744:	50000700 	.word	0x50000700
 8002748:	50000600 	.word	0x50000600

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <__NVIC_EnableIRQ+0x38>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000e100 	.word	0xe000e100

080027ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
         );
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028cc:	f7ff ff8e 	bl	80027ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff29 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002910:	f7ff ff40 	bl	8002794 <__NVIC_GetPriorityGrouping>
 8002914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f7ff ff90 	bl	8002840 <NVIC_EncodePriority>
 8002920:	4602      	mov	r2, r0
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff5f 	bl	80027ec <__NVIC_SetPriority>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff33 	bl	80027b0 <__NVIC_EnableIRQ>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffa4 	bl	80028a8 <SysTick_Config>
 8002960:	4603      	mov	r3, r0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800297a:	e15a      	b.n	8002c32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 814c 	beq.w	8002c2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d130      	bne.n	8002a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e2:	2201      	movs	r2, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0201 	and.w	r2, r3, #1
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d017      	beq.n	8002a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d123      	bne.n	8002a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	6939      	ldr	r1, [r7, #16]
 8002a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0203 	and.w	r2, r3, #3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a6 	beq.w	8002c2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae0:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <HAL_GPIO_Init+0x2e4>)
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae4:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <HAL_GPIO_Init+0x2e4>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6613      	str	r3, [r2, #96]	; 0x60
 8002aec:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_GPIO_Init+0x2e4>)
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af8:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_GPIO_Init+0x2e8>)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b22:	d01f      	beq.n	8002b64 <HAL_GPIO_Init+0x1f8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d019      	beq.n	8002b60 <HAL_GPIO_Init+0x1f4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_GPIO_Init+0x2f0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_GPIO_Init+0x1f0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_GPIO_Init+0x2f4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00d      	beq.n	8002b58 <HAL_GPIO_Init+0x1ec>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a49      	ldr	r2, [pc, #292]	; (8002c64 <HAL_GPIO_Init+0x2f8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <HAL_GPIO_Init+0x1e8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a48      	ldr	r2, [pc, #288]	; (8002c68 <HAL_GPIO_Init+0x2fc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_GPIO_Init+0x1e4>
 8002b4c:	2305      	movs	r3, #5
 8002b4e:	e00a      	b.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b50:	2306      	movs	r3, #6
 8002b52:	e008      	b.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e006      	b.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e004      	b.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e002      	b.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b64:	2300      	movs	r3, #0
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	f002 0203 	and.w	r2, r2, #3
 8002b6c:	0092      	lsls	r2, r2, #2
 8002b6e:	4093      	lsls	r3, r2
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b76:	4937      	ldr	r1, [pc, #220]	; (8002c54 <HAL_GPIO_Init+0x2e8>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba8:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bd2:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_GPIO_Init+0x300>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f ae9d 	bne.w	800297c <HAL_GPIO_Init+0x10>
  }
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	48000800 	.word	0x48000800
 8002c60:	48000c00 	.word	0x48000c00
 8002c64:	48001000 	.word	0x48001000
 8002c68:	48001400 	.word	0x48001400
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ff46 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d141      	bne.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d131      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cec:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf2:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d04:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d0c:	4b40      	ldr	r3, [pc, #256]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2232      	movs	r2, #50	; 0x32
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a3f      	ldr	r2, [pc, #252]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d22:	e002      	b.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d36:	d102      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f2      	bne.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d3e:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d158      	bne.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e057      	b.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d56:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d60:	e04d      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d141      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d131      	bne.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7e:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d90:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2232      	movs	r2, #50	; 0x32
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	0c9b      	lsrs	r3, r3, #18
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dae:	e002      	b.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d102      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f2      	bne.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d112      	bne.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e011      	b.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dec:	e007      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	20000004 	.word	0x20000004
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e26:	6093      	str	r3, [r2, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40007000 	.word	0x40007000

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e306      	b.n	8003458 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d075      	beq.n	8002f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	4b97      	ldr	r3, [pc, #604]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	4b94      	ldr	r3, [pc, #592]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d102      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3e>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d002      	beq.n	8002e7c <HAL_RCC_OscConfig+0x44>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d157      	bne.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e2e1      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x74>
 8002e9e:	4b85      	ldr	r3, [pc, #532]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a84      	ldr	r2, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e01d      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x98>
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b7c      	ldr	r3, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7b      	ldr	r2, [pc, #492]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002ed0:	4b78      	ldr	r3, [pc, #480]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a77      	ldr	r2, [pc, #476]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b75      	ldr	r3, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a74      	ldr	r2, [pc, #464]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f844 	bl	8000f7c <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f840 	bl	8000f7c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e2a6      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xc0>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe f830 	bl	8000f7c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe f82c 	bl	8000f7c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e292      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f32:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d075      	beq.n	800303a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b56      	ldr	r3, [pc, #344]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0x136>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d002      	beq.n	8002f74 <HAL_RCC_OscConfig+0x13c>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d11f      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_OscConfig+0x154>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e265      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8c:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	4946      	ldr	r1, [pc, #280]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fa0:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd ff9d 	bl	8000ee4 <HAL_InitTick>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d043      	beq.n	8003038 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e251      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d023      	beq.n	8003004 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3c      	ldr	r2, [pc, #240]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fd ffd8 	bl	8000f7c <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fd ffd4 	bl	8000f7c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e23a      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	492d      	ldr	r1, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
 8003002:	e01a      	b.n	800303a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 800300a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fd ffb4 	bl	8000f7c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7fd ffb0 	bl	8000f7c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e216      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1e0>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d041      	beq.n	80030ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01c      	beq.n	8003088 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8003050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fd ff8d 	bl	8000f7c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003066:	f7fd ff89 	bl	8000f7c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1ef      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ef      	beq.n	8003066 <HAL_RCC_OscConfig+0x22e>
 8003086:	e020      	b.n	80030ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fd ff70 	bl	8000f7c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309e:	e00d      	b.n	80030bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a0:	f7fd ff6c 	bl	8000f7c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d906      	bls.n	80030bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e1d2      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030bc:	4b8c      	ldr	r3, [pc, #560]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ea      	bne.n	80030a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80a6 	beq.w	8003224 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030dc:	4b84      	ldr	r3, [pc, #528]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_OscConfig+0x2b4>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x2b6>
 80030ec:	2300      	movs	r3, #0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b7f      	ldr	r3, [pc, #508]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a7e      	ldr	r2, [pc, #504]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	4b7c      	ldr	r3, [pc, #496]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310e:	4b79      	ldr	r3, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x4bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x4bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x4bc>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fd ff29 	bl	8000f7c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd ff25 	bl	8000f7c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e18b      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003140:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x4bc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d108      	bne.n	8003166 <HAL_RCC_OscConfig+0x32e>
 8003154:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003164:	e024      	b.n	80031b0 <HAL_RCC_OscConfig+0x378>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d110      	bne.n	8003190 <HAL_RCC_OscConfig+0x358>
 800316e:	4b60      	ldr	r3, [pc, #384]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317e:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800318e:	e00f      	b.n	80031b0 <HAL_RCC_OscConfig+0x378>
 8003190:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fd fee0 	bl	8000f7c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fd fedc 	bl	8000f7c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e140      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ed      	beq.n	80031c0 <HAL_RCC_OscConfig+0x388>
 80031e4:	e015      	b.n	8003212 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fec9 	bl	8000f7c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fec5 	bl	8000f7c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e129      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ed      	bne.n	80031ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003212:	7ffb      	ldrb	r3, [r7, #31]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03c      	beq.n	80032aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01c      	beq.n	8003272 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd fe98 	bl	8000f7c <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003250:	f7fd fe94 	bl	8000f7c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0fa      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <HAL_RCC_OscConfig+0x418>
 8003270:	e01b      	b.n	80032aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 8003274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003278:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fd fe7b 	bl	8000f7c <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328a:	f7fd fe77 	bl	8000f7c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0dd      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ef      	bne.n	800328a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80d1 	beq.w	8003456 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	f000 808b 	beq.w	80033d8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d15e      	bne.n	8003388 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <HAL_RCC_OscConfig+0x4b8>)
 80032d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fd fe51 	bl	8000f7c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032dc:	e00c      	b.n	80032f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fd fe4d 	bl	8000f7c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d905      	bls.n	80032f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0b3      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ec      	bne.n	80032de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003304:	4b56      	ldr	r3, [pc, #344]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_RCC_OscConfig+0x62c>)
 800330a:	4013      	ands	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6a11      	ldr	r1, [r2, #32]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003314:	3a01      	subs	r2, #1
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800331e:	0212      	lsls	r2, r2, #8
 8003320:	4311      	orrs	r1, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003326:	0852      	lsrs	r2, r2, #1
 8003328:	3a01      	subs	r2, #1
 800332a:	0552      	lsls	r2, r2, #21
 800332c:	4311      	orrs	r1, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003332:	0852      	lsrs	r2, r2, #1
 8003334:	3a01      	subs	r2, #1
 8003336:	0652      	lsls	r2, r2, #25
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800333e:	06d2      	lsls	r2, r2, #27
 8003340:	430a      	orrs	r2, r1
 8003342:	4947      	ldr	r1, [pc, #284]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 8003344:	4313      	orrs	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b45      	ldr	r3, [pc, #276]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a44      	ldr	r2, [pc, #272]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003352:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a41      	ldr	r2, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800335a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fe0c 	bl	8000f7c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fd fe08 	bl	8000f7c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e06e      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x530>
 8003386:	e066      	b.n	8003456 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b35      	ldr	r3, [pc, #212]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a34      	ldr	r2, [pc, #208]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800338e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003392:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a31      	ldr	r2, [pc, #196]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80033a0:	4b2f      	ldr	r3, [pc, #188]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 80033a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd fde4 	bl	8000f7c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fd fde0 	bl	8000f7c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e046      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ca:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x580>
 80033d6:	e03e      	b.n	8003456 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e039      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033e4:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_RCC_OscConfig+0x628>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d12c      	bne.n	8003452 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	3b01      	subs	r3, #1
 8003404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d123      	bne.n	8003452 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d11b      	bne.n	8003452 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d113      	bne.n	8003452 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d109      	bne.n	8003452 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	019f800c 	.word	0x019f800c

08003468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e11e      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b91      	ldr	r3, [pc, #580]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b8e      	ldr	r3, [pc, #568]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 020f 	bic.w	r2, r3, #15
 8003496:	498c      	ldr	r1, [pc, #560]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b8a      	ldr	r3, [pc, #552]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e106      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d073      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d129      	bne.n	8003518 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0f4      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034d4:	f000 f99e 	bl	8003814 <RCC_GetSysClockFreqFromPLLSource>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4a7c      	ldr	r2, [pc, #496]	; (80036d0 <HAL_RCC_ClockConfig+0x268>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d93f      	bls.n	8003562 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d033      	beq.n	8003562 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12f      	bne.n	8003562 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003502:	4b72      	ldr	r3, [pc, #456]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800350a:	4a70      	ldr	r2, [pc, #448]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 800350c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003510:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e024      	b.n	8003562 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d107      	bne.n	8003530 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0c6      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003530:	4b66      	ldr	r3, [pc, #408]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0be      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003540:	f000 f8ce 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8003544:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4a61      	ldr	r2, [pc, #388]	; (80036d0 <HAL_RCC_ClockConfig+0x268>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d909      	bls.n	8003562 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003556:	4a5d      	ldr	r2, [pc, #372]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4957      	ldr	r1, [pc, #348]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fd fd02 	bl	8000f7c <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fd fcfe 	bl	8000f7c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e095      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a42      	ldr	r2, [pc, #264]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80035c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035d4:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035dc:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80035de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4936      	ldr	r1, [pc, #216]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
 80035f6:	e008      	b.n	800360a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d105      	bne.n	800360a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035fe:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003608:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d21d      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 020f 	bic.w	r2, r3, #15
 8003620:	4929      	ldr	r1, [pc, #164]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003628:	f7fd fca8 	bl	8000f7c <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fd fca4 	bl	8000f7c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e03b      	b.n	80036be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x260>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d1ed      	bne.n	8003630 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4917      	ldr	r1, [pc, #92]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490f      	ldr	r1, [pc, #60]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003692:	f000 f825 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RCC_ClockConfig+0x264>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490c      	ldr	r1, [pc, #48]	; (80036d4 <HAL_RCC_ClockConfig+0x26c>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x270>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x274>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fc14 	bl	8000ee4 <HAL_InitTick>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40021000 	.word	0x40021000
 80036d0:	04c4b400 	.word	0x04c4b400
 80036d4:	08005730 	.word	0x08005730
 80036d8:	20000004 	.word	0x20000004
 80036dc:	20000008 	.word	0x20000008

080036e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d102      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e047      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d102      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	e03e      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d136      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3301      	adds	r3, #1
 800372c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d10c      	bne.n	800374e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003734:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a16      	ldr	r2, [pc, #88]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800373e:	68d2      	ldr	r2, [r2, #12]
 8003740:	0a12      	lsrs	r2, r2, #8
 8003742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	617b      	str	r3, [r7, #20]
      break;
 800374c:	e00c      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800374e:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	0a12      	lsrs	r2, r2, #8
 800375c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
      break;
 8003766:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0e5b      	lsrs	r3, r3, #25
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e001      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003788:	693b      	ldr	r3, [r7, #16]
}
 800378a:	4618      	mov	r0, r3
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	016e3600 	.word	0x016e3600

080037a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037c0:	f7ff fff0 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4904      	ldr	r1, [pc, #16]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08005740 	.word	0x08005740

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037ec:	f7ff ffda 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0adb      	lsrs	r3, r3, #11
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	08005740 	.word	0x08005740

08003814 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d10c      	bne.n	8003852 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003842:	68d2      	ldr	r2, [r2, #12]
 8003844:	0a12      	lsrs	r2, r2, #8
 8003846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	617b      	str	r3, [r7, #20]
    break;
 8003850:	e00c      	b.n	800386c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	0a12      	lsrs	r2, r2, #8
 8003860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    break;
 800386a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0e5b      	lsrs	r3, r3, #25
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003886:	687b      	ldr	r3, [r7, #4]
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40021000 	.word	0x40021000
 8003898:	016e3600 	.word	0x016e3600
 800389c:	00f42400 	.word	0x00f42400

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a8:	2300      	movs	r3, #0
 80038aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ac:	2300      	movs	r3, #0
 80038ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8098 	beq.w	80039ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c2:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	4a3f      	ldr	r2, [pc, #252]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	; 0x58
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a39      	ldr	r2, [pc, #228]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f6:	f7fd fb41 	bl	8000f7c <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fc:	e009      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fd fb3d 	bl	8000f7c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d902      	bls.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	74fb      	strb	r3, [r7, #19]
        break;
 8003910:	e005      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ef      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d159      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d019      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd fafd 	bl	8000f7c <HAL_GetTick>
 8003982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003984:	e00b      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fd faf9 	bl	8000f7c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d902      	bls.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	74fb      	strb	r3, [r7, #19]
            break;
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ec      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	74bb      	strb	r3, [r7, #18]
 80039ce:	e005      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039dc:	7c7b      	ldrb	r3, [r7, #17]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e2:	4ba7      	ldr	r3, [pc, #668]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	4aa6      	ldr	r2, [pc, #664]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039fa:	4ba1      	ldr	r3, [pc, #644]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f023 0203 	bic.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	499d      	ldr	r1, [pc, #628]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a1c:	4b98      	ldr	r3, [pc, #608]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f023 020c 	bic.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4995      	ldr	r1, [pc, #596]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a3e:	4b90      	ldr	r3, [pc, #576]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	498c      	ldr	r1, [pc, #560]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a60:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4984      	ldr	r1, [pc, #528]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a82:	4b7f      	ldr	r3, [pc, #508]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	497b      	ldr	r1, [pc, #492]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aa4:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	4973      	ldr	r1, [pc, #460]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac6:	4b6e      	ldr	r3, [pc, #440]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	496a      	ldr	r1, [pc, #424]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ae8:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	4962      	ldr	r1, [pc, #392]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	4959      	ldr	r1, [pc, #356]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b2c:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	4951      	ldr	r1, [pc, #324]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4e:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4948      	ldr	r1, [pc, #288]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	4940      	ldr	r1, [pc, #256]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a3a      	ldr	r2, [pc, #232]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	4932      	ldr	r1, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a2c      	ldr	r2, [pc, #176]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	4924      	ldr	r1, [pc, #144]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c00:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	4916      	ldr	r1, [pc, #88]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a02      	ldr	r2, [pc, #8]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7a:	60d3      	str	r3, [r2, #12]
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c90:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4926      	ldr	r1, [pc, #152]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cae:	d105      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cb0:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd6:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	490a      	ldr	r1, [pc, #40]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e049      	b.n	8003de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc ffe2 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 f8a6 	bl	8003ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04c      	b.n	8003e9e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <HAL_TIM_Base_Start+0xc0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d01d      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <HAL_TIM_Base_Start+0xc4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d018      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <HAL_TIM_Base_Start+0xc8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_TIM_Base_Start+0xcc>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_TIM_Base_Start+0xd0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <HAL_TIM_Base_Start+0xd4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIM_Base_Start+0x70>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <HAL_TIM_Base_Start+0xd8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d115      	bne.n	8003e88 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_TIM_Base_Start+0xdc>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d015      	beq.n	8003e9a <HAL_TIM_Base_Start+0xae>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e74:	d011      	beq.n	8003e9a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e86:	e008      	b.n	8003e9a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e000      	b.n	8003e9c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40013400 	.word	0x40013400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40015000 	.word	0x40015000
 8003ec8:	00010007 	.word	0x00010007

08003ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a46      	ldr	r2, [pc, #280]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d017      	beq.n	8003f14 <TIM_Base_SetConfig+0x48>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d013      	beq.n	8003f14 <TIM_Base_SetConfig+0x48>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a43      	ldr	r2, [pc, #268]	; (8003ffc <TIM_Base_SetConfig+0x130>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_Base_SetConfig+0x48>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a42      	ldr	r2, [pc, #264]	; (8004000 <TIM_Base_SetConfig+0x134>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0x48>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a41      	ldr	r2, [pc, #260]	; (8004004 <TIM_Base_SetConfig+0x138>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0x48>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a40      	ldr	r2, [pc, #256]	; (8004008 <TIM_Base_SetConfig+0x13c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0x48>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <TIM_Base_SetConfig+0x140>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d108      	bne.n	8003f26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d023      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d01f      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a30      	ldr	r2, [pc, #192]	; (8003ffc <TIM_Base_SetConfig+0x130>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01b      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <TIM_Base_SetConfig+0x134>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d017      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2e      	ldr	r2, [pc, #184]	; (8004004 <TIM_Base_SetConfig+0x138>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2d      	ldr	r2, [pc, #180]	; (8004008 <TIM_Base_SetConfig+0x13c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00f      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <TIM_Base_SetConfig+0x144>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <TIM_Base_SetConfig+0x148>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <TIM_Base_SetConfig+0x14c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_Base_SetConfig+0xaa>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <TIM_Base_SetConfig+0x140>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <TIM_Base_SetConfig+0x110>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <TIM_Base_SetConfig+0x13c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00f      	beq.n	8003fdc <TIM_Base_SetConfig+0x110>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a14      	ldr	r2, [pc, #80]	; (8004010 <TIM_Base_SetConfig+0x144>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <TIM_Base_SetConfig+0x110>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	; (8004014 <TIM_Base_SetConfig+0x148>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_Base_SetConfig+0x110>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <TIM_Base_SetConfig+0x14c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x110>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0d      	ldr	r2, [pc, #52]	; (800400c <TIM_Base_SetConfig+0x140>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d103      	bne.n	8003fe4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	615a      	str	r2, [r3, #20]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40015000 	.word	0x40015000
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800

0800401c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e042      	b.n	80040b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc fe1b 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8c2 	bl	80041e8 <UART_SetConfig>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fbb2 	bl	80047e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800408a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800409a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fc39 	bl	8004924 <UART_CheckIdleState>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	f040 8083 	bne.w	80041de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit+0x28>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e07b      	b.n	80041e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit+0x3a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e074      	b.n	80041e0 <HAL_UART_Transmit+0x124>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fc ff35 	bl	8000f7c <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d108      	bne.n	8004140 <HAL_UART_Transmit+0x84>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e003      	b.n	8004148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004150:	e02c      	b.n	80041ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fc2c 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e039      	b.n	80041e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	3302      	adds	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e007      	b.n	800419a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3301      	adds	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1cc      	bne.n	8004152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fbf9 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e006      	b.n	80041e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b08c      	sub	sp, #48	; 0x30
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4baa      	ldr	r3, [pc, #680]	; (80044c0 <UART_SetConfig+0x2d8>)
 8004218:	4013      	ands	r3, r2
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a9f      	ldr	r2, [pc, #636]	; (80044c4 <UART_SetConfig+0x2dc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	4313      	orrs	r3, r2
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800425e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004268:	430b      	orrs	r3, r1
 800426a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	f023 010f 	bic.w	r1, r3, #15
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a90      	ldr	r2, [pc, #576]	; (80044c8 <UART_SetConfig+0x2e0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d125      	bne.n	80042d8 <UART_SetConfig+0xf0>
 800428c:	4b8f      	ldr	r3, [pc, #572]	; (80044cc <UART_SetConfig+0x2e4>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b03      	cmp	r3, #3
 8004298:	d81a      	bhi.n	80042d0 <UART_SetConfig+0xe8>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0xb8>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b6:	e116      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80042b8:	2302      	movs	r3, #2
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e112      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	e10e      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ce:	e10a      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d6:	e106      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7c      	ldr	r2, [pc, #496]	; (80044d0 <UART_SetConfig+0x2e8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d138      	bne.n	8004354 <UART_SetConfig+0x16c>
 80042e2:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <UART_SetConfig+0x2e4>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d82d      	bhi.n	800434c <UART_SetConfig+0x164>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x110>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800434d 	.word	0x0800434d
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	0800434d 	.word	0x0800434d
 8004314:	0800434d 	.word	0x0800434d
 8004318:	08004335 	.word	0x08004335
 800431c:	0800434d 	.word	0x0800434d
 8004320:	0800434d 	.word	0x0800434d
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004345 	.word	0x08004345
 800432c:	2300      	movs	r3, #0
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004332:	e0d8      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433a:	e0d4      	b.n	80044e6 <UART_SetConfig+0x2fe>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004342:	e0d0      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800434a:	e0cc      	b.n	80044e6 <UART_SetConfig+0x2fe>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004352:	e0c8      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <UART_SetConfig+0x2ec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d125      	bne.n	80043aa <UART_SetConfig+0x1c2>
 800435e:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <UART_SetConfig+0x2e4>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d016      	beq.n	800439a <UART_SetConfig+0x1b2>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d818      	bhi.n	80043a2 <UART_SetConfig+0x1ba>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d00a      	beq.n	800438a <UART_SetConfig+0x1a2>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d814      	bhi.n	80043a2 <UART_SetConfig+0x1ba>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <UART_SetConfig+0x19a>
 800437c:	2b10      	cmp	r3, #16
 800437e:	d008      	beq.n	8004392 <UART_SetConfig+0x1aa>
 8004380:	e00f      	b.n	80043a2 <UART_SetConfig+0x1ba>
 8004382:	2300      	movs	r3, #0
 8004384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004388:	e0ad      	b.n	80044e6 <UART_SetConfig+0x2fe>
 800438a:	2302      	movs	r3, #2
 800438c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004390:	e0a9      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004392:	2304      	movs	r3, #4
 8004394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004398:	e0a5      	b.n	80044e6 <UART_SetConfig+0x2fe>
 800439a:	2308      	movs	r3, #8
 800439c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043a0:	e0a1      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80043a2:	2310      	movs	r3, #16
 80043a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043a8:	e09d      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <UART_SetConfig+0x2f0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d125      	bne.n	8004400 <UART_SetConfig+0x218>
 80043b4:	4b45      	ldr	r3, [pc, #276]	; (80044cc <UART_SetConfig+0x2e4>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043be:	2bc0      	cmp	r3, #192	; 0xc0
 80043c0:	d016      	beq.n	80043f0 <UART_SetConfig+0x208>
 80043c2:	2bc0      	cmp	r3, #192	; 0xc0
 80043c4:	d818      	bhi.n	80043f8 <UART_SetConfig+0x210>
 80043c6:	2b80      	cmp	r3, #128	; 0x80
 80043c8:	d00a      	beq.n	80043e0 <UART_SetConfig+0x1f8>
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d814      	bhi.n	80043f8 <UART_SetConfig+0x210>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <UART_SetConfig+0x1f0>
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d008      	beq.n	80043e8 <UART_SetConfig+0x200>
 80043d6:	e00f      	b.n	80043f8 <UART_SetConfig+0x210>
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043de:	e082      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80043e0:	2302      	movs	r3, #2
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e6:	e07e      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80043e8:	2304      	movs	r3, #4
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ee:	e07a      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80043f0:	2308      	movs	r3, #8
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f6:	e076      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80043f8:	2310      	movs	r3, #16
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043fe:	e072      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a35      	ldr	r2, [pc, #212]	; (80044dc <UART_SetConfig+0x2f4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d12a      	bne.n	8004460 <UART_SetConfig+0x278>
 800440a:	4b30      	ldr	r3, [pc, #192]	; (80044cc <UART_SetConfig+0x2e4>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004418:	d01a      	beq.n	8004450 <UART_SetConfig+0x268>
 800441a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441e:	d81b      	bhi.n	8004458 <UART_SetConfig+0x270>
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d00c      	beq.n	8004440 <UART_SetConfig+0x258>
 8004426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442a:	d815      	bhi.n	8004458 <UART_SetConfig+0x270>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <UART_SetConfig+0x250>
 8004430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004434:	d008      	beq.n	8004448 <UART_SetConfig+0x260>
 8004436:	e00f      	b.n	8004458 <UART_SetConfig+0x270>
 8004438:	2300      	movs	r3, #0
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443e:	e052      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004440:	2302      	movs	r3, #2
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004446:	e04e      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444e:	e04a      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004456:	e046      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445e:	e042      	b.n	80044e6 <UART_SetConfig+0x2fe>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <UART_SetConfig+0x2dc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d13a      	bne.n	80044e0 <UART_SetConfig+0x2f8>
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <UART_SetConfig+0x2e4>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004478:	d01a      	beq.n	80044b0 <UART_SetConfig+0x2c8>
 800447a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800447e:	d81b      	bhi.n	80044b8 <UART_SetConfig+0x2d0>
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d00c      	beq.n	80044a0 <UART_SetConfig+0x2b8>
 8004486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448a:	d815      	bhi.n	80044b8 <UART_SetConfig+0x2d0>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <UART_SetConfig+0x2b0>
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d008      	beq.n	80044a8 <UART_SetConfig+0x2c0>
 8004496:	e00f      	b.n	80044b8 <UART_SetConfig+0x2d0>
 8004498:	2300      	movs	r3, #0
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449e:	e022      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80044a0:	2302      	movs	r3, #2
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a6:	e01e      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ae:	e01a      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b6:	e016      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044be:	e012      	b.n	80044e6 <UART_SetConfig+0x2fe>
 80044c0:	cfff69f3 	.word	0xcfff69f3
 80044c4:	40008000 	.word	0x40008000
 80044c8:	40013800 	.word	0x40013800
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40004400 	.word	0x40004400
 80044d4:	40004800 	.word	0x40004800
 80044d8:	40004c00 	.word	0x40004c00
 80044dc:	40005000 	.word	0x40005000
 80044e0:	2310      	movs	r3, #16
 80044e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4aae      	ldr	r2, [pc, #696]	; (80047a4 <UART_SetConfig+0x5bc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	f040 8097 	bne.w	8004620 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d823      	bhi.n	8004542 <UART_SetConfig+0x35a>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x318>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004525 	.word	0x08004525
 8004504:	08004543 	.word	0x08004543
 8004508:	0800452d 	.word	0x0800452d
 800450c:	08004543 	.word	0x08004543
 8004510:	08004533 	.word	0x08004533
 8004514:	08004543 	.word	0x08004543
 8004518:	08004543 	.word	0x08004543
 800451c:	08004543 	.word	0x08004543
 8004520:	0800453b 	.word	0x0800453b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7ff f94a 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800452a:	e010      	b.n	800454e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4b9e      	ldr	r3, [pc, #632]	; (80047a8 <UART_SetConfig+0x5c0>)
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004530:	e00d      	b.n	800454e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7ff f8d5 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8004536:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004538:	e009      	b.n	800454e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004540:	e005      	b.n	800454e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800454c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8130 	beq.w	80047b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	4a94      	ldr	r2, [pc, #592]	; (80047ac <UART_SetConfig+0x5c4>)
 800455c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004560:	461a      	mov	r2, r3
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	fbb3 f3f2 	udiv	r3, r3, r2
 8004568:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	429a      	cmp	r2, r3
 8004578:	d305      	bcc.n	8004586 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	429a      	cmp	r2, r3
 8004584:	d903      	bls.n	800458e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800458c:	e113      	b.n	80047b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	2200      	movs	r2, #0
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	60fa      	str	r2, [r7, #12]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	4a84      	ldr	r2, [pc, #528]	; (80047ac <UART_SetConfig+0x5c4>)
 800459c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045b0:	f7fb fe8e 	bl	80002d0 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	020b      	lsls	r3, r1, #8
 80045c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045ca:	0202      	lsls	r2, r0, #8
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	6849      	ldr	r1, [r1, #4]
 80045d0:	0849      	lsrs	r1, r1, #1
 80045d2:	2000      	movs	r0, #0
 80045d4:	460c      	mov	r4, r1
 80045d6:	4605      	mov	r5, r0
 80045d8:	eb12 0804 	adds.w	r8, r2, r4
 80045dc:	eb43 0905 	adc.w	r9, r3, r5
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	469a      	mov	sl, r3
 80045e8:	4693      	mov	fp, r2
 80045ea:	4652      	mov	r2, sl
 80045ec:	465b      	mov	r3, fp
 80045ee:	4640      	mov	r0, r8
 80045f0:	4649      	mov	r1, r9
 80045f2:	f7fb fe6d 	bl	80002d0 <__aeabi_uldivmod>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4613      	mov	r3, r2
 80045fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004604:	d308      	bcc.n	8004618 <UART_SetConfig+0x430>
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460c:	d204      	bcs.n	8004618 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	e0ce      	b.n	80047b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800461e:	e0ca      	b.n	80047b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004628:	d166      	bne.n	80046f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800462a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800462e:	2b08      	cmp	r3, #8
 8004630:	d827      	bhi.n	8004682 <UART_SetConfig+0x49a>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x450>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7ff f8ae 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004662:	e014      	b.n	800468e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7ff f8c0 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800466a:	e010      	b.n	800468e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <UART_SetConfig+0x5c0>)
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004670:	e00d      	b.n	800468e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7ff f835 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004678:	e009      	b.n	800468e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004680:	e005      	b.n	800468e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800468c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8090 	beq.w	80047b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	4a44      	ldr	r2, [pc, #272]	; (80047ac <UART_SetConfig+0x5c4>)
 800469c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a8:	005a      	lsls	r2, r3, #1
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	441a      	add	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b0f      	cmp	r3, #15
 80046c0:	d916      	bls.n	80046f0 <UART_SetConfig+0x508>
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d212      	bcs.n	80046f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f023 030f 	bic.w	r3, r3, #15
 80046d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	b29a      	uxth	r2, r3
 80046e0:	8bfb      	ldrh	r3, [r7, #30]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	8bfa      	ldrh	r2, [r7, #30]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	e062      	b.n	80047b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046f6:	e05e      	b.n	80047b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d828      	bhi.n	8004752 <UART_SetConfig+0x56a>
 8004700:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0x520>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800472d 	.word	0x0800472d
 800470c:	08004735 	.word	0x08004735
 8004710:	0800473d 	.word	0x0800473d
 8004714:	08004753 	.word	0x08004753
 8004718:	08004743 	.word	0x08004743
 800471c:	08004753 	.word	0x08004753
 8004720:	08004753 	.word	0x08004753
 8004724:	08004753 	.word	0x08004753
 8004728:	0800474b 	.word	0x0800474b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800472c:	f7ff f846 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004732:	e014      	b.n	800475e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7ff f858 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800473a:	e010      	b.n	800475e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <UART_SetConfig+0x5c0>)
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004740:	e00d      	b.n	800475e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004742:	f7fe ffcd 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8004746:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004748:	e009      	b.n	800475e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004750:	e005      	b.n	800475e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800475c:	bf00      	nop
    }

    if (pclk != 0U)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d028      	beq.n	80047b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	4a10      	ldr	r2, [pc, #64]	; (80047ac <UART_SetConfig+0x5c4>)
 800476a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800476e:	461a      	mov	r2, r3
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	fbb3 f2f2 	udiv	r2, r3, r2
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	441a      	add	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	2b0f      	cmp	r3, #15
 800478c:	d910      	bls.n	80047b0 <UART_SetConfig+0x5c8>
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d20c      	bcs.n	80047b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	b29a      	uxth	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60da      	str	r2, [r3, #12]
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x5ce>
 80047a2:	bf00      	nop
 80047a4:	40008000 	.word	0x40008000
 80047a8:	00f42400 	.word	0x00f42400
 80047ac:	08005748 	.word	0x08005748
      }
      else
      {
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80047d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3730      	adds	r7, #48	; 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048de:	d10a      	bne.n	80048f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004934:	f7fc fb22 	bl	8000f7c <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b08      	cmp	r3, #8
 8004946:	d10e      	bne.n	8004966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f82f 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e025      	b.n	80049b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d10e      	bne.n	8004992 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f819 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e00f      	b.n	80049b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b09c      	sub	sp, #112	; 0x70
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ca:	e0a9      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d2:	f000 80a5 	beq.w	8004b20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fc fad1 	bl	8000f7c <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <UART_WaitOnFlagUntilTimeout+0x32>
 80049e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d140      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a00:	667b      	str	r3, [r7, #100]	; 0x64
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	663b      	str	r3, [r7, #96]	; 0x60
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e069      	b.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d051      	beq.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8a:	d149      	bne.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ae8:	623a      	str	r2, [r7, #32]
 8004aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e010      	b.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f43f af46 	beq.w	80049cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3770      	adds	r7, #112	; 0x70
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e027      	b.n	8004bb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	; 0x24
 8004b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e02d      	b.n	8004c30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f84f 	bl	8004cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e02d      	b.n	8004cac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f811 	bl	8004cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d108      	bne.n	8004cd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cd4:	e031      	b.n	8004d3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cda:	2308      	movs	r3, #8
 8004cdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	0e5b      	lsrs	r3, r3, #25
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	0f5b      	lsrs	r3, r3, #29
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cfe:	7bbb      	ldrb	r3, [r7, #14]
 8004d00:	7b3a      	ldrb	r2, [r7, #12]
 8004d02:	4911      	ldr	r1, [pc, #68]	; (8004d48 <UARTEx_SetNbDataToProcess+0x94>)
 8004d04:	5c8a      	ldrb	r2, [r1, r2]
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d0a:	7b3a      	ldrb	r2, [r7, #12]
 8004d0c:	490f      	ldr	r1, [pc, #60]	; (8004d4c <UARTEx_SetNbDataToProcess+0x98>)
 8004d0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	7b7a      	ldrb	r2, [r7, #13]
 8004d20:	4909      	ldr	r1, [pc, #36]	; (8004d48 <UARTEx_SetNbDataToProcess+0x94>)
 8004d22:	5c8a      	ldrb	r2, [r1, r2]
 8004d24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d28:	7b7a      	ldrb	r2, [r7, #13]
 8004d2a:	4908      	ldr	r1, [pc, #32]	; (8004d4c <UARTEx_SetNbDataToProcess+0x98>)
 8004d2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	08005760 	.word	0x08005760
 8004d4c:	08005768 	.word	0x08005768

08004d50 <__errno>:
 8004d50:	4b01      	ldr	r3, [pc, #4]	; (8004d58 <__errno+0x8>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000010 	.word	0x20000010

08004d5c <__libc_init_array>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	4d0d      	ldr	r5, [pc, #52]	; (8004d94 <__libc_init_array+0x38>)
 8004d60:	4c0d      	ldr	r4, [pc, #52]	; (8004d98 <__libc_init_array+0x3c>)
 8004d62:	1b64      	subs	r4, r4, r5
 8004d64:	10a4      	asrs	r4, r4, #2
 8004d66:	2600      	movs	r6, #0
 8004d68:	42a6      	cmp	r6, r4
 8004d6a:	d109      	bne.n	8004d80 <__libc_init_array+0x24>
 8004d6c:	4d0b      	ldr	r5, [pc, #44]	; (8004d9c <__libc_init_array+0x40>)
 8004d6e:	4c0c      	ldr	r4, [pc, #48]	; (8004da0 <__libc_init_array+0x44>)
 8004d70:	f000 fc8e 	bl	8005690 <_init>
 8004d74:	1b64      	subs	r4, r4, r5
 8004d76:	10a4      	asrs	r4, r4, #2
 8004d78:	2600      	movs	r6, #0
 8004d7a:	42a6      	cmp	r6, r4
 8004d7c:	d105      	bne.n	8004d8a <__libc_init_array+0x2e>
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d84:	4798      	blx	r3
 8004d86:	3601      	adds	r6, #1
 8004d88:	e7ee      	b.n	8004d68 <__libc_init_array+0xc>
 8004d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8e:	4798      	blx	r3
 8004d90:	3601      	adds	r6, #1
 8004d92:	e7f2      	b.n	8004d7a <__libc_init_array+0x1e>
 8004d94:	080057ac 	.word	0x080057ac
 8004d98:	080057ac 	.word	0x080057ac
 8004d9c:	080057ac 	.word	0x080057ac
 8004da0:	080057b0 	.word	0x080057b0

08004da4 <memset>:
 8004da4:	4402      	add	r2, r0
 8004da6:	4603      	mov	r3, r0
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d100      	bne.n	8004dae <memset+0xa>
 8004dac:	4770      	bx	lr
 8004dae:	f803 1b01 	strb.w	r1, [r3], #1
 8004db2:	e7f9      	b.n	8004da8 <memset+0x4>

08004db4 <siprintf>:
 8004db4:	b40e      	push	{r1, r2, r3}
 8004db6:	b500      	push	{lr}
 8004db8:	b09c      	sub	sp, #112	; 0x70
 8004dba:	ab1d      	add	r3, sp, #116	; 0x74
 8004dbc:	9002      	str	r0, [sp, #8]
 8004dbe:	9006      	str	r0, [sp, #24]
 8004dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dc4:	4809      	ldr	r0, [pc, #36]	; (8004dec <siprintf+0x38>)
 8004dc6:	9107      	str	r1, [sp, #28]
 8004dc8:	9104      	str	r1, [sp, #16]
 8004dca:	4909      	ldr	r1, [pc, #36]	; (8004df0 <siprintf+0x3c>)
 8004dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd0:	9105      	str	r1, [sp, #20]
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	a902      	add	r1, sp, #8
 8004dd8:	f000 f868 	bl	8004eac <_svfiprintf_r>
 8004ddc:	9b02      	ldr	r3, [sp, #8]
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	b01c      	add	sp, #112	; 0x70
 8004de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de8:	b003      	add	sp, #12
 8004dea:	4770      	bx	lr
 8004dec:	20000010 	.word	0x20000010
 8004df0:	ffff0208 	.word	0xffff0208

08004df4 <__ssputs_r>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	688e      	ldr	r6, [r1, #8]
 8004dfa:	429e      	cmp	r6, r3
 8004dfc:	4682      	mov	sl, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4690      	mov	r8, r2
 8004e02:	461f      	mov	r7, r3
 8004e04:	d838      	bhi.n	8004e78 <__ssputs_r+0x84>
 8004e06:	898a      	ldrh	r2, [r1, #12]
 8004e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e0c:	d032      	beq.n	8004e74 <__ssputs_r+0x80>
 8004e0e:	6825      	ldr	r5, [r4, #0]
 8004e10:	6909      	ldr	r1, [r1, #16]
 8004e12:	eba5 0901 	sub.w	r9, r5, r1
 8004e16:	6965      	ldr	r5, [r4, #20]
 8004e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e20:	3301      	adds	r3, #1
 8004e22:	444b      	add	r3, r9
 8004e24:	106d      	asrs	r5, r5, #1
 8004e26:	429d      	cmp	r5, r3
 8004e28:	bf38      	it	cc
 8004e2a:	461d      	movcc	r5, r3
 8004e2c:	0553      	lsls	r3, r2, #21
 8004e2e:	d531      	bpl.n	8004e94 <__ssputs_r+0xa0>
 8004e30:	4629      	mov	r1, r5
 8004e32:	f000 fb63 	bl	80054fc <_malloc_r>
 8004e36:	4606      	mov	r6, r0
 8004e38:	b950      	cbnz	r0, 8004e50 <__ssputs_r+0x5c>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	f8ca 3000 	str.w	r3, [sl]
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	464a      	mov	r2, r9
 8004e54:	f000 fabe 	bl	80053d4 <memcpy>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	6126      	str	r6, [r4, #16]
 8004e66:	6165      	str	r5, [r4, #20]
 8004e68:	444e      	add	r6, r9
 8004e6a:	eba5 0509 	sub.w	r5, r5, r9
 8004e6e:	6026      	str	r6, [r4, #0]
 8004e70:	60a5      	str	r5, [r4, #8]
 8004e72:	463e      	mov	r6, r7
 8004e74:	42be      	cmp	r6, r7
 8004e76:	d900      	bls.n	8004e7a <__ssputs_r+0x86>
 8004e78:	463e      	mov	r6, r7
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	4641      	mov	r1, r8
 8004e80:	f000 fab6 	bl	80053f0 <memmove>
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	1b9b      	subs	r3, r3, r6
 8004e88:	60a3      	str	r3, [r4, #8]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4433      	add	r3, r6
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	2000      	movs	r0, #0
 8004e92:	e7db      	b.n	8004e4c <__ssputs_r+0x58>
 8004e94:	462a      	mov	r2, r5
 8004e96:	f000 fba5 	bl	80055e4 <_realloc_r>
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1e1      	bne.n	8004e64 <__ssputs_r+0x70>
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	4650      	mov	r0, sl
 8004ea4:	f000 fabe 	bl	8005424 <_free_r>
 8004ea8:	e7c7      	b.n	8004e3a <__ssputs_r+0x46>
	...

08004eac <_svfiprintf_r>:
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	898b      	ldrh	r3, [r1, #12]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	b09d      	sub	sp, #116	; 0x74
 8004eb8:	4607      	mov	r7, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	d50e      	bpl.n	8004ede <_svfiprintf_r+0x32>
 8004ec0:	690b      	ldr	r3, [r1, #16]
 8004ec2:	b963      	cbnz	r3, 8004ede <_svfiprintf_r+0x32>
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	f000 fb19 	bl	80054fc <_malloc_r>
 8004eca:	6028      	str	r0, [r5, #0]
 8004ecc:	6128      	str	r0, [r5, #16]
 8004ece:	b920      	cbnz	r0, 8004eda <_svfiprintf_r+0x2e>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed8:	e0d1      	b.n	800507e <_svfiprintf_r+0x1d2>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	616b      	str	r3, [r5, #20]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eec:	2330      	movs	r3, #48	; 0x30
 8004eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005098 <_svfiprintf_r+0x1ec>
 8004ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef6:	f04f 0901 	mov.w	r9, #1
 8004efa:	4623      	mov	r3, r4
 8004efc:	469a      	mov	sl, r3
 8004efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f02:	b10a      	cbz	r2, 8004f08 <_svfiprintf_r+0x5c>
 8004f04:	2a25      	cmp	r2, #37	; 0x25
 8004f06:	d1f9      	bne.n	8004efc <_svfiprintf_r+0x50>
 8004f08:	ebba 0b04 	subs.w	fp, sl, r4
 8004f0c:	d00b      	beq.n	8004f26 <_svfiprintf_r+0x7a>
 8004f0e:	465b      	mov	r3, fp
 8004f10:	4622      	mov	r2, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	4638      	mov	r0, r7
 8004f16:	f7ff ff6d 	bl	8004df4 <__ssputs_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f000 80aa 	beq.w	8005074 <_svfiprintf_r+0x1c8>
 8004f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f22:	445a      	add	r2, fp
 8004f24:	9209      	str	r2, [sp, #36]	; 0x24
 8004f26:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a2 	beq.w	8005074 <_svfiprintf_r+0x1c8>
 8004f30:	2300      	movs	r3, #0
 8004f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f3a:	f10a 0a01 	add.w	sl, sl, #1
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	9307      	str	r3, [sp, #28]
 8004f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f46:	931a      	str	r3, [sp, #104]	; 0x68
 8004f48:	4654      	mov	r4, sl
 8004f4a:	2205      	movs	r2, #5
 8004f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f50:	4851      	ldr	r0, [pc, #324]	; (8005098 <_svfiprintf_r+0x1ec>)
 8004f52:	f7fb f96d 	bl	8000230 <memchr>
 8004f56:	9a04      	ldr	r2, [sp, #16]
 8004f58:	b9d8      	cbnz	r0, 8004f92 <_svfiprintf_r+0xe6>
 8004f5a:	06d0      	lsls	r0, r2, #27
 8004f5c:	bf44      	itt	mi
 8004f5e:	2320      	movmi	r3, #32
 8004f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f64:	0711      	lsls	r1, r2, #28
 8004f66:	bf44      	itt	mi
 8004f68:	232b      	movmi	r3, #43	; 0x2b
 8004f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f72:	2b2a      	cmp	r3, #42	; 0x2a
 8004f74:	d015      	beq.n	8004fa2 <_svfiprintf_r+0xf6>
 8004f76:	9a07      	ldr	r2, [sp, #28]
 8004f78:	4654      	mov	r4, sl
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f04f 0c0a 	mov.w	ip, #10
 8004f80:	4621      	mov	r1, r4
 8004f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f86:	3b30      	subs	r3, #48	; 0x30
 8004f88:	2b09      	cmp	r3, #9
 8004f8a:	d94e      	bls.n	800502a <_svfiprintf_r+0x17e>
 8004f8c:	b1b0      	cbz	r0, 8004fbc <_svfiprintf_r+0x110>
 8004f8e:	9207      	str	r2, [sp, #28]
 8004f90:	e014      	b.n	8004fbc <_svfiprintf_r+0x110>
 8004f92:	eba0 0308 	sub.w	r3, r0, r8
 8004f96:	fa09 f303 	lsl.w	r3, r9, r3
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	46a2      	mov	sl, r4
 8004fa0:	e7d2      	b.n	8004f48 <_svfiprintf_r+0x9c>
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	1d19      	adds	r1, r3, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	9103      	str	r1, [sp, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfbb      	ittet	lt
 8004fae:	425b      	neglt	r3, r3
 8004fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb4:	9307      	strge	r3, [sp, #28]
 8004fb6:	9307      	strlt	r3, [sp, #28]
 8004fb8:	bfb8      	it	lt
 8004fba:	9204      	strlt	r2, [sp, #16]
 8004fbc:	7823      	ldrb	r3, [r4, #0]
 8004fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc0:	d10c      	bne.n	8004fdc <_svfiprintf_r+0x130>
 8004fc2:	7863      	ldrb	r3, [r4, #1]
 8004fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc6:	d135      	bne.n	8005034 <_svfiprintf_r+0x188>
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	9203      	str	r2, [sp, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bfb8      	it	lt
 8004fd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fd8:	3402      	adds	r4, #2
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050a8 <_svfiprintf_r+0x1fc>
 8004fe0:	7821      	ldrb	r1, [r4, #0]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	f7fb f923 	bl	8000230 <memchr>
 8004fea:	b140      	cbz	r0, 8004ffe <_svfiprintf_r+0x152>
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	eba0 000a 	sub.w	r0, r0, sl
 8004ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ff6:	9b04      	ldr	r3, [sp, #16]
 8004ff8:	4303      	orrs	r3, r0
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005002:	4826      	ldr	r0, [pc, #152]	; (800509c <_svfiprintf_r+0x1f0>)
 8005004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005008:	2206      	movs	r2, #6
 800500a:	f7fb f911 	bl	8000230 <memchr>
 800500e:	2800      	cmp	r0, #0
 8005010:	d038      	beq.n	8005084 <_svfiprintf_r+0x1d8>
 8005012:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <_svfiprintf_r+0x1f4>)
 8005014:	bb1b      	cbnz	r3, 800505e <_svfiprintf_r+0x1b2>
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	3307      	adds	r3, #7
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	3308      	adds	r3, #8
 8005020:	9303      	str	r3, [sp, #12]
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	4433      	add	r3, r6
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	e767      	b.n	8004efa <_svfiprintf_r+0x4e>
 800502a:	fb0c 3202 	mla	r2, ip, r2, r3
 800502e:	460c      	mov	r4, r1
 8005030:	2001      	movs	r0, #1
 8005032:	e7a5      	b.n	8004f80 <_svfiprintf_r+0xd4>
 8005034:	2300      	movs	r3, #0
 8005036:	3401      	adds	r4, #1
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	4619      	mov	r1, r3
 800503c:	f04f 0c0a 	mov.w	ip, #10
 8005040:	4620      	mov	r0, r4
 8005042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005046:	3a30      	subs	r2, #48	; 0x30
 8005048:	2a09      	cmp	r2, #9
 800504a:	d903      	bls.n	8005054 <_svfiprintf_r+0x1a8>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0c5      	beq.n	8004fdc <_svfiprintf_r+0x130>
 8005050:	9105      	str	r1, [sp, #20]
 8005052:	e7c3      	b.n	8004fdc <_svfiprintf_r+0x130>
 8005054:	fb0c 2101 	mla	r1, ip, r1, r2
 8005058:	4604      	mov	r4, r0
 800505a:	2301      	movs	r3, #1
 800505c:	e7f0      	b.n	8005040 <_svfiprintf_r+0x194>
 800505e:	ab03      	add	r3, sp, #12
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	462a      	mov	r2, r5
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <_svfiprintf_r+0x1f8>)
 8005066:	a904      	add	r1, sp, #16
 8005068:	4638      	mov	r0, r7
 800506a:	f3af 8000 	nop.w
 800506e:	1c42      	adds	r2, r0, #1
 8005070:	4606      	mov	r6, r0
 8005072:	d1d6      	bne.n	8005022 <_svfiprintf_r+0x176>
 8005074:	89ab      	ldrh	r3, [r5, #12]
 8005076:	065b      	lsls	r3, r3, #25
 8005078:	f53f af2c 	bmi.w	8004ed4 <_svfiprintf_r+0x28>
 800507c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800507e:	b01d      	add	sp, #116	; 0x74
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	ab03      	add	r3, sp, #12
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	462a      	mov	r2, r5
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <_svfiprintf_r+0x1f8>)
 800508c:	a904      	add	r1, sp, #16
 800508e:	4638      	mov	r0, r7
 8005090:	f000 f87a 	bl	8005188 <_printf_i>
 8005094:	e7eb      	b.n	800506e <_svfiprintf_r+0x1c2>
 8005096:	bf00      	nop
 8005098:	08005770 	.word	0x08005770
 800509c:	0800577a 	.word	0x0800577a
 80050a0:	00000000 	.word	0x00000000
 80050a4:	08004df5 	.word	0x08004df5
 80050a8:	08005776 	.word	0x08005776

080050ac <_printf_common>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	4616      	mov	r6, r2
 80050b2:	4699      	mov	r9, r3
 80050b4:	688a      	ldr	r2, [r1, #8]
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050bc:	4293      	cmp	r3, r2
 80050be:	bfb8      	it	lt
 80050c0:	4613      	movlt	r3, r2
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c8:	4607      	mov	r7, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b10a      	cbz	r2, 80050d2 <_printf_common+0x26>
 80050ce:	3301      	adds	r3, #1
 80050d0:	6033      	str	r3, [r6, #0]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	0699      	lsls	r1, r3, #26
 80050d6:	bf42      	ittt	mi
 80050d8:	6833      	ldrmi	r3, [r6, #0]
 80050da:	3302      	addmi	r3, #2
 80050dc:	6033      	strmi	r3, [r6, #0]
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	f015 0506 	ands.w	r5, r5, #6
 80050e4:	d106      	bne.n	80050f4 <_printf_common+0x48>
 80050e6:	f104 0a19 	add.w	sl, r4, #25
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	6832      	ldr	r2, [r6, #0]
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	dc26      	bgt.n	8005142 <_printf_common+0x96>
 80050f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f8:	1e13      	subs	r3, r2, #0
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	bf18      	it	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	0692      	lsls	r2, r2, #26
 8005102:	d42b      	bmi.n	800515c <_printf_common+0xb0>
 8005104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d01e      	beq.n	8005150 <_printf_common+0xa4>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	68e5      	ldr	r5, [r4, #12]
 8005116:	6832      	ldr	r2, [r6, #0]
 8005118:	f003 0306 	and.w	r3, r3, #6
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf08      	it	eq
 8005120:	1aad      	subeq	r5, r5, r2
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	bf0c      	ite	eq
 8005128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800512c:	2500      	movne	r5, #0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfc4      	itt	gt
 8005132:	1a9b      	subgt	r3, r3, r2
 8005134:	18ed      	addgt	r5, r5, r3
 8005136:	2600      	movs	r6, #0
 8005138:	341a      	adds	r4, #26
 800513a:	42b5      	cmp	r5, r6
 800513c:	d11a      	bne.n	8005174 <_printf_common+0xc8>
 800513e:	2000      	movs	r0, #0
 8005140:	e008      	b.n	8005154 <_printf_common+0xa8>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4649      	mov	r1, r9
 8005148:	4638      	mov	r0, r7
 800514a:	47c0      	blx	r8
 800514c:	3001      	adds	r0, #1
 800514e:	d103      	bne.n	8005158 <_printf_common+0xac>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	3501      	adds	r5, #1
 800515a:	e7c6      	b.n	80050ea <_printf_common+0x3e>
 800515c:	18e1      	adds	r1, r4, r3
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	2030      	movs	r0, #48	; 0x30
 8005162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005166:	4422      	add	r2, r4
 8005168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005170:	3302      	adds	r3, #2
 8005172:	e7c7      	b.n	8005104 <_printf_common+0x58>
 8005174:	2301      	movs	r3, #1
 8005176:	4622      	mov	r2, r4
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0e6      	beq.n	8005150 <_printf_common+0xa4>
 8005182:	3601      	adds	r6, #1
 8005184:	e7d9      	b.n	800513a <_printf_common+0x8e>
	...

08005188 <_printf_i>:
 8005188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	7e0f      	ldrb	r7, [r1, #24]
 800518e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005190:	2f78      	cmp	r7, #120	; 0x78
 8005192:	4691      	mov	r9, r2
 8005194:	4680      	mov	r8, r0
 8005196:	460c      	mov	r4, r1
 8005198:	469a      	mov	sl, r3
 800519a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800519e:	d807      	bhi.n	80051b0 <_printf_i+0x28>
 80051a0:	2f62      	cmp	r7, #98	; 0x62
 80051a2:	d80a      	bhi.n	80051ba <_printf_i+0x32>
 80051a4:	2f00      	cmp	r7, #0
 80051a6:	f000 80d8 	beq.w	800535a <_printf_i+0x1d2>
 80051aa:	2f58      	cmp	r7, #88	; 0x58
 80051ac:	f000 80a3 	beq.w	80052f6 <_printf_i+0x16e>
 80051b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b8:	e03a      	b.n	8005230 <_printf_i+0xa8>
 80051ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051be:	2b15      	cmp	r3, #21
 80051c0:	d8f6      	bhi.n	80051b0 <_printf_i+0x28>
 80051c2:	a101      	add	r1, pc, #4	; (adr r1, 80051c8 <_printf_i+0x40>)
 80051c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005235 	.word	0x08005235
 80051d0:	080051b1 	.word	0x080051b1
 80051d4:	080051b1 	.word	0x080051b1
 80051d8:	080051b1 	.word	0x080051b1
 80051dc:	080051b1 	.word	0x080051b1
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080051b1 	.word	0x080051b1
 80051e8:	080051b1 	.word	0x080051b1
 80051ec:	080051b1 	.word	0x080051b1
 80051f0:	080051b1 	.word	0x080051b1
 80051f4:	08005341 	.word	0x08005341
 80051f8:	08005265 	.word	0x08005265
 80051fc:	08005323 	.word	0x08005323
 8005200:	080051b1 	.word	0x080051b1
 8005204:	080051b1 	.word	0x080051b1
 8005208:	08005363 	.word	0x08005363
 800520c:	080051b1 	.word	0x080051b1
 8005210:	08005265 	.word	0x08005265
 8005214:	080051b1 	.word	0x080051b1
 8005218:	080051b1 	.word	0x080051b1
 800521c:	0800532b 	.word	0x0800532b
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	602a      	str	r2, [r5, #0]
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005230:	2301      	movs	r3, #1
 8005232:	e0a3      	b.n	800537c <_printf_i+0x1f4>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	6829      	ldr	r1, [r5, #0]
 8005238:	0606      	lsls	r6, r0, #24
 800523a:	f101 0304 	add.w	r3, r1, #4
 800523e:	d50a      	bpl.n	8005256 <_printf_i+0xce>
 8005240:	680e      	ldr	r6, [r1, #0]
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	2e00      	cmp	r6, #0
 8005246:	da03      	bge.n	8005250 <_printf_i+0xc8>
 8005248:	232d      	movs	r3, #45	; 0x2d
 800524a:	4276      	negs	r6, r6
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	485e      	ldr	r0, [pc, #376]	; (80053cc <_printf_i+0x244>)
 8005252:	230a      	movs	r3, #10
 8005254:	e019      	b.n	800528a <_printf_i+0x102>
 8005256:	680e      	ldr	r6, [r1, #0]
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800525e:	bf18      	it	ne
 8005260:	b236      	sxthne	r6, r6
 8005262:	e7ef      	b.n	8005244 <_printf_i+0xbc>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	1d19      	adds	r1, r3, #4
 800526a:	6029      	str	r1, [r5, #0]
 800526c:	0601      	lsls	r1, r0, #24
 800526e:	d501      	bpl.n	8005274 <_printf_i+0xec>
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	e002      	b.n	800527a <_printf_i+0xf2>
 8005274:	0646      	lsls	r6, r0, #25
 8005276:	d5fb      	bpl.n	8005270 <_printf_i+0xe8>
 8005278:	881e      	ldrh	r6, [r3, #0]
 800527a:	4854      	ldr	r0, [pc, #336]	; (80053cc <_printf_i+0x244>)
 800527c:	2f6f      	cmp	r7, #111	; 0x6f
 800527e:	bf0c      	ite	eq
 8005280:	2308      	moveq	r3, #8
 8005282:	230a      	movne	r3, #10
 8005284:	2100      	movs	r1, #0
 8005286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800528a:	6865      	ldr	r5, [r4, #4]
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	2d00      	cmp	r5, #0
 8005290:	bfa2      	ittt	ge
 8005292:	6821      	ldrge	r1, [r4, #0]
 8005294:	f021 0104 	bicge.w	r1, r1, #4
 8005298:	6021      	strge	r1, [r4, #0]
 800529a:	b90e      	cbnz	r6, 80052a0 <_printf_i+0x118>
 800529c:	2d00      	cmp	r5, #0
 800529e:	d04d      	beq.n	800533c <_printf_i+0x1b4>
 80052a0:	4615      	mov	r5, r2
 80052a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052a6:	fb03 6711 	mls	r7, r3, r1, r6
 80052aa:	5dc7      	ldrb	r7, [r0, r7]
 80052ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052b0:	4637      	mov	r7, r6
 80052b2:	42bb      	cmp	r3, r7
 80052b4:	460e      	mov	r6, r1
 80052b6:	d9f4      	bls.n	80052a2 <_printf_i+0x11a>
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d10b      	bne.n	80052d4 <_printf_i+0x14c>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	07de      	lsls	r6, r3, #31
 80052c0:	d508      	bpl.n	80052d4 <_printf_i+0x14c>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	6861      	ldr	r1, [r4, #4]
 80052c6:	4299      	cmp	r1, r3
 80052c8:	bfde      	ittt	le
 80052ca:	2330      	movle	r3, #48	; 0x30
 80052cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052d4:	1b52      	subs	r2, r2, r5
 80052d6:	6122      	str	r2, [r4, #16]
 80052d8:	f8cd a000 	str.w	sl, [sp]
 80052dc:	464b      	mov	r3, r9
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff fee2 	bl	80050ac <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14c      	bne.n	8005386 <_printf_i+0x1fe>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f0:	b004      	add	sp, #16
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	4835      	ldr	r0, [pc, #212]	; (80053cc <_printf_i+0x244>)
 80052f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052fc:	6829      	ldr	r1, [r5, #0]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f851 6b04 	ldr.w	r6, [r1], #4
 8005304:	6029      	str	r1, [r5, #0]
 8005306:	061d      	lsls	r5, r3, #24
 8005308:	d514      	bpl.n	8005334 <_printf_i+0x1ac>
 800530a:	07df      	lsls	r7, r3, #31
 800530c:	bf44      	itt	mi
 800530e:	f043 0320 	orrmi.w	r3, r3, #32
 8005312:	6023      	strmi	r3, [r4, #0]
 8005314:	b91e      	cbnz	r6, 800531e <_printf_i+0x196>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f023 0320 	bic.w	r3, r3, #32
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	2310      	movs	r3, #16
 8005320:	e7b0      	b.n	8005284 <_printf_i+0xfc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f043 0320 	orr.w	r3, r3, #32
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	2378      	movs	r3, #120	; 0x78
 800532c:	4828      	ldr	r0, [pc, #160]	; (80053d0 <_printf_i+0x248>)
 800532e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005332:	e7e3      	b.n	80052fc <_printf_i+0x174>
 8005334:	0659      	lsls	r1, r3, #25
 8005336:	bf48      	it	mi
 8005338:	b2b6      	uxthmi	r6, r6
 800533a:	e7e6      	b.n	800530a <_printf_i+0x182>
 800533c:	4615      	mov	r5, r2
 800533e:	e7bb      	b.n	80052b8 <_printf_i+0x130>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	6826      	ldr	r6, [r4, #0]
 8005344:	6961      	ldr	r1, [r4, #20]
 8005346:	1d18      	adds	r0, r3, #4
 8005348:	6028      	str	r0, [r5, #0]
 800534a:	0635      	lsls	r5, r6, #24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	d501      	bpl.n	8005354 <_printf_i+0x1cc>
 8005350:	6019      	str	r1, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0x1d2>
 8005354:	0670      	lsls	r0, r6, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0x1c8>
 8005358:	8019      	strh	r1, [r3, #0]
 800535a:	2300      	movs	r3, #0
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	4615      	mov	r5, r2
 8005360:	e7ba      	b.n	80052d8 <_printf_i+0x150>
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	602a      	str	r2, [r5, #0]
 8005368:	681d      	ldr	r5, [r3, #0]
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	2100      	movs	r1, #0
 800536e:	4628      	mov	r0, r5
 8005370:	f7fa ff5e 	bl	8000230 <memchr>
 8005374:	b108      	cbz	r0, 800537a <_printf_i+0x1f2>
 8005376:	1b40      	subs	r0, r0, r5
 8005378:	6060      	str	r0, [r4, #4]
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	2300      	movs	r3, #0
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005384:	e7a8      	b.n	80052d8 <_printf_i+0x150>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	462a      	mov	r2, r5
 800538a:	4649      	mov	r1, r9
 800538c:	4640      	mov	r0, r8
 800538e:	47d0      	blx	sl
 8005390:	3001      	adds	r0, #1
 8005392:	d0ab      	beq.n	80052ec <_printf_i+0x164>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	079b      	lsls	r3, r3, #30
 8005398:	d413      	bmi.n	80053c2 <_printf_i+0x23a>
 800539a:	68e0      	ldr	r0, [r4, #12]
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	4298      	cmp	r0, r3
 80053a0:	bfb8      	it	lt
 80053a2:	4618      	movlt	r0, r3
 80053a4:	e7a4      	b.n	80052f0 <_printf_i+0x168>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4632      	mov	r2, r6
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	47d0      	blx	sl
 80053b0:	3001      	adds	r0, #1
 80053b2:	d09b      	beq.n	80052ec <_printf_i+0x164>
 80053b4:	3501      	adds	r5, #1
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	9903      	ldr	r1, [sp, #12]
 80053ba:	1a5b      	subs	r3, r3, r1
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dcf2      	bgt.n	80053a6 <_printf_i+0x21e>
 80053c0:	e7eb      	b.n	800539a <_printf_i+0x212>
 80053c2:	2500      	movs	r5, #0
 80053c4:	f104 0619 	add.w	r6, r4, #25
 80053c8:	e7f5      	b.n	80053b6 <_printf_i+0x22e>
 80053ca:	bf00      	nop
 80053cc:	08005781 	.word	0x08005781
 80053d0:	08005792 	.word	0x08005792

080053d4 <memcpy>:
 80053d4:	440a      	add	r2, r1
 80053d6:	4291      	cmp	r1, r2
 80053d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053dc:	d100      	bne.n	80053e0 <memcpy+0xc>
 80053de:	4770      	bx	lr
 80053e0:	b510      	push	{r4, lr}
 80053e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ea:	4291      	cmp	r1, r2
 80053ec:	d1f9      	bne.n	80053e2 <memcpy+0xe>
 80053ee:	bd10      	pop	{r4, pc}

080053f0 <memmove>:
 80053f0:	4288      	cmp	r0, r1
 80053f2:	b510      	push	{r4, lr}
 80053f4:	eb01 0402 	add.w	r4, r1, r2
 80053f8:	d902      	bls.n	8005400 <memmove+0x10>
 80053fa:	4284      	cmp	r4, r0
 80053fc:	4623      	mov	r3, r4
 80053fe:	d807      	bhi.n	8005410 <memmove+0x20>
 8005400:	1e43      	subs	r3, r0, #1
 8005402:	42a1      	cmp	r1, r4
 8005404:	d008      	beq.n	8005418 <memmove+0x28>
 8005406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800540a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800540e:	e7f8      	b.n	8005402 <memmove+0x12>
 8005410:	4402      	add	r2, r0
 8005412:	4601      	mov	r1, r0
 8005414:	428a      	cmp	r2, r1
 8005416:	d100      	bne.n	800541a <memmove+0x2a>
 8005418:	bd10      	pop	{r4, pc}
 800541a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800541e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005422:	e7f7      	b.n	8005414 <memmove+0x24>

08005424 <_free_r>:
 8005424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005426:	2900      	cmp	r1, #0
 8005428:	d044      	beq.n	80054b4 <_free_r+0x90>
 800542a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542e:	9001      	str	r0, [sp, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f1a1 0404 	sub.w	r4, r1, #4
 8005436:	bfb8      	it	lt
 8005438:	18e4      	addlt	r4, r4, r3
 800543a:	f000 f913 	bl	8005664 <__malloc_lock>
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <_free_r+0x94>)
 8005440:	9801      	ldr	r0, [sp, #4]
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	b933      	cbnz	r3, 8005454 <_free_r+0x30>
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6014      	str	r4, [r2, #0]
 800544a:	b003      	add	sp, #12
 800544c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005450:	f000 b90e 	b.w	8005670 <__malloc_unlock>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d908      	bls.n	800546a <_free_r+0x46>
 8005458:	6825      	ldr	r5, [r4, #0]
 800545a:	1961      	adds	r1, r4, r5
 800545c:	428b      	cmp	r3, r1
 800545e:	bf01      	itttt	eq
 8005460:	6819      	ldreq	r1, [r3, #0]
 8005462:	685b      	ldreq	r3, [r3, #4]
 8005464:	1949      	addeq	r1, r1, r5
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	e7ed      	b.n	8005446 <_free_r+0x22>
 800546a:	461a      	mov	r2, r3
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b10b      	cbz	r3, 8005474 <_free_r+0x50>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d9fa      	bls.n	800546a <_free_r+0x46>
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	1855      	adds	r5, r2, r1
 8005478:	42a5      	cmp	r5, r4
 800547a:	d10b      	bne.n	8005494 <_free_r+0x70>
 800547c:	6824      	ldr	r4, [r4, #0]
 800547e:	4421      	add	r1, r4
 8005480:	1854      	adds	r4, r2, r1
 8005482:	42a3      	cmp	r3, r4
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	d1e0      	bne.n	800544a <_free_r+0x26>
 8005488:	681c      	ldr	r4, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6053      	str	r3, [r2, #4]
 800548e:	4421      	add	r1, r4
 8005490:	6011      	str	r1, [r2, #0]
 8005492:	e7da      	b.n	800544a <_free_r+0x26>
 8005494:	d902      	bls.n	800549c <_free_r+0x78>
 8005496:	230c      	movs	r3, #12
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	e7d6      	b.n	800544a <_free_r+0x26>
 800549c:	6825      	ldr	r5, [r4, #0]
 800549e:	1961      	adds	r1, r4, r5
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf04      	itt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	bf04      	itt	eq
 80054ac:	1949      	addeq	r1, r1, r5
 80054ae:	6021      	streq	r1, [r4, #0]
 80054b0:	6054      	str	r4, [r2, #4]
 80054b2:	e7ca      	b.n	800544a <_free_r+0x26>
 80054b4:	b003      	add	sp, #12
 80054b6:	bd30      	pop	{r4, r5, pc}
 80054b8:	200001e0 	.word	0x200001e0

080054bc <sbrk_aligned>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4e0e      	ldr	r6, [pc, #56]	; (80054f8 <sbrk_aligned+0x3c>)
 80054c0:	460c      	mov	r4, r1
 80054c2:	6831      	ldr	r1, [r6, #0]
 80054c4:	4605      	mov	r5, r0
 80054c6:	b911      	cbnz	r1, 80054ce <sbrk_aligned+0x12>
 80054c8:	f000 f8bc 	bl	8005644 <_sbrk_r>
 80054cc:	6030      	str	r0, [r6, #0]
 80054ce:	4621      	mov	r1, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 f8b7 	bl	8005644 <_sbrk_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d00a      	beq.n	80054f0 <sbrk_aligned+0x34>
 80054da:	1cc4      	adds	r4, r0, #3
 80054dc:	f024 0403 	bic.w	r4, r4, #3
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d007      	beq.n	80054f4 <sbrk_aligned+0x38>
 80054e4:	1a21      	subs	r1, r4, r0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 f8ac 	bl	8005644 <_sbrk_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d101      	bne.n	80054f4 <sbrk_aligned+0x38>
 80054f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80054f4:	4620      	mov	r0, r4
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	200001e4 	.word	0x200001e4

080054fc <_malloc_r>:
 80054fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005500:	1ccd      	adds	r5, r1, #3
 8005502:	f025 0503 	bic.w	r5, r5, #3
 8005506:	3508      	adds	r5, #8
 8005508:	2d0c      	cmp	r5, #12
 800550a:	bf38      	it	cc
 800550c:	250c      	movcc	r5, #12
 800550e:	2d00      	cmp	r5, #0
 8005510:	4607      	mov	r7, r0
 8005512:	db01      	blt.n	8005518 <_malloc_r+0x1c>
 8005514:	42a9      	cmp	r1, r5
 8005516:	d905      	bls.n	8005524 <_malloc_r+0x28>
 8005518:	230c      	movs	r3, #12
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	2600      	movs	r6, #0
 800551e:	4630      	mov	r0, r6
 8005520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005524:	4e2e      	ldr	r6, [pc, #184]	; (80055e0 <_malloc_r+0xe4>)
 8005526:	f000 f89d 	bl	8005664 <__malloc_lock>
 800552a:	6833      	ldr	r3, [r6, #0]
 800552c:	461c      	mov	r4, r3
 800552e:	bb34      	cbnz	r4, 800557e <_malloc_r+0x82>
 8005530:	4629      	mov	r1, r5
 8005532:	4638      	mov	r0, r7
 8005534:	f7ff ffc2 	bl	80054bc <sbrk_aligned>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	4604      	mov	r4, r0
 800553c:	d14d      	bne.n	80055da <_malloc_r+0xde>
 800553e:	6834      	ldr	r4, [r6, #0]
 8005540:	4626      	mov	r6, r4
 8005542:	2e00      	cmp	r6, #0
 8005544:	d140      	bne.n	80055c8 <_malloc_r+0xcc>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	4631      	mov	r1, r6
 800554a:	4638      	mov	r0, r7
 800554c:	eb04 0803 	add.w	r8, r4, r3
 8005550:	f000 f878 	bl	8005644 <_sbrk_r>
 8005554:	4580      	cmp	r8, r0
 8005556:	d13a      	bne.n	80055ce <_malloc_r+0xd2>
 8005558:	6821      	ldr	r1, [r4, #0]
 800555a:	3503      	adds	r5, #3
 800555c:	1a6d      	subs	r5, r5, r1
 800555e:	f025 0503 	bic.w	r5, r5, #3
 8005562:	3508      	adds	r5, #8
 8005564:	2d0c      	cmp	r5, #12
 8005566:	bf38      	it	cc
 8005568:	250c      	movcc	r5, #12
 800556a:	4629      	mov	r1, r5
 800556c:	4638      	mov	r0, r7
 800556e:	f7ff ffa5 	bl	80054bc <sbrk_aligned>
 8005572:	3001      	adds	r0, #1
 8005574:	d02b      	beq.n	80055ce <_malloc_r+0xd2>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	442b      	add	r3, r5
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	e00e      	b.n	800559c <_malloc_r+0xa0>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	1b52      	subs	r2, r2, r5
 8005582:	d41e      	bmi.n	80055c2 <_malloc_r+0xc6>
 8005584:	2a0b      	cmp	r2, #11
 8005586:	d916      	bls.n	80055b6 <_malloc_r+0xba>
 8005588:	1961      	adds	r1, r4, r5
 800558a:	42a3      	cmp	r3, r4
 800558c:	6025      	str	r5, [r4, #0]
 800558e:	bf18      	it	ne
 8005590:	6059      	strne	r1, [r3, #4]
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	bf08      	it	eq
 8005596:	6031      	streq	r1, [r6, #0]
 8005598:	5162      	str	r2, [r4, r5]
 800559a:	604b      	str	r3, [r1, #4]
 800559c:	4638      	mov	r0, r7
 800559e:	f104 060b 	add.w	r6, r4, #11
 80055a2:	f000 f865 	bl	8005670 <__malloc_unlock>
 80055a6:	f026 0607 	bic.w	r6, r6, #7
 80055aa:	1d23      	adds	r3, r4, #4
 80055ac:	1af2      	subs	r2, r6, r3
 80055ae:	d0b6      	beq.n	800551e <_malloc_r+0x22>
 80055b0:	1b9b      	subs	r3, r3, r6
 80055b2:	50a3      	str	r3, [r4, r2]
 80055b4:	e7b3      	b.n	800551e <_malloc_r+0x22>
 80055b6:	6862      	ldr	r2, [r4, #4]
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	bf0c      	ite	eq
 80055bc:	6032      	streq	r2, [r6, #0]
 80055be:	605a      	strne	r2, [r3, #4]
 80055c0:	e7ec      	b.n	800559c <_malloc_r+0xa0>
 80055c2:	4623      	mov	r3, r4
 80055c4:	6864      	ldr	r4, [r4, #4]
 80055c6:	e7b2      	b.n	800552e <_malloc_r+0x32>
 80055c8:	4634      	mov	r4, r6
 80055ca:	6876      	ldr	r6, [r6, #4]
 80055cc:	e7b9      	b.n	8005542 <_malloc_r+0x46>
 80055ce:	230c      	movs	r3, #12
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	4638      	mov	r0, r7
 80055d4:	f000 f84c 	bl	8005670 <__malloc_unlock>
 80055d8:	e7a1      	b.n	800551e <_malloc_r+0x22>
 80055da:	6025      	str	r5, [r4, #0]
 80055dc:	e7de      	b.n	800559c <_malloc_r+0xa0>
 80055de:	bf00      	nop
 80055e0:	200001e0 	.word	0x200001e0

080055e4 <_realloc_r>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	4680      	mov	r8, r0
 80055ea:	4614      	mov	r4, r2
 80055ec:	460e      	mov	r6, r1
 80055ee:	b921      	cbnz	r1, 80055fa <_realloc_r+0x16>
 80055f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	4611      	mov	r1, r2
 80055f6:	f7ff bf81 	b.w	80054fc <_malloc_r>
 80055fa:	b92a      	cbnz	r2, 8005608 <_realloc_r+0x24>
 80055fc:	f7ff ff12 	bl	8005424 <_free_r>
 8005600:	4625      	mov	r5, r4
 8005602:	4628      	mov	r0, r5
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005608:	f000 f838 	bl	800567c <_malloc_usable_size_r>
 800560c:	4284      	cmp	r4, r0
 800560e:	4607      	mov	r7, r0
 8005610:	d802      	bhi.n	8005618 <_realloc_r+0x34>
 8005612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005616:	d812      	bhi.n	800563e <_realloc_r+0x5a>
 8005618:	4621      	mov	r1, r4
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff ff6e 	bl	80054fc <_malloc_r>
 8005620:	4605      	mov	r5, r0
 8005622:	2800      	cmp	r0, #0
 8005624:	d0ed      	beq.n	8005602 <_realloc_r+0x1e>
 8005626:	42bc      	cmp	r4, r7
 8005628:	4622      	mov	r2, r4
 800562a:	4631      	mov	r1, r6
 800562c:	bf28      	it	cs
 800562e:	463a      	movcs	r2, r7
 8005630:	f7ff fed0 	bl	80053d4 <memcpy>
 8005634:	4631      	mov	r1, r6
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fef4 	bl	8005424 <_free_r>
 800563c:	e7e1      	b.n	8005602 <_realloc_r+0x1e>
 800563e:	4635      	mov	r5, r6
 8005640:	e7df      	b.n	8005602 <_realloc_r+0x1e>
	...

08005644 <_sbrk_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d06      	ldr	r5, [pc, #24]	; (8005660 <_sbrk_r+0x1c>)
 8005648:	2300      	movs	r3, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fb fbbe 	bl	8000dd0 <_sbrk>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_sbrk_r+0x1a>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_sbrk_r+0x1a>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	200001e8 	.word	0x200001e8

08005664 <__malloc_lock>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__malloc_lock+0x8>)
 8005666:	f000 b811 	b.w	800568c <__retarget_lock_acquire_recursive>
 800566a:	bf00      	nop
 800566c:	200001ec 	.word	0x200001ec

08005670 <__malloc_unlock>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__malloc_unlock+0x8>)
 8005672:	f000 b80c 	b.w	800568e <__retarget_lock_release_recursive>
 8005676:	bf00      	nop
 8005678:	200001ec 	.word	0x200001ec

0800567c <_malloc_usable_size_r>:
 800567c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005680:	1f18      	subs	r0, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfbc      	itt	lt
 8005686:	580b      	ldrlt	r3, [r1, r0]
 8005688:	18c0      	addlt	r0, r0, r3
 800568a:	4770      	bx	lr

0800568c <__retarget_lock_acquire_recursive>:
 800568c:	4770      	bx	lr

0800568e <__retarget_lock_release_recursive>:
 800568e:	4770      	bx	lr

08005690 <_init>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr

0800569c <_fini>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr
