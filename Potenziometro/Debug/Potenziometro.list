
Potenziometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d60  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008f40  08008f40  00018f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d4  080093d4  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093dc  080093dc  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000258  0800963c  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800963c  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d2c  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  00037fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002922d  00000000  00000000  0003d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d19  00000000  00000000  0006647d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113b12  00000000  00000000  0007d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190ca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  00190cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f28 	.word	0x08008f28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08008f28 	.word	0x08008f28

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t MSG4[] =
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <main+0xc4>)
 8000fa4:	463c      	mov	r4, r7
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000fba:	7023      	strb	r3, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fbc:	f000 ff5b 	bl	8001e76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc0:	f000 f85c 	bl	800107c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fc4:	f000 fa1c 	bl	8001400 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000fc8:	f000 f982 	bl	80012d0 <MX_LPUART1_UART_Init>
	MX_ADC1_Init();
 8000fcc:	f000 f8a2 	bl	8001114 <MX_ADC1_Init>
	MX_TIM16_Init();
 8000fd0:	f000 f9c8 	bl	8001364 <MX_TIM16_Init>
	MX_ADC2_Init();
 8000fd4:	f000 f916 	bl	8001204 <MX_ADC2_Init>
	MX_TIM17_Init();
 8000fd8:	f000 f9ec 	bl	80013b4 <MX_TIM17_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000fdc:	4821      	ldr	r0, [pc, #132]	; (8001064 <main+0xc8>)
 8000fde:	f003 fee7 	bl	8004db0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 8000fe2:	4821      	ldr	r0, [pc, #132]	; (8001068 <main+0xcc>)
 8000fe4:	f003 fee4 	bl	8004db0 <HAL_TIM_Base_Start_IT>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Waiting state
		if (interrupt % 2 != (uint16_t) 0) {
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <main+0xd0>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d014      	beq.n	8001020 <main+0x84>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	481d      	ldr	r0, [pc, #116]	; (8001070 <main+0xd4>)
 8000ffc:	f002 fe1a 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2120      	movs	r1, #32
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <main+0xd4>)
 8001006:	f002 fe15 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&hlpuart1, MSG4, sizeof(MSG4), 1000);
 800100a:	4639      	mov	r1, r7
 800100c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001010:	223d      	movs	r2, #61	; 0x3d
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <main+0xd8>)
 8001014:	f004 fa2a 	bl	800546c <HAL_UART_Transmit>
			HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f000 ff9c 	bl	8001f58 <HAL_Delay>
		}
		// Running state
		switch (currState) {
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <main+0xdc>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d817      	bhi.n	8001058 <main+0xbc>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <main+0x94>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	08001053 	.word	0x08001053
 8001038:	0800104d 	.word	0x0800104d
 800103c:	08001047 	.word	0x08001047
		case UNKNOWN:
			unknown();
 8001040:	f000 fa62 	bl	8001508 <unknown>
			break;
 8001044:	e008      	b.n	8001058 <main+0xbc>
		case SAFESTATE:
			safestate();
 8001046:	f000 fb1f 	bl	8001688 <safestate>
			break;
 800104a:	e005      	b.n	8001058 <main+0xbc>
		case UNDERVOLTAGE:
			undervoltage();
 800104c:	f000 fb32 	bl	80016b4 <undervoltage>
			break;
 8001050:	e002      	b.n	8001058 <main+0xbc>
		case OVERVOLTAGE:
			overvoltage();
 8001052:	f000 fb45 	bl	80016e0 <overvoltage>
			break;
 8001056:	bf00      	nop
		}
		sensor();
 8001058:	f000 fb5a 	bl	8001710 <sensor>
		if (interrupt % 2 != (uint16_t) 0) {
 800105c:	e7c4      	b.n	8000fe8 <main+0x4c>
 800105e:	bf00      	nop
 8001060:	08008f40 	.word	0x08008f40
 8001064:	200003dc 	.word	0x200003dc
 8001068:	20000428 	.word	0x20000428
 800106c:	20000000 	.word	0x20000000
 8001070:	48000800 	.word	0x48000800
 8001074:	2000034c 	.word	0x2000034c
 8001078:	20000474 	.word	0x20000474

0800107c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2238      	movs	r2, #56	; 0x38
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 f862 	bl	8006154 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a2:	f002 fdf7 	bl	8003c94 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010bc:	2304      	movs	r3, #4
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 65;
 80010c0:	2341      	movs	r3, #65	; 0x41
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fe91 	bl	8003dfc <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x68>
		Error_Handler();
 80010e0:	f000 fc1a 	bl	8001918 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2303      	movs	r3, #3
 80010ea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2102      	movs	r1, #2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 f995 	bl	800442c <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x90>
		Error_Handler();
 8001108:	f000 fc06 	bl	8001918 <Error_Handler>
	}
}
 800110c:	bf00      	nop
 800110e:	3750      	adds	r7, #80	; 0x50
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2220      	movs	r2, #32
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f005 f811 	bl	8006154 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001134:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001138:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <MX_ADC1_Init+0xe8>)
 800113c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001140:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <MX_ADC1_Init+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_ADC1_Init+0xe8>)
 800115c:	2204      	movs	r2, #4
 800115e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001168:	2200      	movs	r2, #0
 800116a:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_ADC1_Init+0xe8>)
 800116e:	2201      	movs	r2, #1
 8001170:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_ADC1_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_ADC1_Init+0xe8>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800119c:	4817      	ldr	r0, [pc, #92]	; (80011fc <MX_ADC1_Init+0xe8>)
 800119e:	f001 f92d 	bl	80023fc <HAL_ADC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x98>
		Error_Handler();
 80011a8:	f000 fbb6 	bl	8001918 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_ADC1_Init+0xe8>)
 80011b8:	f002 f9a2 	bl	8003500 <HAL_ADCEx_MultiModeConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xb2>
		Error_Handler();
 80011c2:	f000 fba9 	bl	8001918 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_ADC1_Init+0xec>)
 80011c8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ca:	2306      	movs	r3, #6
 80011cc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d2:	237f      	movs	r3, #127	; 0x7f
 80011d4:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d6:	2304      	movs	r3, #4
 80011d8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_ADC1_Init+0xe8>)
 80011e4:	f001 fcc4 	bl	8002b70 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xde>
		Error_Handler();
 80011ee:	f000 fb93 	bl	8001918 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3730      	adds	r7, #48	; 0x30
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000274 	.word	0x20000274
 8001200:	08600004 	.word	0x08600004

08001204 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800120a:	463b      	mov	r3, r7
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f004 ff9f 	bl	8006154 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <MX_ADC2_Init+0xc4>)
 800121a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <MX_ADC2_Init+0xc0>)
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <MX_ADC2_Init+0xc0>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_ADC2_Init+0xc0>)
 800123e:	2204      	movs	r2, #4
 8001240:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001244:	2200      	movs	r2, #0
 8001246:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <MX_ADC2_Init+0xc0>)
 800124a:	2200      	movs	r2, #0
 800124c:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001250:	2201      	movs	r2, #1
 8001252:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_ADC2_Init+0xc0>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_ADC2_Init+0xc0>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001272:	2200      	movs	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_ADC2_Init+0xc0>)
 8001280:	f001 f8bc 	bl	80023fc <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC2_Init+0x8a>
		Error_Handler();
 800128a:	f000 fb45 	bl	8001918 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_ADC2_Init+0xc8>)
 8001290:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001292:	2306      	movs	r3, #6
 8001294:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129a:	237f      	movs	r3, #127	; 0x7f
 800129c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800129e:	2304      	movs	r3, #4
 80012a0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_ADC2_Init+0xc0>)
 80012ac:	f001 fc60 	bl	8002b70 <HAL_ADC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC2_Init+0xb6>
		Error_Handler();
 80012b6:	f000 fb2f 	bl	8001918 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002e0 	.word	0x200002e0
 80012c8:	50000100 	.word	0x50000100
 80012cc:	04300002 	.word	0x04300002

080012d0 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012d8:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 8001314:	f004 f85a 	bl	80053cc <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_LPUART1_UART_Init+0x52>
		Error_Handler();
 800131e:	f000 fafb 	bl	8001918 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8001322:	2100      	movs	r1, #0
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 8001326:	f004 fe21 	bl	8005f6c <HAL_UARTEx_SetTxFifoThreshold>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_LPUART1_UART_Init+0x64>
			!= HAL_OK) {
		Error_Handler();
 8001330:	f000 faf2 	bl	8001918 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8001334:	2100      	movs	r1, #0
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 8001338:	f004 fe56 	bl	8005fe8 <HAL_UARTEx_SetRxFifoThreshold>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_LPUART1_UART_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001342:	f000 fae9 	bl	8001918 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_LPUART1_UART_Init+0x8c>)
 8001348:	f004 fdd7 	bl	8005efa <HAL_UARTEx_DisableFifoMode>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_LPUART1_UART_Init+0x86>
		Error_Handler();
 8001352:	f000 fae1 	bl	8001918 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000034c 	.word	0x2000034c
 8001360:	40008000 	.word	0x40008000

08001364 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_TIM16_Init+0x48>)
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <MX_TIM16_Init+0x4c>)
 800136c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 64999;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_TIM16_Init+0x48>)
 8001370:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001374:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_TIM16_Init+0x48>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 349;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_TIM16_Init+0x48>)
 800137e:	f240 125d 	movw	r2, #349	; 0x15d
 8001382:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_TIM16_Init+0x48>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_TIM16_Init+0x48>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_TIM16_Init+0x48>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_TIM16_Init+0x48>)
 8001398:	f003 fcb2 	bl	8004d00 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM16_Init+0x42>
		Error_Handler();
 80013a2:	f000 fab9 	bl	8001918 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200003dc 	.word	0x200003dc
 80013b0:	40014400 	.word	0x40014400

080013b4 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <MX_TIM17_Init+0x48>)
 80013bc:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 64999;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013c0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80013c4:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 199;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013ce:	22c7      	movs	r2, #199	; 0xc7
 80013d0:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_TIM17_Init+0x44>)
 80013e6:	f003 fc8b 	bl	8004d00 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM17_Init+0x40>
		Error_Handler();
 80013f0:	f000 fa92 	bl	8001918 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000428 	.word	0x20000428
 80013fc:	40014800 	.word	0x40014800

08001400 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <MX_GPIO_Init+0x100>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a39      	ldr	r2, [pc, #228]	; (8001500 <MX_GPIO_Init+0x100>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b37      	ldr	r3, [pc, #220]	; (8001500 <MX_GPIO_Init+0x100>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <MX_GPIO_Init+0x100>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a33      	ldr	r2, [pc, #204]	; (8001500 <MX_GPIO_Init+0x100>)
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <MX_GPIO_Init+0x100>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <MX_GPIO_Init+0x100>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <MX_GPIO_Init+0x100>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_GPIO_Init+0x100>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_GPIO_Init+0x100>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a27      	ldr	r2, [pc, #156]	; (8001500 <MX_GPIO_Init+0x100>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_GPIO_Init+0x100>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f002 fbd8 	bl	8003c34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2130      	movs	r1, #48	; 0x30
 8001488:	481e      	ldr	r0, [pc, #120]	; (8001504 <MX_GPIO_Init+0x104>)
 800148a:	f002 fbd3 	bl	8003c34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800148e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001492:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001494:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001498:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4817      	ldr	r0, [pc, #92]	; (8001504 <MX_GPIO_Init+0x104>)
 80014a6:	f002 fa43 	bl	8003930 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA10 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_10;
 80014aa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80014ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f002 fa33 	bl	8003930 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80014ca:	2330      	movs	r3, #48	; 0x30
 80014cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <MX_GPIO_Init+0x104>)
 80014e2:	f002 fa25 	bl	8003930 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2028      	movs	r0, #40	; 0x28
 80014ec:	f002 f9eb 	bl	80038c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014f0:	2028      	movs	r0, #40	; 0x28
 80014f2:	f002 fa02 	bl	80038fa <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	48000800 	.word	0x48000800

08001508 <unknown>:
uint8_t MSG2[] = "Warning!: Overvoltage (Led 5 ON) \r\n";
uint8_t MSG3[] = "Warning!: Sensor value out of range \r\n";
char msg[50];
char msg2[50];
uint16_t led_time = 0;
void unknown() {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af02      	add	r7, sp, #8
	// Check voltage every 350ms
	if (voltageCount % 2 != (uint16_t) 0) {
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <unknown+0x158>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 808e 	beq.w	800163a <unknown+0x132>
		voltageCount++;
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <unknown+0x158>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <unknown+0x158>)
 8001528:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 800152a:	484e      	ldr	r0, [pc, #312]	; (8001664 <unknown+0x15c>)
 800152c:	f001 f928 	bl	8002780 <HAL_ADC_Start>
		// Poll ADC1 Perihperal
		HAL_ADC_PollForConversion(&hadc1, 200);
 8001530:	21c8      	movs	r1, #200	; 0xc8
 8001532:	484c      	ldr	r0, [pc, #304]	; (8001664 <unknown+0x15c>)
 8001534:	f001 fa08 	bl	8002948 <HAL_ADC_PollForConversion>
		// Read The ADC potentiometer value
		uint16_t rawVoltage = HAL_ADC_GetValue(&hadc1);
 8001538:	484a      	ldr	r0, [pc, #296]	; (8001664 <unknown+0x15c>)
 800153a:	f001 fb0b 	bl	8002b54 <HAL_ADC_GetValue>
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
		float valueVoltage = (rawVoltage * 3.3) / 4096;
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f815 	bl	8000574 <__aeabi_i2d>
 800154a:	a33f      	add	r3, pc, #252	; (adr r3, 8001648 <unknown+0x140>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f87a 	bl	8000648 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b41      	ldr	r3, [pc, #260]	; (8001668 <unknown+0x160>)
 8001562:	f7ff f99b 	bl	800089c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb43 	bl	8000bf8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	603b      	str	r3, [r7, #0]
		sprintf(msg2, "(%lu) System Voltage: %f\r\n", HAL_GetTick() / 10,
 8001576:	f000 fce3 	bl	8001f40 <HAL_GetTick>
 800157a:	4603      	mov	r3, r0
 800157c:	4a3b      	ldr	r2, [pc, #236]	; (800166c <unknown+0x164>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	08dc      	lsrs	r4, r3, #3
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f7ff f807 	bl	8000598 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9cd 2300 	strd	r2, r3, [sp]
 8001592:	4622      	mov	r2, r4
 8001594:	4936      	ldr	r1, [pc, #216]	; (8001670 <unknown+0x168>)
 8001596:	4837      	ldr	r0, [pc, #220]	; (8001674 <unknown+0x16c>)
 8001598:	f005 fa4e 	bl	8006a38 <siprintf>
				valueVoltage);
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) msg2, strlen(msg2), 1000);
 800159c:	4835      	ldr	r0, [pc, #212]	; (8001674 <unknown+0x16c>)
 800159e:	f7fe fe3f 	bl	8000220 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	4932      	ldr	r1, [pc, #200]	; (8001674 <unknown+0x16c>)
 80015ac:	4832      	ldr	r0, [pc, #200]	; (8001678 <unknown+0x170>)
 80015ae:	f003 ff5d 	bl	800546c <HAL_UART_Transmit>

		if (valueVoltage < 2.7 && valueVoltage > 1.8) {
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f7fe fff0 	bl	8000598 <__aeabi_f2d>
 80015b8:	a325      	add	r3, pc, #148	; (adr r3, 8001650 <unknown+0x148>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff fab5 	bl	8000b2c <__aeabi_dcmplt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00d      	beq.n	80015e4 <unknown+0xdc>
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f7fe ffe5 	bl	8000598 <__aeabi_f2d>
 80015ce:	a322      	add	r3, pc, #136	; (adr r3, 8001658 <unknown+0x150>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff fac8 	bl	8000b68 <__aeabi_dcmpgt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <unknown+0xdc>

			currState = SAFESTATE;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <unknown+0x174>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	701a      	strb	r2, [r3, #0]

		}
		if (valueVoltage <= 1.8) {
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7fe ffd7 	bl	8000598 <__aeabi_f2d>
 80015ea:	a31b      	add	r3, pc, #108	; (adr r3, 8001658 <unknown+0x150>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff faa6 	bl	8000b40 <__aeabi_dcmple>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <unknown+0x106>
			HAL_UART_Transmit(&hlpuart1, MSG1, sizeof(MSG1), 1000);
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	2225      	movs	r2, #37	; 0x25
 8001600:	491f      	ldr	r1, [pc, #124]	; (8001680 <unknown+0x178>)
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <unknown+0x170>)
 8001604:	f003 ff32 	bl	800546c <HAL_UART_Transmit>
			currState = UNDERVOLTAGE;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <unknown+0x174>)
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]

		}
		if (valueVoltage >= 2.7) {
 800160e:	6838      	ldr	r0, [r7, #0]
 8001610:	f7fe ffc2 	bl	8000598 <__aeabi_f2d>
 8001614:	a30e      	add	r3, pc, #56	; (adr r3, 8001650 <unknown+0x148>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff fa9b 	bl	8000b54 <__aeabi_dcmpge>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d100      	bne.n	8001626 <unknown+0x11e>
			HAL_UART_Transmit(&hlpuart1, MSG2, sizeof(MSG2), 1000);
			currState = OVERVOLTAGE;
		}
	}
}
 8001624:	e009      	b.n	800163a <unknown+0x132>
			HAL_UART_Transmit(&hlpuart1, MSG2, sizeof(MSG2), 1000);
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	2224      	movs	r2, #36	; 0x24
 800162c:	4915      	ldr	r1, [pc, #84]	; (8001684 <unknown+0x17c>)
 800162e:	4812      	ldr	r0, [pc, #72]	; (8001678 <unknown+0x170>)
 8001630:	f003 ff1c 	bl	800546c <HAL_UART_Transmit>
			currState = OVERVOLTAGE;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <unknown+0x174>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	66666666 	.word	0x66666666
 800164c:	400a6666 	.word	0x400a6666
 8001650:	9999999a 	.word	0x9999999a
 8001654:	40059999 	.word	0x40059999
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	3ffccccc 	.word	0x3ffccccc
 8001660:	20000004 	.word	0x20000004
 8001664:	20000274 	.word	0x20000274
 8001668:	40b00000 	.word	0x40b00000
 800166c:	cccccccd 	.word	0xcccccccd
 8001670:	08008f80 	.word	0x08008f80
 8001674:	200004ac 	.word	0x200004ac
 8001678:	2000034c 	.word	0x2000034c
 800167c:	20000474 	.word	0x20000474
 8001680:	20000008 	.word	0x20000008
 8001684:	20000030 	.word	0x20000030

08001688 <safestate>:
void safestate() {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2110      	movs	r1, #16
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <safestate+0x24>)
 8001692:	f002 facf 	bl	8003c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2120      	movs	r1, #32
 800169a:	4804      	ldr	r0, [pc, #16]	; (80016ac <safestate+0x24>)
 800169c:	f002 faca 	bl	8003c34 <HAL_GPIO_WritePin>
	currState = UNKNOWN;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <safestate+0x28>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	48000800 	.word	0x48000800
 80016b0:	20000474 	.word	0x20000474

080016b4 <undervoltage>:
void undervoltage() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2110      	movs	r1, #16
 80016bc:	4806      	ldr	r0, [pc, #24]	; (80016d8 <undervoltage+0x24>)
 80016be:	f002 fab9 	bl	8003c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2120      	movs	r1, #32
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <undervoltage+0x24>)
 80016c8:	f002 fab4 	bl	8003c34 <HAL_GPIO_WritePin>
	currState = UNKNOWN;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <undervoltage+0x28>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	48000800 	.word	0x48000800
 80016dc:	20000474 	.word	0x20000474

080016e0 <overvoltage>:
void overvoltage() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2110      	movs	r1, #16
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <overvoltage+0x24>)
 80016ea:	f002 faa3 	bl	8003c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2120      	movs	r1, #32
 80016f2:	4804      	ldr	r0, [pc, #16]	; (8001704 <overvoltage+0x24>)
 80016f4:	f002 fa9e 	bl	8003c34 <HAL_GPIO_WritePin>
	currState = UNKNOWN;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <overvoltage+0x28>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	48000800 	.word	0x48000800
 8001708:	20000474 	.word	0x20000474
 800170c:	00000000 	.word	0x00000000

08001710 <sensor>:
void sensor() {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af02      	add	r7, sp, #8
	// Check sensor every 200ms
	if (sensorCount % 2 != (uint16_t) 0) {
 8001716:	4b52      	ldr	r3, [pc, #328]	; (8001860 <sensor+0x150>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 808b 	beq.w	800183c <sensor+0x12c>
		sensorCount++;
 8001726:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <sensor+0x150>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <sensor+0x150>)
 8001730:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start(&hadc2);
 8001732:	484c      	ldr	r0, [pc, #304]	; (8001864 <sensor+0x154>)
 8001734:	f001 f824 	bl	8002780 <HAL_ADC_Start>
		// Poll ADC2 Sensor
		HAL_ADC_PollForConversion(&hadc2, 200);
 8001738:	21c8      	movs	r1, #200	; 0xc8
 800173a:	484a      	ldr	r0, [pc, #296]	; (8001864 <sensor+0x154>)
 800173c:	f001 f904 	bl	8002948 <HAL_ADC_PollForConversion>
		// Read The ADC sensor value
		uint16_t rawSensor = HAL_ADC_GetValue(&hadc2);
 8001740:	4848      	ldr	r0, [pc, #288]	; (8001864 <sensor+0x154>)
 8001742:	f001 fa07 	bl	8002b54 <HAL_ADC_GetValue>
 8001746:	4603      	mov	r3, r0
 8001748:	81fb      	strh	r3, [r7, #14]
		float valueSensor = (rawSensor * 3.3) / 4096.0;
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff11 	bl	8000574 <__aeabi_i2d>
 8001752:	a33d      	add	r3, pc, #244	; (adr r3, 8001848 <sensor+0x138>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff76 	bl	8000648 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <sensor+0x158>)
 800176a:	f7ff f897 	bl	800089c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa3f 	bl	8000bf8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	60bb      	str	r3, [r7, #8]
		float Magneticvalue = (valueSensor - (3.3 / 2.0));
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe ff0a 	bl	8000598 <__aeabi_f2d>
 8001784:	a332      	add	r3, pc, #200	; (adr r3, 8001850 <sensor+0x140>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fda5 	bl	80002d8 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fa2f 	bl	8000bf8 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	607b      	str	r3, [r7, #4]
		Magneticvalue = (Magneticvalue * 1000) / 1.6;
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800186c <sensor+0x15c>
 80017a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017aa:	ee17 0a90 	vmov	r0, s15
 80017ae:	f7fe fef3 	bl	8000598 <__aeabi_f2d>
 80017b2:	a329      	add	r3, pc, #164	; (adr r3, 8001858 <sensor+0x148>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7ff f870 	bl	800089c <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa18 	bl	8000bf8 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	607b      	str	r3, [r7, #4]
		if (Magneticvalue > -1000 && Magneticvalue < 1000) {
 80017cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001870 <sensor+0x160>
 80017d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd27      	ble.n	800182e <sensor+0x11e>
 80017de:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800186c <sensor+0x15c>
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	d51e      	bpl.n	800182e <sensor+0x11e>
			sprintf(msg, "(%lu) Magnetic field: %f\r\n", HAL_GetTick() / 10,
 80017f0:	f000 fba6 	bl	8001f40 <HAL_GetTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <sensor+0x164>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	08dc      	lsrs	r4, r3, #3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7fe feca 	bl	8000598 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9cd 2300 	strd	r2, r3, [sp]
 800180c:	4622      	mov	r2, r4
 800180e:	491a      	ldr	r1, [pc, #104]	; (8001878 <sensor+0x168>)
 8001810:	481a      	ldr	r0, [pc, #104]	; (800187c <sensor+0x16c>)
 8001812:	f005 f911 	bl	8006a38 <siprintf>
					Magneticvalue);
			HAL_UART_Transmit(&hlpuart1, (uint8_t*) msg, strlen(msg), 1000);
 8001816:	4819      	ldr	r0, [pc, #100]	; (800187c <sensor+0x16c>)
 8001818:	f7fe fd02 	bl	8000220 <strlen>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001824:	4915      	ldr	r1, [pc, #84]	; (800187c <sensor+0x16c>)
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <sensor+0x170>)
 8001828:	f003 fe20 	bl	800546c <HAL_UART_Transmit>
		} else
			HAL_UART_Transmit(&hlpuart1, MSG3, sizeof(MSG3), 1000);
	}
}
 800182c:	e006      	b.n	800183c <sensor+0x12c>
			HAL_UART_Transmit(&hlpuart1, MSG3, sizeof(MSG3), 1000);
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	2227      	movs	r2, #39	; 0x27
 8001834:	4913      	ldr	r1, [pc, #76]	; (8001884 <sensor+0x174>)
 8001836:	4812      	ldr	r0, [pc, #72]	; (8001880 <sensor+0x170>)
 8001838:	f003 fe18 	bl	800546c <HAL_UART_Transmit>
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	66666666 	.word	0x66666666
 800184c:	400a6666 	.word	0x400a6666
 8001850:	66666666 	.word	0x66666666
 8001854:	3ffa6666 	.word	0x3ffa6666
 8001858:	9999999a 	.word	0x9999999a
 800185c:	3ff99999 	.word	0x3ff99999
 8001860:	20000002 	.word	0x20000002
 8001864:	200002e0 	.word	0x200002e0
 8001868:	40b00000 	.word	0x40b00000
 800186c:	447a0000 	.word	0x447a0000
 8001870:	c47a0000 	.word	0xc47a0000
 8001874:	cccccccd 	.word	0xcccccccd
 8001878:	08008f9c 	.word	0x08008f9c
 800187c:	20000478 	.word	0x20000478
 8001880:	2000034c 	.word	0x2000034c
 8001884:	20000054 	.word	0x20000054

08001888 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001898:	d105      	bne.n	80018a6 <HAL_GPIO_EXTI_Callback+0x1e>
		// Counter of User button
		interrupt++;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018a4:	801a      	strh	r2, [r3, #0]
	}
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000000 	.word	0x20000000

080018b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if (interrupt % 2 == (uint16_t) 0) {
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d113      	bne.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		if (htim == &htim17) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d105      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x2a>
			// Check sensor every 200ms
			sensorCount++;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018e0:	801a      	strh	r2, [r3, #0]
		}
		if (htim == &htim16) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d105      	bne.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x3e>
			// Check voltage every 350ms
			voltageCount++;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018f4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000
 8001908:	20000428 	.word	0x20000428
 800190c:	20000002 	.word	0x20000002
 8001910:	200003dc 	.word	0x200003dc
 8001914:	20000004 	.word	0x20000004

08001918 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6613      	str	r3, [r2, #96]	; 0x60
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6593      	str	r3, [r2, #88]	; 0x58
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x44>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800195a:	f002 fa3f 	bl	8003ddc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0a0      	sub	sp, #128	; 0x80
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	2254      	movs	r2, #84	; 0x54
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f004 fbe1 	bl	8006154 <memset>
  if(hadc->Instance==ADC1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199a:	d13e      	bne.n	8001a1a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800199c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 ff59 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019b8:	f7ff ffae 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019bc:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_ADC_MspInit+0x13c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <HAL_ADC_MspInit+0x13c>)
 80019c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_ADC_MspInit+0x13c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d10b      	bne.n	80019e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_ADC_MspInit+0x140>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a36      	ldr	r2, [pc, #216]	; (8001aac <HAL_ADC_MspInit+0x140>)
 80019d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_ADC_MspInit+0x140>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_ADC_MspInit+0x140>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_ADC_MspInit+0x140>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_ADC_MspInit+0x140>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019fe:	2302      	movs	r3, #2
 8001a00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a02:	2303      	movs	r3, #3
 8001a04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f001 ff8c 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a18:	e042      	b.n	8001aa0 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_ADC_MspInit+0x144>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d13d      	bne.n	8001aa0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 ff15 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001a40:	f7ff ff6a 	bl	8001918 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_ADC_MspInit+0x13c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_ADC_MspInit+0x13c>)
 8001a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_ADC_MspInit+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10b      	bne.n	8001a6e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_ADC_MspInit+0x140>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_ADC_MspInit+0x140>)
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_ADC_MspInit+0x140>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_ADC_MspInit+0x140>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_ADC_MspInit+0x140>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_ADC_MspInit+0x140>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a86:	2301      	movs	r3, #1
 8001a88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f001 ff48 	bl	8003930 <HAL_GPIO_Init>
}
 8001aa0:	bf00      	nop
 8001aa2:	3780      	adds	r7, #128	; 0x80
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200004e0 	.word	0x200004e0
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	50000100 	.word	0x50000100

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b09e      	sub	sp, #120	; 0x78
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2254      	movs	r2, #84	; 0x54
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fb3d 	bl	8006154 <memset>
  if(huart->Instance==LPUART1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_UART_MspInit+0xa8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d136      	bne.n	8001b52 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 feb7 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001afc:	f7ff ff0c 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_UART_MspInit+0xac>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_UART_MspInit+0xac>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0xac>)
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_MspInit+0xac>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_UART_MspInit+0xac>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_UART_MspInit+0xac>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b30:	230c      	movs	r3, #12
 8001b32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b40:	230c      	movs	r3, #12
 8001b42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f001 feef 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3778      	adds	r7, #120	; 0x78
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40008000 	.word	0x40008000
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_TIM_Base_MspInit+0x78>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d114      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	6613      	str	r3, [r2, #96]	; 0x60
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2019      	movs	r0, #25
 8001b94:	f001 fe97 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b98:	2019      	movs	r0, #25
 8001b9a:	f001 feae 	bl	80038fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b9e:	e018      	b.n	8001bd2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_TIM_Base_MspInit+0x80>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d113      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	201a      	movs	r0, #26
 8001bc8:	f001 fe7d 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001bcc:	201a      	movs	r0, #26
 8001bce:	f001 fe94 	bl	80038fa <HAL_NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40014800 	.word	0x40014800

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f972 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c42:	f003 f92d 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200003dc 	.word	0x200003dc

08001c50 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c56:	f003 f923 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000428 	.word	0x20000428

08001c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c6c:	f001 fffa 	bl	8003c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c8e:	f004 fa37 	bl	8006100 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
	return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
	}

return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf1      	blt.n	8001d04 <_write+0x12>
	}
	return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_close>:

int _close(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
	return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	605a      	str	r2, [r3, #4]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f004 f99c 	bl	8006100 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	200004e4 	.word	0x200004e4
 8001dfc:	20000500 	.word	0x20000500

08001e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4e:	f7ff ffd7 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f004 f95b 	bl	800610c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff f8a1 	bl	8000f9c <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   r0, =_estack
 8001e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001e68:	080093e4 	.word	0x080093e4
  ldr r2, =_sbss
 8001e6c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001e70:	200004fc 	.word	0x200004fc

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>

08001e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f001 fd15 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f80e 	bl	8001ea8 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	e001      	b.n	8001e9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e98:	f7ff fd44 	bl	8001924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_InitTick+0x68>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_InitTick+0x6c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_InitTick+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 fd20 	bl	8003916 <HAL_SYSTICK_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d809      	bhi.n	8001ef6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eea:	f001 fcec 	bl	80038c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_InitTick+0x70>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e004      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000084 	.word	0x20000084
 8001f14:	2000007c 	.word	0x2000007c
 8001f18:	20000080 	.word	0x20000080

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	200004e8 	.word	0x200004e8
 8001f3c:	20000084 	.word	0x20000084

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200004e8 	.word	0x200004e8

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f70:	d004      	beq.n	8001f7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_Delay+0x40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7c:	bf00      	nop
 8001f7e:	f7ff ffdf 	bl	8001f40 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d8f7      	bhi.n	8001f7e <HAL_Delay+0x26>
  {
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000084 	.word	0x20000084

08001f9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3360      	adds	r3, #96	; 0x60
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <LL_ADC_SetOffset+0x44>)
 8002026:	4013      	ands	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	4313      	orrs	r3, r2
 8002034:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	03fff000 	.word	0x03fff000

0800204c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3360      	adds	r3, #96	; 0x60
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	3360      	adds	r3, #96	; 0x60
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	431a      	orrs	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b087      	sub	sp, #28
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3360      	adds	r3, #96	; 0x60
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3360      	adds	r3, #96	; 0x60
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	615a      	str	r2, [r3, #20]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002166:	b480      	push	{r7}
 8002168:	b087      	sub	sp, #28
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3330      	adds	r3, #48	; 0x30
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	4413      	add	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	211f      	movs	r1, #31
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	401a      	ands	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	f003 011f 	and.w	r1, r3, #31
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021be:	b480      	push	{r7}
 80021c0:	b087      	sub	sp, #28
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3314      	adds	r3, #20
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	0e5b      	lsrs	r3, r3, #25
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	4413      	add	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0d1b      	lsrs	r3, r3, #20
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	2107      	movs	r1, #7
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0d1b      	lsrs	r3, r3, #20
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	431a      	orrs	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d10a      	bne.n	800223e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800223c:	e00a      	b.n	8002254 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	43db      	mvns	r3, r3
 800224c:	401a      	ands	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	407f0000 	.word	0x407f0000

08002264 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 031f 	and.w	r3, r3, #31
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6093      	str	r3, [r2, #8]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d4:	d101      	bne.n	80022da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002324:	d101      	bne.n	800232a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <LL_ADC_IsEnabled+0x18>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <LL_ADC_IsEnabled+0x1a>
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239a:	f043 0204 	orr.w	r2, r3, #4
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d101      	bne.n	80023ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1af      	b.n	8002776 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff faa1 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff3f 	bl	80022c0 <LL_ADC_IsDeepPowerDownEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff25 	bl	800229c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff5a 	bl	8002310 <LL_ADC_IsInternalRegulatorEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff3e 	bl	80022e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800246c:	4b9f      	ldr	r3, [pc, #636]	; (80026ec <HAL_ADC_Init+0x2f0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	4a9f      	ldr	r2, [pc, #636]	; (80026f0 <HAL_ADC_Init+0x2f4>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002480:	e002      	b.n	8002488 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3b01      	subs	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff3c 	bl	8002310 <LL_ADC_IsInternalRegulatorEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	f043 0210 	orr.w	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff75 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 80024c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8148 	bne.w	8002764 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 8144 	bne.w	8002764 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff35 	bl	8002360 <LL_ADC_IsEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d141      	bne.n	8002580 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002504:	d004      	beq.n	8002510 <HAL_ADC_Init+0x114>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <HAL_ADC_Init+0x2f8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10f      	bne.n	8002530 <HAL_ADC_Init+0x134>
 8002510:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002514:	f7ff ff24 	bl	8002360 <LL_ADC_IsEnabled>
 8002518:	4604      	mov	r4, r0
 800251a:	4876      	ldr	r0, [pc, #472]	; (80026f4 <HAL_ADC_Init+0x2f8>)
 800251c:	f7ff ff20 	bl	8002360 <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	4323      	orrs	r3, r4
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e012      	b.n	8002556 <HAL_ADC_Init+0x15a>
 8002530:	4871      	ldr	r0, [pc, #452]	; (80026f8 <HAL_ADC_Init+0x2fc>)
 8002532:	f7ff ff15 	bl	8002360 <LL_ADC_IsEnabled>
 8002536:	4604      	mov	r4, r0
 8002538:	4870      	ldr	r0, [pc, #448]	; (80026fc <HAL_ADC_Init+0x300>)
 800253a:	f7ff ff11 	bl	8002360 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	431c      	orrs	r4, r3
 8002542:	486f      	ldr	r0, [pc, #444]	; (8002700 <HAL_ADC_Init+0x304>)
 8002544:	f7ff ff0c 	bl	8002360 <LL_ADC_IsEnabled>
 8002548:	4603      	mov	r3, r0
 800254a:	4323      	orrs	r3, r4
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002562:	d004      	beq.n	800256e <HAL_ADC_Init+0x172>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a62      	ldr	r2, [pc, #392]	; (80026f4 <HAL_ADC_Init+0x2f8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x176>
 800256e:	4a65      	ldr	r2, [pc, #404]	; (8002704 <HAL_ADC_Init+0x308>)
 8002570:	e000      	b.n	8002574 <HAL_ADC_Init+0x178>
 8002572:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_ADC_Init+0x30c>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f7ff fd0e 	bl	8001f9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7f5b      	ldrb	r3, [r3, #29]
 8002584:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800258a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002590:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002596:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d106      	bne.n	80025bc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	045b      	lsls	r3, r3, #17
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_ADC_Init+0x310>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fed1 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 800260c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fede 	bl	80023d4 <LL_ADC_INJ_IsConversionOngoing>
 8002618:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d17f      	bne.n	8002720 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d17c      	bne.n	8002720 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800262a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002632:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002642:	f023 0302 	bic.w	r3, r3, #2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	430b      	orrs	r3, r1
 800264e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d017      	beq.n	8002688 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002666:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002670:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6911      	ldr	r1, [r2, #16]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002686:	e013      	b.n	80026b0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002696:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d12a      	bne.n	8002710 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026d6:	4311      	orrs	r1, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026dc:	430a      	orrs	r2, r1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e019      	b.n	8002720 <HAL_ADC_Init+0x324>
 80026ec:	2000007c 	.word	0x2000007c
 80026f0:	053e2d63 	.word	0x053e2d63
 80026f4:	50000100 	.word	0x50000100
 80026f8:	50000400 	.word	0x50000400
 80026fc:	50000500 	.word	0x50000500
 8002700:	50000600 	.word	0x50000600
 8002704:	50000300 	.word	0x50000300
 8002708:	50000700 	.word	0x50000700
 800270c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10c      	bne.n	8002742 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f023 010f 	bic.w	r1, r3, #15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	1e5a      	subs	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
 8002740:	e007      	b.n	8002752 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020f 	bic.w	r2, r2, #15
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	65da      	str	r2, [r3, #92]	; 0x5c
 8002762:	e007      	b.n	8002774 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002774:	7ffb      	ldrb	r3, [r7, #31]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop

08002780 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002790:	d004      	beq.n	800279c <HAL_ADC_Start+0x1c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_ADC_Start+0x1b4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_Start+0x20>
 800279c:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_ADC_Start+0x1b8>)
 800279e:	e000      	b.n	80027a2 <HAL_ADC_Start+0x22>
 80027a0:	4b66      	ldr	r3, [pc, #408]	; (800293c <HAL_ADC_Start+0x1bc>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fd5e 	bl	8002264 <LL_ADC_GetMultimode>
 80027a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fdfd 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80b4 	bne.w	8002924 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Start+0x4a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0af      	b.n	800292a <HAL_ADC_Start+0x1aa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fe0c 	bl	80033f0 <ADC_Enable>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 809b 	bne.w	800291a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4d      	ldr	r2, [pc, #308]	; (8002934 <HAL_ADC_Start+0x1b4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_ADC_Start+0x96>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_ADC_Start+0x1c0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d002      	beq.n	8002812 <HAL_ADC_Start+0x92>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	e003      	b.n	800281a <HAL_ADC_Start+0x9a>
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <HAL_ADC_Start+0x1c4>)
 8002814:	e001      	b.n	800281a <HAL_ADC_Start+0x9a>
 8002816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	4293      	cmp	r3, r2
 8002820:	d002      	beq.n	8002828 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d106      	bne.n	8002850 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	f023 0206 	bic.w	r2, r3, #6
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
 800284e:	e002      	b.n	8002856 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	221c      	movs	r2, #28
 800285c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a32      	ldr	r2, [pc, #200]	; (8002934 <HAL_ADC_Start+0x1b4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d009      	beq.n	8002884 <HAL_ADC_Start+0x104>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a32      	ldr	r2, [pc, #200]	; (8002940 <HAL_ADC_Start+0x1c0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d002      	beq.n	8002880 <HAL_ADC_Start+0x100>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e003      	b.n	8002888 <HAL_ADC_Start+0x108>
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <HAL_ADC_Start+0x1c4>)
 8002882:	e001      	b.n	8002888 <HAL_ADC_Start+0x108>
 8002884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	4293      	cmp	r3, r2
 800288e:	d008      	beq.n	80028a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d002      	beq.n	80028a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d114      	bne.n	80028cc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fd5e 	bl	8002386 <LL_ADC_REG_StartConversion>
 80028ca:	e02d      	b.n	8002928 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_ADC_Start+0x1b4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d009      	beq.n	80028f6 <HAL_ADC_Start+0x176>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_ADC_Start+0x1c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_Start+0x172>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e003      	b.n	80028fa <HAL_ADC_Start+0x17a>
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_ADC_Start+0x1c4>)
 80028f4:	e001      	b.n	80028fa <HAL_ADC_Start+0x17a>
 80028f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028fa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002910:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
 8002918:	e006      	b.n	8002928 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002922:	e001      	b.n	8002928 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002924:	2302      	movs	r3, #2
 8002926:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002928:	7dfb      	ldrb	r3, [r7, #23]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	50000100 	.word	0x50000100
 8002938:	50000300 	.word	0x50000300
 800293c:	50000700 	.word	0x50000700
 8002940:	50000500 	.word	0x50000500
 8002944:	50000400 	.word	0x50000400

08002948 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295a:	d004      	beq.n	8002966 <HAL_ADC_PollForConversion+0x1e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a77      	ldr	r2, [pc, #476]	; (8002b40 <HAL_ADC_PollForConversion+0x1f8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_ADC_PollForConversion+0x22>
 8002966:	4b77      	ldr	r3, [pc, #476]	; (8002b44 <HAL_ADC_PollForConversion+0x1fc>)
 8002968:	e000      	b.n	800296c <HAL_ADC_PollForConversion+0x24>
 800296a:	4b77      	ldr	r3, [pc, #476]	; (8002b48 <HAL_ADC_PollForConversion+0x200>)
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc79 	bl	8002264 <LL_ADC_GetMultimode>
 8002972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d102      	bne.n	8002982 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800297c:	2308      	movs	r3, #8
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e037      	b.n	80029f2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d002      	beq.n	8002994 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d111      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0c1      	b.n	8002b36 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029b2:	2304      	movs	r3, #4
 80029b4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029b6:	e01c      	b.n	80029f2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c0:	d004      	beq.n	80029cc <HAL_ADC_PollForConversion+0x84>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5e      	ldr	r2, [pc, #376]	; (8002b40 <HAL_ADC_PollForConversion+0x1f8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x88>
 80029cc:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HAL_ADC_PollForConversion+0x1fc>)
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_PollForConversion+0x8a>
 80029d0:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_ADC_PollForConversion+0x200>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fc54 	bl	8002280 <LL_ADC_GetMultiDMATransfer>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0a3      	b.n	8002b36 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029ee:	2304      	movs	r3, #4
 80029f0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029f2:	f7ff faa5 	bl	8001f40 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029f8:	e021      	b.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d01d      	beq.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a02:	f7ff fa9d 	bl	8001f40 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <HAL_ADC_PollForConversion+0xd0>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d112      	bne.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e07b      	b.n	8002b36 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0d6      	beq.n	80029fa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fb6f 	bl	8002140 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d118      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d111      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_ADC_PollForConversion+0x1f8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_ADC_PollForConversion+0x178>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <HAL_ADC_PollForConversion+0x204>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d002      	beq.n	8002abc <HAL_ADC_PollForConversion+0x174>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e003      	b.n	8002ac4 <HAL_ADC_PollForConversion+0x17c>
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_ADC_PollForConversion+0x208>)
 8002abe:	e001      	b.n	8002ac4 <HAL_ADC_PollForConversion+0x17c>
 8002ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d008      	beq.n	8002ade <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d002      	beq.n	8002ade <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d104      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e014      	b.n	8002b12 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <HAL_ADC_PollForConversion+0x1f8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x1be>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <HAL_ADC_PollForConversion+0x204>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d002      	beq.n	8002b02 <HAL_ADC_PollForConversion+0x1ba>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e003      	b.n	8002b0a <HAL_ADC_PollForConversion+0x1c2>
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_ADC_PollForConversion+0x208>)
 8002b04:	e001      	b.n	8002b0a <HAL_ADC_PollForConversion+0x1c2>
 8002b06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b0a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d104      	bne.n	8002b22 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e008      	b.n	8002b34 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	220c      	movs	r2, #12
 8002b32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	50000100 	.word	0x50000100
 8002b44:	50000300 	.word	0x50000300
 8002b48:	50000700 	.word	0x50000700
 8002b4c:	50000500 	.word	0x50000500
 8002b50:	50000400 	.word	0x50000400

08002b54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0b6      	sub	sp, #216	; 0xd8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x24>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f000 bc13 	b.w	80033ba <HAL_ADC_ConfigChannel+0x84a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fc04 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 83f3 	bne.w	8003394 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f7ff fad3 	bl	8002166 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fbf2 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 8002bca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fbfe 	bl	80023d4 <LL_ADC_INJ_IsConversionOngoing>
 8002bd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 81d9 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 81d4 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	4619      	mov	r1, r3
 8002c06:	f7ff fada 	bl	80021be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fa81 	bl	800211a <LL_ADC_SetSamplingTimeCommonConfig>
 8002c18:	e00e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7ff fac9 	bl	80021be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fa71 	bl	800211a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d022      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6919      	ldr	r1, [r3, #16]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c6a:	f7ff f9cb 	bl	8002004 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff fa17 	bl	80020ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	7f1b      	ldrb	r3, [r3, #28]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x126>
 8002c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x128>
 8002c96:	2300      	movs	r3, #0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff fa23 	bl	80020e4 <LL_ADC_SetOffsetSaturation>
 8002c9e:	e17b      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f9d0 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x15c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f9c5 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	e01e      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x19a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f9ba 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x1b2>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	e018      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1e4>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f989 	bl	8002078 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f96d 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x222>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f962 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	e01e      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x260>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f957 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002db0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e004      	b.n	8002dce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x278>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	e018      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2aa>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e004      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d106      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f926 	bl	8002078 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f90a 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x2e8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f8ff 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	f003 021f 	and.w	r2, r3, #31
 8002e56:	e01e      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x326>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff f8f4 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x33e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	e016      	b.n	8002edc <HAL_ADC_ConfigChannel+0x36c>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff f8c5 	bl	8002078 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f8a9 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x3aa>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2103      	movs	r1, #3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f89e 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	e017      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x3da>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2103      	movs	r1, #3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f893 	bl	800204c <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f34:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x3f2>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	e011      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x416>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2103      	movs	r1, #3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f870 	bl	8002078 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f9df 	bl	8002360 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 813d 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f7ff f92c 	bl	8002214 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4aa2      	ldr	r2, [pc, #648]	; (800324c <HAL_ADC_ConfigChannel+0x6dc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f040 812e 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x480>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e019      	b.n	8003024 <HAL_ADC_ConfigChannel+0x4b4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800300c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2b09      	cmp	r3, #9
 800301c:	bf94      	ite	ls
 800301e:	2301      	movls	r3, #1
 8003020:	2300      	movhi	r3, #0
 8003022:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003024:	2b00      	cmp	r3, #0
 8003026:	d079      	beq.n	800311c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x4d4>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	3301      	adds	r3, #1
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	e015      	b.n	8003070 <HAL_ADC_ConfigChannel+0x500>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x520>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	e017      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x550>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e003      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x576>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0e9b      	lsrs	r3, r3, #26
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	051b      	lsls	r3, r3, #20
 80030e4:	e018      	b.n	8003118 <HAL_ADC_ConfigChannel+0x5a8>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003118:	430b      	orrs	r3, r1
 800311a:	e07e      	b.n	800321a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x5c8>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	3301      	adds	r3, #1
 8003130:	069b      	lsls	r3, r3, #26
 8003132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003136:	e015      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5f4>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	069b      	lsls	r3, r3, #26
 8003160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x614>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	3301      	adds	r3, #1
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	e017      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x644>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	61fb      	str	r3, [r7, #28]
  return result;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	ea42 0103 	orr.w	r1, r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x670>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	3b1e      	subs	r3, #30
 80031d8:	051b      	lsls	r3, r3, #20
 80031da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031de:	e01b      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	613b      	str	r3, [r7, #16]
  return result;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	3b1e      	subs	r3, #30
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003218:	430b      	orrs	r3, r1
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	4619      	mov	r1, r3
 8003220:	f7fe ffcd 	bl	80021be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_ADC_ConfigChannel+0x6e0>)
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80be 	beq.w	80033ae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323a:	d004      	beq.n	8003246 <HAL_ADC_ConfigChannel+0x6d6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_ADC_ConfigChannel+0x6e4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10a      	bne.n	800325c <HAL_ADC_ConfigChannel+0x6ec>
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_ADC_ConfigChannel+0x6e8>)
 8003248:	e009      	b.n	800325e <HAL_ADC_ConfigChannel+0x6ee>
 800324a:	bf00      	nop
 800324c:	407f0000 	.word	0x407f0000
 8003250:	80080000 	.word	0x80080000
 8003254:	50000100 	.word	0x50000100
 8003258:	50000300 	.word	0x50000300
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fec2 	bl	8001fe8 <LL_ADC_GetCommonPathInternalCh>
 8003264:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a56      	ldr	r2, [pc, #344]	; (80033c8 <HAL_ADC_ConfigChannel+0x858>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_ADC_ConfigChannel+0x70c>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a55      	ldr	r2, [pc, #340]	; (80033cc <HAL_ADC_ConfigChannel+0x85c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d13a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800327c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d134      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003290:	d005      	beq.n	800329e <HAL_ADC_ConfigChannel+0x72e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <HAL_ADC_ConfigChannel+0x860>)
 8003298:	4293      	cmp	r3, r2
 800329a:	f040 8085 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x742>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x746>
 80032b2:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <HAL_ADC_ConfigChannel+0x868>)
 80032b4:	e000      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x748>
 80032b6:	4a43      	ldr	r2, [pc, #268]	; (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 80032b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7fe fe7d 	bl	8001fc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c8:	4b44      	ldr	r3, [pc, #272]	; (80033dc <HAL_ADC_ConfigChannel+0x86c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <HAL_ADC_ConfigChannel+0x870>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032e2:	e002      	b.n	80032ea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f0:	e05a      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3b      	ldr	r2, [pc, #236]	; (80033e4 <HAL_ADC_ConfigChannel+0x874>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d125      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x7d8>
 80032fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11f      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d104      	bne.n	800331c <HAL_ADC_ConfigChannel+0x7ac>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_ADC_ConfigChannel+0x878>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d047      	beq.n	80033ac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003324:	d004      	beq.n	8003330 <HAL_ADC_ConfigChannel+0x7c0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x7c4>
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_ADC_ConfigChannel+0x868>)
 8003332:	e000      	b.n	8003336 <HAL_ADC_ConfigChannel+0x7c6>
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 8003336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe fe3e 	bl	8001fc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003346:	e031      	b.n	80033ac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <HAL_ADC_ConfigChannel+0x87c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d12d      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d127      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003370:	d004      	beq.n	800337c <HAL_ADC_ConfigChannel+0x80c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x810>
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_ADC_ConfigChannel+0x868>)
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x812>
 8003380:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 8003382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f7fe fe18 	bl	8001fc2 <LL_ADC_SetCommonPathInternalCh>
 8003392:	e00c      	b.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80033a6:	e002      	b.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	37d8      	adds	r7, #216	; 0xd8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	50000700 	.word	0x50000700
 80033c8:	c3210000 	.word	0xc3210000
 80033cc:	90c00010 	.word	0x90c00010
 80033d0:	50000600 	.word	0x50000600
 80033d4:	50000100 	.word	0x50000100
 80033d8:	50000300 	.word	0x50000300
 80033dc:	2000007c 	.word	0x2000007c
 80033e0:	053e2d63 	.word	0x053e2d63
 80033e4:	c7520000 	.word	0xc7520000
 80033e8:	50000500 	.word	0x50000500
 80033ec:	cb840000 	.word	0xcb840000

080033f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe ffaf 	bl	8002360 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d14d      	bne.n	80034a4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <ADC_Enable+0xc0>)
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e039      	b.n	80034a6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe ff7e 	bl	8002338 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800343c:	f7fe fd80 	bl	8001f40 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003442:	e028      	b.n	8003496 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe ff89 	bl	8002360 <LL_ADC_IsEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe ff6d 	bl	8002338 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800345e:	f7fe fd6f 	bl	8001f40 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d914      	bls.n	8003496 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b01      	cmp	r3, #1
 8003478:	d00d      	beq.n	8003496 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	f043 0210 	orr.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e007      	b.n	80034a6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d1cf      	bne.n	8003444 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	8000003f 	.word	0x8000003f

080034b4 <LL_ADC_IsEnabled>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <LL_ADC_IsEnabled+0x18>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <LL_ADC_IsEnabled+0x1a>
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_ADC_REG_IsConversionOngoing>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d101      	bne.n	80034f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b0a1      	sub	sp, #132	; 0x84
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800351a:	2302      	movs	r3, #2
 800351c:	e0e7      	b.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003526:	2300      	movs	r3, #0
 8003528:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800352a:	2300      	movs	r3, #0
 800352c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003536:	d102      	bne.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003538:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	e009      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6e      	ldr	r2, [pc, #440]	; (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d102      	bne.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003548:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	e001      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0be      	b.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ffb1 	bl	80034da <LL_ADC_REG_IsConversionOngoing>
 8003578:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ffab 	bl	80034da <LL_ADC_REG_IsConversionOngoing>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 80a0 	bne.w	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800358c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 809c 	bne.w	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800359c:	d004      	beq.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a55      	ldr	r2, [pc, #340]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035a8:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80035aa:	e000      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035ac:	4b56      	ldr	r3, [pc, #344]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80035ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d04b      	beq.n	8003650 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ca:	035b      	lsls	r3, r3, #13
 80035cc:	430b      	orrs	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035dc:	d004      	beq.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a45      	ldr	r2, [pc, #276]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d10f      	bne.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035ec:	f7ff ff62 	bl	80034b4 <LL_ADC_IsEnabled>
 80035f0:	4604      	mov	r4, r0
 80035f2:	4841      	ldr	r0, [pc, #260]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035f4:	f7ff ff5e 	bl	80034b4 <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4323      	orrs	r3, r4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e012      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003608:	483c      	ldr	r0, [pc, #240]	; (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800360a:	f7ff ff53 	bl	80034b4 <LL_ADC_IsEnabled>
 800360e:	4604      	mov	r4, r0
 8003610:	483b      	ldr	r0, [pc, #236]	; (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003612:	f7ff ff4f 	bl	80034b4 <LL_ADC_IsEnabled>
 8003616:	4603      	mov	r3, r0
 8003618:	431c      	orrs	r4, r3
 800361a:	483c      	ldr	r0, [pc, #240]	; (800370c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800361c:	f7ff ff4a 	bl	80034b4 <LL_ADC_IsEnabled>
 8003620:	4603      	mov	r3, r0
 8003622:	4323      	orrs	r3, r4
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d056      	beq.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800363a:	f023 030f 	bic.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	6811      	ldr	r1, [r2, #0]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	430a      	orrs	r2, r1
 8003648:	431a      	orrs	r2, r3
 800364a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800364e:	e047      	b.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003664:	d004      	beq.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10f      	bne.n	8003690 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003674:	f7ff ff1e 	bl	80034b4 <LL_ADC_IsEnabled>
 8003678:	4604      	mov	r4, r0
 800367a:	481f      	ldr	r0, [pc, #124]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800367c:	f7ff ff1a 	bl	80034b4 <LL_ADC_IsEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	4323      	orrs	r3, r4
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e012      	b.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003690:	481a      	ldr	r0, [pc, #104]	; (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003692:	f7ff ff0f 	bl	80034b4 <LL_ADC_IsEnabled>
 8003696:	4604      	mov	r4, r0
 8003698:	4819      	ldr	r0, [pc, #100]	; (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800369a:	f7ff ff0b 	bl	80034b4 <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	431c      	orrs	r4, r3
 80036a2:	481a      	ldr	r0, [pc, #104]	; (800370c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036a4:	f7ff ff06 	bl	80034b4 <LL_ADC_IsEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4323      	orrs	r3, r4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036c2:	f023 030f 	bic.w	r3, r3, #15
 80036c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ca:	e009      	b.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036de:	e000      	b.n	80036e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3784      	adds	r7, #132	; 0x84
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	50000100 	.word	0x50000100
 80036fc:	50000400 	.word	0x50000400
 8003700:	50000500 	.word	0x50000500
 8003704:	50000300 	.word	0x50000300
 8003708:	50000700 	.word	0x50000700
 800370c:	50000600 	.word	0x50000600

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	; (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	; (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387c:	d301      	bcc.n	8003882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387e:	2301      	movs	r3, #1
 8003880:	e00f      	b.n	80038a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <SysTick_Config+0x40>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388a:	210f      	movs	r1, #15
 800388c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003890:	f7ff ff8e 	bl	80037b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <SysTick_Config+0x40>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <SysTick_Config+0x40>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff29 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038d4:	f7ff ff40 	bl	8003758 <__NVIC_GetPriorityGrouping>
 80038d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f7ff ff90 	bl	8003804 <NVIC_EncodePriority>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff5f 	bl	80037b0 <__NVIC_SetPriority>
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff33 	bl	8003774 <__NVIC_EnableIRQ>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ffa4 	bl	800386c <SysTick_Config>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800393e:	e15a      	b.n	8003bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 814c 	beq.w	8003bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d005      	beq.n	8003970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800396c:	2b02      	cmp	r3, #2
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0201 	and.w	r2, r3, #1
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d017      	beq.n	8003a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d123      	bne.n	8003a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	6939      	ldr	r1, [r7, #16]
 8003a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	4a5a      	ldr	r2, [pc, #360]	; (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6613      	str	r3, [r2, #96]	; 0x60
 8003ab0:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003abc:	4a56      	ldr	r2, [pc, #344]	; (8003c18 <HAL_GPIO_Init+0x2e8>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ae6:	d01f      	beq.n	8003b28 <HAL_GPIO_Init+0x1f8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <HAL_GPIO_Init+0x2ec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d019      	beq.n	8003b24 <HAL_GPIO_Init+0x1f4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_GPIO_Init+0x2f0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_GPIO_Init+0x1f0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_GPIO_Init+0x2f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00d      	beq.n	8003b1c <HAL_GPIO_Init+0x1ec>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a49      	ldr	r2, [pc, #292]	; (8003c28 <HAL_GPIO_Init+0x2f8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <HAL_GPIO_Init+0x1e8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a48      	ldr	r2, [pc, #288]	; (8003c2c <HAL_GPIO_Init+0x2fc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_GPIO_Init+0x1e4>
 8003b10:	2305      	movs	r3, #5
 8003b12:	e00a      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b14:	2306      	movs	r3, #6
 8003b16:	e008      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	e006      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e004      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e002      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	f002 0203 	and.w	r2, r2, #3
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	4093      	lsls	r3, r2
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b3a:	4937      	ldr	r1, [pc, #220]	; (8003c18 <HAL_GPIO_Init+0x2e8>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b6c:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b72:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b96:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae9d 	bne.w	8003940 <HAL_GPIO_Init+0x10>
  }
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	48000400 	.word	0x48000400
 8003c20:	48000800 	.word	0x48000800
 8003c24:	48000c00 	.word	0x48000c00
 8003c28:	48001000 	.word	0x48001000
 8003c2c:	48001400 	.word	0x48001400
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
 8003c40:	4613      	mov	r3, r2
 8003c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c44:	787b      	ldrb	r3, [r7, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fe00 	bl	8001888 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40010400 	.word	0x40010400

08003c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d141      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cae:	d131      	bne.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb0:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb6:	4a46      	ldr	r2, [pc, #280]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cc8:	4a41      	ldr	r2, [pc, #260]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd0:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2232      	movs	r2, #50	; 0x32
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	4a3f      	ldr	r2, [pc, #252]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce6:	e002      	b.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cee:	4b38      	ldr	r3, [pc, #224]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d102      	bne.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f2      	bne.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d158      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e057      	b.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d24:	e04d      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2c:	d141      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3a:	d131      	bne.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d42:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2232      	movs	r2, #50	; 0x32
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	0c9b      	lsrs	r3, r3, #18
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d72:	e002      	b.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d102      	bne.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f2      	bne.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d112      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e011      	b.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003db0:	e007      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	2000007c 	.word	0x2000007c
 8003dd8:	431bde83 	.word	0x431bde83

08003ddc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dea:	6093      	str	r3, [r2, #8]
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e306      	b.n	800441c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d075      	beq.n	8003f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e24:	4b94      	ldr	r3, [pc, #592]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3e>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d002      	beq.n	8003e40 <HAL_RCC_OscConfig+0x44>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x108>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d157      	bne.n	8003f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e2e1      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x74>
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a84      	ldr	r2, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e01d      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x98>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e94:	4b78      	ldr	r3, [pc, #480]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a77      	ldr	r2, [pc, #476]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f844 	bl	8001f40 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f840 	bl	8001f40 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e2a6      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0xc0>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe f830 	bl	8001f40 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f82c 	bl	8001f40 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e292      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef6:	4b60      	ldr	r3, [pc, #384]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xe8>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d075      	beq.n	8003ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	4b56      	ldr	r3, [pc, #344]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCC_OscConfig+0x136>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_OscConfig+0x13c>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11f      	bne.n	8003f78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_OscConfig+0x154>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e265      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	4946      	ldr	r1, [pc, #280]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd ff9d 	bl	8001ea8 <HAL_InitTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d043      	beq.n	8003ffc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e251      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d023      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f80:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3c      	ldr	r2, [pc, #240]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd ffd8 	bl	8001f40 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fd ffd4 	bl	8001f40 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e23a      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa6:	4b34      	ldr	r3, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	492d      	ldr	r1, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
 8003fc6:	e01a      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd ffb4 	bl	8001f40 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7fd ffb0 	bl	8001f40 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e216      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1e0>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d041      	beq.n	800408e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004012:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd ff8d 	bl	8001f40 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402a:	f7fd ff89 	bl	8001f40 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1ef      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ef      	beq.n	800402a <HAL_RCC_OscConfig+0x22e>
 800404a:	e020      	b.n	800408e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd ff70 	bl	8001f40 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004062:	e00d      	b.n	8004080 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004064:	f7fd ff6c 	bl	8001f40 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d906      	bls.n	8004080 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e1d2      	b.n	800441c <HAL_RCC_OscConfig+0x620>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	20000080 	.word	0x20000080
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004080:	4b8c      	ldr	r3, [pc, #560]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ea      	bne.n	8004064 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80a6 	beq.w	80041e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a0:	4b84      	ldr	r3, [pc, #528]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2b4>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x2b6>
 80040b0:	2300      	movs	r3, #0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	4b7f      	ldr	r3, [pc, #508]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	4a7e      	ldr	r2, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6593      	str	r3, [r2, #88]	; 0x58
 80040c2:	4b7c      	ldr	r3, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040ce:	2301      	movs	r3, #1
 80040d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d2:	4b79      	ldr	r3, [pc, #484]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d118      	bne.n	8004110 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040de:	4b76      	ldr	r3, [pc, #472]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ea:	f7fd ff29 	bl	8001f40 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f2:	f7fd ff25 	bl	8001f40 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e18b      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004104:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d108      	bne.n	800412a <HAL_RCC_OscConfig+0x32e>
 8004118:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a65      	ldr	r2, [pc, #404]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004128:	e024      	b.n	8004174 <HAL_RCC_OscConfig+0x378>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d110      	bne.n	8004154 <HAL_RCC_OscConfig+0x358>
 8004132:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	4a5e      	ldr	r2, [pc, #376]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004142:	4b5c      	ldr	r3, [pc, #368]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004152:	e00f      	b.n	8004174 <HAL_RCC_OscConfig+0x378>
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a56      	ldr	r2, [pc, #344]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d016      	beq.n	80041aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fee0 	bl	8001f40 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd fedc 	bl	8001f40 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e140      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ed      	beq.n	8004184 <HAL_RCC_OscConfig+0x388>
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fd fec9 	bl	8001f40 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd fec5 	bl	8001f40 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e129      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1ed      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	4a34      	ldr	r2, [pc, #208]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d03c      	beq.n	800426e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01c      	beq.n	8004236 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004202:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fe98 	bl	8001f40 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004214:	f7fd fe94 	bl	8001f40 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0fa      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ef      	beq.n	8004214 <HAL_RCC_OscConfig+0x418>
 8004234:	e01b      	b.n	800426e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fd fe7b 	bl	8001f40 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424e:	f7fd fe77 	bl	8001f40 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0dd      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ef      	bne.n	800424e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80d1 	beq.w	800441a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b0c      	cmp	r3, #12
 8004282:	f000 808b 	beq.w	800439c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d15e      	bne.n	800434c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fd fe51 	bl	8001f40 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a0:	e00c      	b.n	80042bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fd fe4d 	bl	8001f40 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d905      	bls.n	80042bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0b3      	b.n	800441c <HAL_RCC_OscConfig+0x620>
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ec      	bne.n	80042a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <HAL_RCC_OscConfig+0x62c>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6a11      	ldr	r1, [r2, #32]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042d8:	3a01      	subs	r2, #1
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042e2:	0212      	lsls	r2, r2, #8
 80042e4:	4311      	orrs	r1, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042ea:	0852      	lsrs	r2, r2, #1
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0552      	lsls	r2, r2, #21
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f6:	0852      	lsrs	r2, r2, #1
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0652      	lsls	r2, r2, #25
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004302:	06d2      	lsls	r2, r2, #27
 8004304:	430a      	orrs	r2, r1
 8004306:	4947      	ldr	r1, [pc, #284]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004308:	4313      	orrs	r3, r2
 800430a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430c:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a44      	ldr	r2, [pc, #272]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a41      	ldr	r2, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fe0c 	bl	8001f40 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd fe08 	bl	8001f40 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e06e      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x530>
 800434a:	e066      	b.n	800441a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a34      	ldr	r2, [pc, #208]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004356:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a31      	ldr	r2, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a2e      	ldr	r2, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800436a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fde4 	bl	8001f40 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd fde0 	bl	8001f40 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e046      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x580>
 800439a:	e03e      	b.n	800441a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e039      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0203 	and.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d12c      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d123      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11b      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d113      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d109      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	019f800c 	.word	0x019f800c

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e11e      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b91      	ldr	r3, [pc, #580]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d910      	bls.n	8004474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b8e      	ldr	r3, [pc, #568]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 020f 	bic.w	r2, r3, #15
 800445a:	498c      	ldr	r1, [pc, #560]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b8a      	ldr	r3, [pc, #552]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e106      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d073      	beq.n	8004568 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d129      	bne.n	80044dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004488:	4b81      	ldr	r3, [pc, #516]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0f4      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004498:	f000 f99e 	bl	80047d8 <RCC_GetSysClockFreqFromPLLSource>
 800449c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4a7c      	ldr	r2, [pc, #496]	; (8004694 <HAL_RCC_ClockConfig+0x268>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d93f      	bls.n	8004526 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044a6:	4b7a      	ldr	r3, [pc, #488]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d033      	beq.n	8004526 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d12f      	bne.n	8004526 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044c6:	4b72      	ldr	r3, [pc, #456]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ce:	4a70      	ldr	r2, [pc, #448]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e024      	b.n	8004526 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e4:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0c6      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	4b66      	ldr	r3, [pc, #408]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0be      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004504:	f000 f8ce 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4a61      	ldr	r2, [pc, #388]	; (8004694 <HAL_RCC_ClockConfig+0x268>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d909      	bls.n	8004526 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004512:	4b5f      	ldr	r3, [pc, #380]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451a:	4a5d      	ldr	r2, [pc, #372]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004526:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4957      	ldr	r1, [pc, #348]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004538:	f7fd fd02 	bl	8001f40 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	e00a      	b.n	8004556 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004540:	f7fd fcfe 	bl	8001f40 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e095      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 020c 	and.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	429a      	cmp	r2, r3
 8004566:	d1eb      	bne.n	8004540 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d023      	beq.n	80045bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b43      	ldr	r3, [pc, #268]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a42      	ldr	r2, [pc, #264]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800458a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004598:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045a0:	4a3b      	ldr	r2, [pc, #236]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4936      	ldr	r1, [pc, #216]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
 80045ba:	e008      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d105      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c2:	4b33      	ldr	r3, [pc, #204]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4a32      	ldr	r2, [pc, #200]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ce:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d21d      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 020f 	bic.w	r2, r3, #15
 80045e4:	4929      	ldr	r1, [pc, #164]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045ec:	f7fd fca8 	bl	8001f40 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fd fca4 	bl	8001f40 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e03b      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d1ed      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4917      	ldr	r1, [pc, #92]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	490f      	ldr	r1, [pc, #60]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004656:	f000 f825 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 800465a:	4602      	mov	r2, r0
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	490c      	ldr	r1, [pc, #48]	; (8004698 <HAL_RCC_ClockConfig+0x26c>)
 8004668:	5ccb      	ldrb	r3, [r1, r3]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a0a      	ldr	r2, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x270>)
 8004674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x274>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd fc14 	bl	8001ea8 <HAL_InitTick>
 8004680:	4603      	mov	r3, r0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40022000 	.word	0x40022000
 8004690:	40021000 	.word	0x40021000
 8004694:	04c4b400 	.word	0x04c4b400
 8004698:	08008fb8 	.word	0x08008fb8
 800469c:	2000007c 	.word	0x2000007c
 80046a0:	20000080 	.word	0x20000080

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046aa:	4b2c      	ldr	r3, [pc, #176]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d102      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e047      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d102      	bne.n	80046ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e03e      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d136      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3301      	adds	r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d10c      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004702:	68d2      	ldr	r2, [r2, #12]
 8004704:	0a12      	lsrs	r2, r2, #8
 8004706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
      break;
 8004710:	e00c      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	0a12      	lsrs	r2, r2, #8
 8004720:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
      break;
 800472a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0e5b      	lsrs	r3, r3, #25
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	3301      	adds	r3, #1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e001      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800474c:	693b      	ldr	r3, [r7, #16]
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	00f42400 	.word	0x00f42400
 8004764:	016e3600 	.word	0x016e3600

08004768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_GetHCLKFreq+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2000007c 	.word	0x2000007c

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004784:	f7ff fff0 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	08008fc8 	.word	0x08008fc8

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b0:	f7ff ffda 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0adb      	lsrs	r3, r3, #11
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4904      	ldr	r1, [pc, #16]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	08008fc8 	.word	0x08008fc8

080047d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047de:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e8:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d10c      	bne.n	8004816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047fc:	4a17      	ldr	r2, [pc, #92]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004806:	68d2      	ldr	r2, [r2, #12]
 8004808:	0a12      	lsrs	r2, r2, #8
 800480a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	617b      	str	r3, [r7, #20]
    break;
 8004814:	e00c      	b.n	8004830 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	0a12      	lsrs	r2, r2, #8
 8004824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    break;
 800482e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0e5b      	lsrs	r3, r3, #25
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800484a:	687b      	ldr	r3, [r7, #4]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40021000 	.word	0x40021000
 800485c:	016e3600 	.word	0x016e3600
 8004860:	00f42400 	.word	0x00f42400

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800486c:	2300      	movs	r3, #0
 800486e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004870:	2300      	movs	r3, #0
 8004872:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8098 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b43      	ldr	r3, [pc, #268]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b40      	ldr	r3, [pc, #256]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	4a3f      	ldr	r2, [pc, #252]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6593      	str	r3, [r2, #88]	; 0x58
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048aa:	2301      	movs	r3, #1
 80048ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ae:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a39      	ldr	r2, [pc, #228]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ba:	f7fd fb41 	bl	8001f40 <HAL_GetTick>
 80048be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c0:	e009      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fd fb3d 	bl	8001f40 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d902      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	74fb      	strb	r3, [r7, #19]
        break;
 80048d4:	e005      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ef      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d159      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01e      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	d019      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004904:	4b23      	ldr	r3, [pc, #140]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004920:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fd fafd 	bl	8001f40 <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004948:	e00b      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fd faf9 	bl	8001f40 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d902      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	74fb      	strb	r3, [r7, #19]
            break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ec      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800498c:	e008      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	74bb      	strb	r3, [r7, #18]
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a0:	7c7b      	ldrb	r3, [r7, #17]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4ba7      	ldr	r3, [pc, #668]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	4aa6      	ldr	r2, [pc, #664]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049be:	4ba1      	ldr	r3, [pc, #644]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f023 0203 	bic.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	499d      	ldr	r1, [pc, #628]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e0:	4b98      	ldr	r3, [pc, #608]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f023 020c 	bic.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4995      	ldr	r1, [pc, #596]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a02:	4b90      	ldr	r3, [pc, #576]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	498c      	ldr	r1, [pc, #560]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a24:	4b87      	ldr	r3, [pc, #540]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	4984      	ldr	r1, [pc, #528]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a46:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	497b      	ldr	r1, [pc, #492]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a68:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	4973      	ldr	r1, [pc, #460]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8a:	4b6e      	ldr	r3, [pc, #440]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	496a      	ldr	r1, [pc, #424]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aac:	4b65      	ldr	r3, [pc, #404]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4962      	ldr	r1, [pc, #392]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4959      	ldr	r1, [pc, #356]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af0:	4b54      	ldr	r3, [pc, #336]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	4951      	ldr	r1, [pc, #324]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b12:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4948      	ldr	r1, [pc, #288]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b34:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4940      	ldr	r1, [pc, #256]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b54:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a3a      	ldr	r2, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	4932      	ldr	r1, [pc, #200]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	4924      	ldr	r1, [pc, #144]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bdc:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	4916      	ldr	r1, [pc, #88]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a10      	ldr	r2, [pc, #64]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d019      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c32:	d109      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a02      	ldr	r2, [pc, #8]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3e:	60d3      	str	r3, [r2, #12]
 8004c40:	e002      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c54:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	4926      	ldr	r1, [pc, #152]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c74:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a20      	ldr	r2, [pc, #128]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d015      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	4918      	ldr	r1, [pc, #96]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000

08004d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e049      	b.n	8004da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc ff1c 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 fa56 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e054      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d01d      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d115      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_TIM_Base_Start_IT+0xec>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d015      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d011      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40015000 	.word	0x40015000
 8004e9c:	00010007 	.word	0x00010007

08004ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d122      	bne.n	8004efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d11b      	bne.n	8004efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0202 	mvn.w	r2, #2
 8004ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f965 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f957 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f968 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d122      	bne.n	8004f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0204 	mvn.w	r2, #4
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f93b 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f92d 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f93e 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d122      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0208 	mvn.w	r2, #8
 8004f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f911 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f90:	e005      	b.n	8004f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f903 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f914 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d122      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0210 	mvn.w	r2, #16
 8004fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f8e7 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8d9 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8ea 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d107      	bne.n	8005024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0201 	mvn.w	r2, #1
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fc4a 	bl	80018b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f982 	bl	8005354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d10e      	bne.n	800507e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d107      	bne.n	800507e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f975 	bl	8005368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d10e      	bne.n	80050aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d107      	bne.n	80050aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f898 	bl	80051da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d10e      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0220 	mvn.w	r2, #32
 80050ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f935 	bl	8005340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e4:	d10f      	bne.n	8005106 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f4:	d107      	bne.n	8005106 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f93b 	bl	800537c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005114:	d10f      	bne.n	8005136 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005124:	d107      	bne.n	8005136 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f92d 	bl	8005390 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d10f      	bne.n	8005166 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005154:	d107      	bne.n	8005166 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f91f 	bl	80053a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005174:	d10f      	bne.n	8005196 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005184:	d107      	bne.n	8005196 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800518e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f911 	bl	80053b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a46      	ldr	r2, [pc, #280]	; (800531c <TIM_Base_SetConfig+0x12c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d017      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d013      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a43      	ldr	r2, [pc, #268]	; (8005320 <TIM_Base_SetConfig+0x130>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00f      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a42      	ldr	r2, [pc, #264]	; (8005324 <TIM_Base_SetConfig+0x134>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00b      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a41      	ldr	r2, [pc, #260]	; (8005328 <TIM_Base_SetConfig+0x138>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a40      	ldr	r2, [pc, #256]	; (800532c <TIM_Base_SetConfig+0x13c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a3f      	ldr	r2, [pc, #252]	; (8005330 <TIM_Base_SetConfig+0x140>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a33      	ldr	r2, [pc, #204]	; (800531c <TIM_Base_SetConfig+0x12c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d023      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d01f      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a30      	ldr	r2, [pc, #192]	; (8005320 <TIM_Base_SetConfig+0x130>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01b      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <TIM_Base_SetConfig+0x134>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d017      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2e      	ldr	r2, [pc, #184]	; (8005328 <TIM_Base_SetConfig+0x138>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2d      	ldr	r2, [pc, #180]	; (800532c <TIM_Base_SetConfig+0x13c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <TIM_Base_SetConfig+0x144>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <TIM_Base_SetConfig+0x148>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2b      	ldr	r2, [pc, #172]	; (800533c <TIM_Base_SetConfig+0x14c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a26      	ldr	r2, [pc, #152]	; (8005330 <TIM_Base_SetConfig+0x140>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d108      	bne.n	80052ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <TIM_Base_SetConfig+0x12c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a14      	ldr	r2, [pc, #80]	; (800532c <TIM_Base_SetConfig+0x13c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00f      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a14      	ldr	r2, [pc, #80]	; (8005334 <TIM_Base_SetConfig+0x144>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a13      	ldr	r2, [pc, #76]	; (8005338 <TIM_Base_SetConfig+0x148>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a12      	ldr	r2, [pc, #72]	; (800533c <TIM_Base_SetConfig+0x14c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <TIM_Base_SetConfig+0x140>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d103      	bne.n	8005308 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	615a      	str	r2, [r3, #20]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40013400 	.word	0x40013400
 8005330:	40015000 	.word	0x40015000
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e042      	b.n	8005464 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fc fb5f 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2224      	movs	r2, #36	; 0x24
 80053fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8c2 	bl	8005598 <UART_SetConfig>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e022      	b.n	8005464 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fbb2 	bl	8005b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800543a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fc39 	bl	8005cd4 <UART_CheckIdleState>
 8005462:	4603      	mov	r3, r0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005482:	2b20      	cmp	r3, #32
 8005484:	f040 8083 	bne.w	800558e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_UART_Transmit+0x28>
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e07b      	b.n	8005590 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Transmit+0x3a>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e074      	b.n	8005590 <HAL_UART_Transmit+0x124>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2221      	movs	r2, #33	; 0x21
 80054ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054be:	f7fc fd3f 	bl	8001f40 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d108      	bne.n	80054f0 <HAL_UART_Transmit+0x84>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e003      	b.n	80054f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005500:	e02c      	b.n	800555c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fc2c 	bl	8005d6a <UART_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e039      	b.n	8005590 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005530:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	3302      	adds	r3, #2
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	e007      	b.n	800554a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	3301      	adds	r3, #1
 8005548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1cc      	bne.n	8005502 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2200      	movs	r2, #0
 8005570:	2140      	movs	r1, #64	; 0x40
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fbf9 	bl	8005d6a <UART_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e006      	b.n	8005590 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e000      	b.n	8005590 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
  }
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800559c:	b08c      	sub	sp, #48	; 0x30
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	4313      	orrs	r3, r2
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4baa      	ldr	r3, [pc, #680]	; (8005870 <UART_SetConfig+0x2d8>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a9f      	ldr	r2, [pc, #636]	; (8005874 <UART_SetConfig+0x2dc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005600:	4313      	orrs	r3, r2
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800560e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005618:	430b      	orrs	r3, r1
 800561a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	f023 010f 	bic.w	r1, r3, #15
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a90      	ldr	r2, [pc, #576]	; (8005878 <UART_SetConfig+0x2e0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d125      	bne.n	8005688 <UART_SetConfig+0xf0>
 800563c:	4b8f      	ldr	r3, [pc, #572]	; (800587c <UART_SetConfig+0x2e4>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b03      	cmp	r3, #3
 8005648:	d81a      	bhi.n	8005680 <UART_SetConfig+0xe8>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0xb8>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005661 	.word	0x08005661
 8005654:	08005671 	.word	0x08005671
 8005658:	08005669 	.word	0x08005669
 800565c:	08005679 	.word	0x08005679
 8005660:	2301      	movs	r3, #1
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005666:	e116      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005668:	2302      	movs	r3, #2
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566e:	e112      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005676:	e10e      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567e:	e10a      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e106      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a7c      	ldr	r2, [pc, #496]	; (8005880 <UART_SetConfig+0x2e8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d138      	bne.n	8005704 <UART_SetConfig+0x16c>
 8005692:	4b7a      	ldr	r3, [pc, #488]	; (800587c <UART_SetConfig+0x2e4>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d82d      	bhi.n	80056fc <UART_SetConfig+0x164>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x110>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	080056fd 	.word	0x080056fd
 80056b4:	080056fd 	.word	0x080056fd
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	080056fd 	.word	0x080056fd
 80056c0:	080056fd 	.word	0x080056fd
 80056c4:	080056fd 	.word	0x080056fd
 80056c8:	080056e5 	.word	0x080056e5
 80056cc:	080056fd 	.word	0x080056fd
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e2:	e0d8      	b.n	8005896 <UART_SetConfig+0x2fe>
 80056e4:	2302      	movs	r3, #2
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ea:	e0d4      	b.n	8005896 <UART_SetConfig+0x2fe>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f2:	e0d0      	b.n	8005896 <UART_SetConfig+0x2fe>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fa:	e0cc      	b.n	8005896 <UART_SetConfig+0x2fe>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005702:	e0c8      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a5e      	ldr	r2, [pc, #376]	; (8005884 <UART_SetConfig+0x2ec>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d125      	bne.n	800575a <UART_SetConfig+0x1c2>
 800570e:	4b5b      	ldr	r3, [pc, #364]	; (800587c <UART_SetConfig+0x2e4>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d016      	beq.n	800574a <UART_SetConfig+0x1b2>
 800571c:	2b30      	cmp	r3, #48	; 0x30
 800571e:	d818      	bhi.n	8005752 <UART_SetConfig+0x1ba>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d00a      	beq.n	800573a <UART_SetConfig+0x1a2>
 8005724:	2b20      	cmp	r3, #32
 8005726:	d814      	bhi.n	8005752 <UART_SetConfig+0x1ba>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <UART_SetConfig+0x19a>
 800572c:	2b10      	cmp	r3, #16
 800572e:	d008      	beq.n	8005742 <UART_SetConfig+0x1aa>
 8005730:	e00f      	b.n	8005752 <UART_SetConfig+0x1ba>
 8005732:	2300      	movs	r3, #0
 8005734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005738:	e0ad      	b.n	8005896 <UART_SetConfig+0x2fe>
 800573a:	2302      	movs	r3, #2
 800573c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005740:	e0a9      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005742:	2304      	movs	r3, #4
 8005744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005748:	e0a5      	b.n	8005896 <UART_SetConfig+0x2fe>
 800574a:	2308      	movs	r3, #8
 800574c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005750:	e0a1      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005752:	2310      	movs	r3, #16
 8005754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005758:	e09d      	b.n	8005896 <UART_SetConfig+0x2fe>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4a      	ldr	r2, [pc, #296]	; (8005888 <UART_SetConfig+0x2f0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d125      	bne.n	80057b0 <UART_SetConfig+0x218>
 8005764:	4b45      	ldr	r3, [pc, #276]	; (800587c <UART_SetConfig+0x2e4>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800576e:	2bc0      	cmp	r3, #192	; 0xc0
 8005770:	d016      	beq.n	80057a0 <UART_SetConfig+0x208>
 8005772:	2bc0      	cmp	r3, #192	; 0xc0
 8005774:	d818      	bhi.n	80057a8 <UART_SetConfig+0x210>
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d00a      	beq.n	8005790 <UART_SetConfig+0x1f8>
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d814      	bhi.n	80057a8 <UART_SetConfig+0x210>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <UART_SetConfig+0x1f0>
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d008      	beq.n	8005798 <UART_SetConfig+0x200>
 8005786:	e00f      	b.n	80057a8 <UART_SetConfig+0x210>
 8005788:	2300      	movs	r3, #0
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578e:	e082      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005790:	2302      	movs	r3, #2
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e07e      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005798:	2304      	movs	r3, #4
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e07a      	b.n	8005896 <UART_SetConfig+0x2fe>
 80057a0:	2308      	movs	r3, #8
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e076      	b.n	8005896 <UART_SetConfig+0x2fe>
 80057a8:	2310      	movs	r3, #16
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e072      	b.n	8005896 <UART_SetConfig+0x2fe>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a35      	ldr	r2, [pc, #212]	; (800588c <UART_SetConfig+0x2f4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d12a      	bne.n	8005810 <UART_SetConfig+0x278>
 80057ba:	4b30      	ldr	r3, [pc, #192]	; (800587c <UART_SetConfig+0x2e4>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c8:	d01a      	beq.n	8005800 <UART_SetConfig+0x268>
 80057ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ce:	d81b      	bhi.n	8005808 <UART_SetConfig+0x270>
 80057d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d4:	d00c      	beq.n	80057f0 <UART_SetConfig+0x258>
 80057d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057da:	d815      	bhi.n	8005808 <UART_SetConfig+0x270>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <UART_SetConfig+0x250>
 80057e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e4:	d008      	beq.n	80057f8 <UART_SetConfig+0x260>
 80057e6:	e00f      	b.n	8005808 <UART_SetConfig+0x270>
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e052      	b.n	8005896 <UART_SetConfig+0x2fe>
 80057f0:	2302      	movs	r3, #2
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f6:	e04e      	b.n	8005896 <UART_SetConfig+0x2fe>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e04a      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005806:	e046      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580e:	e042      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <UART_SetConfig+0x2dc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d13a      	bne.n	8005890 <UART_SetConfig+0x2f8>
 800581a:	4b18      	ldr	r3, [pc, #96]	; (800587c <UART_SetConfig+0x2e4>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005828:	d01a      	beq.n	8005860 <UART_SetConfig+0x2c8>
 800582a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800582e:	d81b      	bhi.n	8005868 <UART_SetConfig+0x2d0>
 8005830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005834:	d00c      	beq.n	8005850 <UART_SetConfig+0x2b8>
 8005836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583a:	d815      	bhi.n	8005868 <UART_SetConfig+0x2d0>
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <UART_SetConfig+0x2b0>
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005844:	d008      	beq.n	8005858 <UART_SetConfig+0x2c0>
 8005846:	e00f      	b.n	8005868 <UART_SetConfig+0x2d0>
 8005848:	2300      	movs	r3, #0
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584e:	e022      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005850:	2302      	movs	r3, #2
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005856:	e01e      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005858:	2304      	movs	r3, #4
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e01a      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005860:	2308      	movs	r3, #8
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e016      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005868:	2310      	movs	r3, #16
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e012      	b.n	8005896 <UART_SetConfig+0x2fe>
 8005870:	cfff69f3 	.word	0xcfff69f3
 8005874:	40008000 	.word	0x40008000
 8005878:	40013800 	.word	0x40013800
 800587c:	40021000 	.word	0x40021000
 8005880:	40004400 	.word	0x40004400
 8005884:	40004800 	.word	0x40004800
 8005888:	40004c00 	.word	0x40004c00
 800588c:	40005000 	.word	0x40005000
 8005890:	2310      	movs	r3, #16
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4aae      	ldr	r2, [pc, #696]	; (8005b54 <UART_SetConfig+0x5bc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	f040 8097 	bne.w	80059d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d823      	bhi.n	80058f2 <UART_SetConfig+0x35a>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0x318>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058f3 	.word	0x080058f3
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058e3 	.word	0x080058e3
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058f3 	.word	0x080058f3
 80058cc:	080058f3 	.word	0x080058f3
 80058d0:	080058eb 	.word	0x080058eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fe ff54 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 80058d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058da:	e010      	b.n	80058fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b9e      	ldr	r3, [pc, #632]	; (8005b58 <UART_SetConfig+0x5c0>)
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058e0:	e00d      	b.n	80058fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fe fedf 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058e8:	e009      	b.n	80058fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058f0:	e005      	b.n	80058fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8130 	beq.w	8005b66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4a94      	ldr	r2, [pc, #592]	; (8005b5c <UART_SetConfig+0x5c4>)
 800590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005910:	461a      	mov	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	fbb3 f3f2 	udiv	r3, r3, r2
 8005918:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d305      	bcc.n	8005936 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	429a      	cmp	r2, r3
 8005934:	d903      	bls.n	800593e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800593c:	e113      	b.n	8005b66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	2200      	movs	r2, #0
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	60fa      	str	r2, [r7, #12]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	4a84      	ldr	r2, [pc, #528]	; (8005b5c <UART_SetConfig+0x5c4>)
 800594c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005950:	b29b      	uxth	r3, r3
 8005952:	2200      	movs	r2, #0
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800595c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005960:	f7fb f99a 	bl	8000c98 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	020b      	lsls	r3, r1, #8
 8005976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800597a:	0202      	lsls	r2, r0, #8
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	6849      	ldr	r1, [r1, #4]
 8005980:	0849      	lsrs	r1, r1, #1
 8005982:	2000      	movs	r0, #0
 8005984:	460c      	mov	r4, r1
 8005986:	4605      	mov	r5, r0
 8005988:	eb12 0804 	adds.w	r8, r2, r4
 800598c:	eb43 0905 	adc.w	r9, r3, r5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	469a      	mov	sl, r3
 8005998:	4693      	mov	fp, r2
 800599a:	4652      	mov	r2, sl
 800599c:	465b      	mov	r3, fp
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fb f979 	bl	8000c98 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4613      	mov	r3, r2
 80059ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b4:	d308      	bcc.n	80059c8 <UART_SetConfig+0x430>
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059bc:	d204      	bcs.n	80059c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a3a      	ldr	r2, [r7, #32]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e0ce      	b.n	8005b66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059ce:	e0ca      	b.n	8005b66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	d166      	bne.n	8005aa8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d827      	bhi.n	8005a32 <UART_SetConfig+0x49a>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x450>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe feb8 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a12:	e014      	b.n	8005a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe feca 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a1a:	e010      	b.n	8005a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b4e      	ldr	r3, [pc, #312]	; (8005b58 <UART_SetConfig+0x5c0>)
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe fe3f 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a28:	e009      	b.n	8005a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a30:	e005      	b.n	8005a3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8090 	beq.w	8005b66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	4a44      	ldr	r2, [pc, #272]	; (8005b5c <UART_SetConfig+0x5c4>)
 8005a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	2b0f      	cmp	r3, #15
 8005a70:	d916      	bls.n	8005aa0 <UART_SetConfig+0x508>
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d212      	bcs.n	8005aa0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f023 030f 	bic.w	r3, r3, #15
 8005a82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	8bfb      	ldrh	r3, [r7, #30]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	8bfa      	ldrh	r2, [r7, #30]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	e062      	b.n	8005b66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005aa6:	e05e      	b.n	8005b66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d828      	bhi.n	8005b02 <UART_SetConfig+0x56a>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x520>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005add 	.word	0x08005add
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005aed 	.word	0x08005aed
 8005ac4:	08005b03 	.word	0x08005b03
 8005ac8:	08005af3 	.word	0x08005af3
 8005acc:	08005b03 	.word	0x08005b03
 8005ad0:	08005b03 	.word	0x08005b03
 8005ad4:	08005b03 	.word	0x08005b03
 8005ad8:	08005afb 	.word	0x08005afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005adc:	f7fe fe50 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae2:	e014      	b.n	8005b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fe fe62 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aea:	e010      	b.n	8005b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aec:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <UART_SetConfig+0x5c0>)
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005af0:	e00d      	b.n	8005b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af2:	f7fe fdd7 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8005af6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005af8:	e009      	b.n	8005b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b00:	e005      	b.n	8005b0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d028      	beq.n	8005b66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	4a10      	ldr	r2, [pc, #64]	; (8005b5c <UART_SetConfig+0x5c4>)
 8005b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	441a      	add	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d910      	bls.n	8005b60 <UART_SetConfig+0x5c8>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d20c      	bcs.n	8005b60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	e009      	b.n	8005b66 <UART_SetConfig+0x5ce>
 8005b52:	bf00      	nop
 8005b54:	40008000 	.word	0x40008000
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	08008fd0 	.word	0x08008fd0
      }
      else
      {
        ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3730      	adds	r7, #48	; 0x30
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8e:	d10a      	bne.n	8005ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce4:	f7fc f92c 	bl	8001f40 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d10e      	bne.n	8005d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f82f 	bl	8005d6a <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e025      	b.n	8005d62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d10e      	bne.n	8005d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f819 	bl	8005d6a <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e00f      	b.n	8005d62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b09c      	sub	sp, #112	; 0x70
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	603b      	str	r3, [r7, #0]
 8005d76:	4613      	mov	r3, r2
 8005d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7a:	e0a9      	b.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d82:	f000 80a5 	beq.w	8005ed0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fc f8db 	bl	8001f40 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d140      	bne.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005db0:	667b      	str	r3, [r7, #100]	; 0x64
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e6      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	663b      	str	r3, [r7, #96]	; 0x60
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e069      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d051      	beq.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3a:	d149      	bne.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
 8005e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e6      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	613b      	str	r3, [r7, #16]
   return(result);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e98:	623a      	str	r2, [r7, #32]
 8005e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e010      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69da      	ldr	r2, [r3, #28]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	f43f af46 	beq.w	8005d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3770      	adds	r7, #112	; 0x70
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e027      	b.n	8005f60 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2224      	movs	r2, #36	; 0x24
 8005f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e02d      	b.n	8005fe0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	; 0x24
 8005f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f84f 	bl	8006064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e02d      	b.n	800605c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	; 0x24
 800600c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f811 	bl	8006064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006070:	2b00      	cmp	r3, #0
 8006072:	d108      	bne.n	8006086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006084:	e031      	b.n	80060ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006086:	2308      	movs	r3, #8
 8006088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800608a:	2308      	movs	r3, #8
 800608c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	0e5b      	lsrs	r3, r3, #25
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	0f5b      	lsrs	r3, r3, #29
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	7b3a      	ldrb	r2, [r7, #12]
 80060b2:	4911      	ldr	r1, [pc, #68]	; (80060f8 <UARTEx_SetNbDataToProcess+0x94>)
 80060b4:	5c8a      	ldrb	r2, [r1, r2]
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060ba:	7b3a      	ldrb	r2, [r7, #12]
 80060bc:	490f      	ldr	r1, [pc, #60]	; (80060fc <UARTEx_SetNbDataToProcess+0x98>)
 80060be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	7b7a      	ldrb	r2, [r7, #13]
 80060d0:	4909      	ldr	r1, [pc, #36]	; (80060f8 <UARTEx_SetNbDataToProcess+0x94>)
 80060d2:	5c8a      	ldrb	r2, [r1, r2]
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060d8:	7b7a      	ldrb	r2, [r7, #13]
 80060da:	4908      	ldr	r1, [pc, #32]	; (80060fc <UARTEx_SetNbDataToProcess+0x98>)
 80060dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060de:	fb93 f3f2 	sdiv	r3, r3, r2
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060ea:	bf00      	nop
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	08008fe8 	.word	0x08008fe8
 80060fc:	08008ff0 	.word	0x08008ff0

08006100 <__errno>:
 8006100:	4b01      	ldr	r3, [pc, #4]	; (8006108 <__errno+0x8>)
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000088 	.word	0x20000088

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4d0d      	ldr	r5, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2600      	movs	r6, #0
 8006118:	42a6      	cmp	r6, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4d0b      	ldr	r5, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f002 ff02 	bl	8008f28 <_init>
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2600      	movs	r6, #0
 800612a:	42a6      	cmp	r6, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f855 3b04 	ldr.w	r3, [r5], #4
 8006134:	4798      	blx	r3
 8006136:	3601      	adds	r6, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f855 3b04 	ldr.w	r3, [r5], #4
 800613e:	4798      	blx	r3
 8006140:	3601      	adds	r6, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	080093dc 	.word	0x080093dc
 8006148:	080093dc 	.word	0x080093dc
 800614c:	080093dc 	.word	0x080093dc
 8006150:	080093e0 	.word	0x080093e0

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <__cvt>:
 8006164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	ec55 4b10 	vmov	r4, r5, d0
 800616c:	2d00      	cmp	r5, #0
 800616e:	460e      	mov	r6, r1
 8006170:	4619      	mov	r1, r3
 8006172:	462b      	mov	r3, r5
 8006174:	bfbb      	ittet	lt
 8006176:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800617a:	461d      	movlt	r5, r3
 800617c:	2300      	movge	r3, #0
 800617e:	232d      	movlt	r3, #45	; 0x2d
 8006180:	700b      	strb	r3, [r1, #0]
 8006182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006184:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006188:	4691      	mov	r9, r2
 800618a:	f023 0820 	bic.w	r8, r3, #32
 800618e:	bfbc      	itt	lt
 8006190:	4622      	movlt	r2, r4
 8006192:	4614      	movlt	r4, r2
 8006194:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006198:	d005      	beq.n	80061a6 <__cvt+0x42>
 800619a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800619e:	d100      	bne.n	80061a2 <__cvt+0x3e>
 80061a0:	3601      	adds	r6, #1
 80061a2:	2102      	movs	r1, #2
 80061a4:	e000      	b.n	80061a8 <__cvt+0x44>
 80061a6:	2103      	movs	r1, #3
 80061a8:	ab03      	add	r3, sp, #12
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	ab02      	add	r3, sp, #8
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	ec45 4b10 	vmov	d0, r4, r5
 80061b4:	4653      	mov	r3, sl
 80061b6:	4632      	mov	r2, r6
 80061b8:	f000 fcea 	bl	8006b90 <_dtoa_r>
 80061bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061c0:	4607      	mov	r7, r0
 80061c2:	d102      	bne.n	80061ca <__cvt+0x66>
 80061c4:	f019 0f01 	tst.w	r9, #1
 80061c8:	d022      	beq.n	8006210 <__cvt+0xac>
 80061ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061ce:	eb07 0906 	add.w	r9, r7, r6
 80061d2:	d110      	bne.n	80061f6 <__cvt+0x92>
 80061d4:	783b      	ldrb	r3, [r7, #0]
 80061d6:	2b30      	cmp	r3, #48	; 0x30
 80061d8:	d10a      	bne.n	80061f0 <__cvt+0x8c>
 80061da:	2200      	movs	r2, #0
 80061dc:	2300      	movs	r3, #0
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa fc99 	bl	8000b18 <__aeabi_dcmpeq>
 80061e6:	b918      	cbnz	r0, 80061f0 <__cvt+0x8c>
 80061e8:	f1c6 0601 	rsb	r6, r6, #1
 80061ec:	f8ca 6000 	str.w	r6, [sl]
 80061f0:	f8da 3000 	ldr.w	r3, [sl]
 80061f4:	4499      	add	r9, r3
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	4620      	mov	r0, r4
 80061fc:	4629      	mov	r1, r5
 80061fe:	f7fa fc8b 	bl	8000b18 <__aeabi_dcmpeq>
 8006202:	b108      	cbz	r0, 8006208 <__cvt+0xa4>
 8006204:	f8cd 900c 	str.w	r9, [sp, #12]
 8006208:	2230      	movs	r2, #48	; 0x30
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	454b      	cmp	r3, r9
 800620e:	d307      	bcc.n	8006220 <__cvt+0xbc>
 8006210:	9b03      	ldr	r3, [sp, #12]
 8006212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006214:	1bdb      	subs	r3, r3, r7
 8006216:	4638      	mov	r0, r7
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	b004      	add	sp, #16
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	9103      	str	r1, [sp, #12]
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e7f0      	b.n	800620a <__cvt+0xa6>

08006228 <__exponent>:
 8006228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800622a:	4603      	mov	r3, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	bfb8      	it	lt
 8006230:	4249      	neglt	r1, r1
 8006232:	f803 2b02 	strb.w	r2, [r3], #2
 8006236:	bfb4      	ite	lt
 8006238:	222d      	movlt	r2, #45	; 0x2d
 800623a:	222b      	movge	r2, #43	; 0x2b
 800623c:	2909      	cmp	r1, #9
 800623e:	7042      	strb	r2, [r0, #1]
 8006240:	dd2a      	ble.n	8006298 <__exponent+0x70>
 8006242:	f10d 0407 	add.w	r4, sp, #7
 8006246:	46a4      	mov	ip, r4
 8006248:	270a      	movs	r7, #10
 800624a:	46a6      	mov	lr, r4
 800624c:	460a      	mov	r2, r1
 800624e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006252:	fb07 1516 	mls	r5, r7, r6, r1
 8006256:	3530      	adds	r5, #48	; 0x30
 8006258:	2a63      	cmp	r2, #99	; 0x63
 800625a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800625e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006262:	4631      	mov	r1, r6
 8006264:	dcf1      	bgt.n	800624a <__exponent+0x22>
 8006266:	3130      	adds	r1, #48	; 0x30
 8006268:	f1ae 0502 	sub.w	r5, lr, #2
 800626c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006270:	1c44      	adds	r4, r0, #1
 8006272:	4629      	mov	r1, r5
 8006274:	4561      	cmp	r1, ip
 8006276:	d30a      	bcc.n	800628e <__exponent+0x66>
 8006278:	f10d 0209 	add.w	r2, sp, #9
 800627c:	eba2 020e 	sub.w	r2, r2, lr
 8006280:	4565      	cmp	r5, ip
 8006282:	bf88      	it	hi
 8006284:	2200      	movhi	r2, #0
 8006286:	4413      	add	r3, r2
 8006288:	1a18      	subs	r0, r3, r0
 800628a:	b003      	add	sp, #12
 800628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800628e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006292:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006296:	e7ed      	b.n	8006274 <__exponent+0x4c>
 8006298:	2330      	movs	r3, #48	; 0x30
 800629a:	3130      	adds	r1, #48	; 0x30
 800629c:	7083      	strb	r3, [r0, #2]
 800629e:	70c1      	strb	r1, [r0, #3]
 80062a0:	1d03      	adds	r3, r0, #4
 80062a2:	e7f1      	b.n	8006288 <__exponent+0x60>

080062a4 <_printf_float>:
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	ed2d 8b02 	vpush	{d8}
 80062ac:	b08d      	sub	sp, #52	; 0x34
 80062ae:	460c      	mov	r4, r1
 80062b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062b4:	4616      	mov	r6, r2
 80062b6:	461f      	mov	r7, r3
 80062b8:	4605      	mov	r5, r0
 80062ba:	f001 fa57 	bl	800776c <_localeconv_r>
 80062be:	f8d0 a000 	ldr.w	sl, [r0]
 80062c2:	4650      	mov	r0, sl
 80062c4:	f7f9 ffac 	bl	8000220 <strlen>
 80062c8:	2300      	movs	r3, #0
 80062ca:	930a      	str	r3, [sp, #40]	; 0x28
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	9305      	str	r3, [sp, #20]
 80062d0:	f8d8 3000 	ldr.w	r3, [r8]
 80062d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062d8:	3307      	adds	r3, #7
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	f103 0208 	add.w	r2, r3, #8
 80062e2:	f8c8 2000 	str.w	r2, [r8]
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062fc:	ee08 0a10 	vmov	s16, r0
 8006300:	4b9f      	ldr	r3, [pc, #636]	; (8006580 <_printf_float+0x2dc>)
 8006302:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630a:	f7fa fc37 	bl	8000b7c <__aeabi_dcmpun>
 800630e:	bb88      	cbnz	r0, 8006374 <_printf_float+0xd0>
 8006310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006314:	4b9a      	ldr	r3, [pc, #616]	; (8006580 <_printf_float+0x2dc>)
 8006316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800631a:	f7fa fc11 	bl	8000b40 <__aeabi_dcmple>
 800631e:	bb48      	cbnz	r0, 8006374 <_printf_float+0xd0>
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	4640      	mov	r0, r8
 8006326:	4649      	mov	r1, r9
 8006328:	f7fa fc00 	bl	8000b2c <__aeabi_dcmplt>
 800632c:	b110      	cbz	r0, 8006334 <_printf_float+0x90>
 800632e:	232d      	movs	r3, #45	; 0x2d
 8006330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006334:	4b93      	ldr	r3, [pc, #588]	; (8006584 <_printf_float+0x2e0>)
 8006336:	4894      	ldr	r0, [pc, #592]	; (8006588 <_printf_float+0x2e4>)
 8006338:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800633c:	bf94      	ite	ls
 800633e:	4698      	movls	r8, r3
 8006340:	4680      	movhi	r8, r0
 8006342:	2303      	movs	r3, #3
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	9b05      	ldr	r3, [sp, #20]
 8006348:	f023 0204 	bic.w	r2, r3, #4
 800634c:	6022      	str	r2, [r4, #0]
 800634e:	f04f 0900 	mov.w	r9, #0
 8006352:	9700      	str	r7, [sp, #0]
 8006354:	4633      	mov	r3, r6
 8006356:	aa0b      	add	r2, sp, #44	; 0x2c
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	f000 f9d8 	bl	8006710 <_printf_common>
 8006360:	3001      	adds	r0, #1
 8006362:	f040 8090 	bne.w	8006486 <_printf_float+0x1e2>
 8006366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800636a:	b00d      	add	sp, #52	; 0x34
 800636c:	ecbd 8b02 	vpop	{d8}
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa fbfe 	bl	8000b7c <__aeabi_dcmpun>
 8006380:	b140      	cbz	r0, 8006394 <_printf_float+0xf0>
 8006382:	464b      	mov	r3, r9
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfbc      	itt	lt
 8006388:	232d      	movlt	r3, #45	; 0x2d
 800638a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800638e:	487f      	ldr	r0, [pc, #508]	; (800658c <_printf_float+0x2e8>)
 8006390:	4b7f      	ldr	r3, [pc, #508]	; (8006590 <_printf_float+0x2ec>)
 8006392:	e7d1      	b.n	8006338 <_printf_float+0x94>
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800639a:	9206      	str	r2, [sp, #24]
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	d13f      	bne.n	8006420 <_printf_float+0x17c>
 80063a0:	2306      	movs	r3, #6
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	9b05      	ldr	r3, [sp, #20]
 80063a6:	6861      	ldr	r1, [r4, #4]
 80063a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063ac:	2300      	movs	r3, #0
 80063ae:	9303      	str	r3, [sp, #12]
 80063b0:	ab0a      	add	r3, sp, #40	; 0x28
 80063b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063b6:	ab09      	add	r3, sp, #36	; 0x24
 80063b8:	ec49 8b10 	vmov	d0, r8, r9
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	6022      	str	r2, [r4, #0]
 80063c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff fecd 	bl	8006164 <__cvt>
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ce:	2b47      	cmp	r3, #71	; 0x47
 80063d0:	4680      	mov	r8, r0
 80063d2:	d108      	bne.n	80063e6 <_printf_float+0x142>
 80063d4:	1cc8      	adds	r0, r1, #3
 80063d6:	db02      	blt.n	80063de <_printf_float+0x13a>
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	4299      	cmp	r1, r3
 80063dc:	dd41      	ble.n	8006462 <_printf_float+0x1be>
 80063de:	f1ab 0b02 	sub.w	fp, fp, #2
 80063e2:	fa5f fb8b 	uxtb.w	fp, fp
 80063e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ea:	d820      	bhi.n	800642e <_printf_float+0x18a>
 80063ec:	3901      	subs	r1, #1
 80063ee:	465a      	mov	r2, fp
 80063f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063f4:	9109      	str	r1, [sp, #36]	; 0x24
 80063f6:	f7ff ff17 	bl	8006228 <__exponent>
 80063fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063fc:	1813      	adds	r3, r2, r0
 80063fe:	2a01      	cmp	r2, #1
 8006400:	4681      	mov	r9, r0
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	dc02      	bgt.n	800640c <_printf_float+0x168>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	07d2      	lsls	r2, r2, #31
 800640a:	d501      	bpl.n	8006410 <_printf_float+0x16c>
 800640c:	3301      	adds	r3, #1
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006414:	2b00      	cmp	r3, #0
 8006416:	d09c      	beq.n	8006352 <_printf_float+0xae>
 8006418:	232d      	movs	r3, #45	; 0x2d
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641e:	e798      	b.n	8006352 <_printf_float+0xae>
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	2a47      	cmp	r2, #71	; 0x47
 8006424:	d1be      	bne.n	80063a4 <_printf_float+0x100>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1bc      	bne.n	80063a4 <_printf_float+0x100>
 800642a:	2301      	movs	r3, #1
 800642c:	e7b9      	b.n	80063a2 <_printf_float+0xfe>
 800642e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006432:	d118      	bne.n	8006466 <_printf_float+0x1c2>
 8006434:	2900      	cmp	r1, #0
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	dd0b      	ble.n	8006452 <_printf_float+0x1ae>
 800643a:	6121      	str	r1, [r4, #16]
 800643c:	b913      	cbnz	r3, 8006444 <_printf_float+0x1a0>
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	07d0      	lsls	r0, r2, #31
 8006442:	d502      	bpl.n	800644a <_printf_float+0x1a6>
 8006444:	3301      	adds	r3, #1
 8006446:	440b      	add	r3, r1
 8006448:	6123      	str	r3, [r4, #16]
 800644a:	65a1      	str	r1, [r4, #88]	; 0x58
 800644c:	f04f 0900 	mov.w	r9, #0
 8006450:	e7de      	b.n	8006410 <_printf_float+0x16c>
 8006452:	b913      	cbnz	r3, 800645a <_printf_float+0x1b6>
 8006454:	6822      	ldr	r2, [r4, #0]
 8006456:	07d2      	lsls	r2, r2, #31
 8006458:	d501      	bpl.n	800645e <_printf_float+0x1ba>
 800645a:	3302      	adds	r3, #2
 800645c:	e7f4      	b.n	8006448 <_printf_float+0x1a4>
 800645e:	2301      	movs	r3, #1
 8006460:	e7f2      	b.n	8006448 <_printf_float+0x1a4>
 8006462:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006468:	4299      	cmp	r1, r3
 800646a:	db05      	blt.n	8006478 <_printf_float+0x1d4>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	6121      	str	r1, [r4, #16]
 8006470:	07d8      	lsls	r0, r3, #31
 8006472:	d5ea      	bpl.n	800644a <_printf_float+0x1a6>
 8006474:	1c4b      	adds	r3, r1, #1
 8006476:	e7e7      	b.n	8006448 <_printf_float+0x1a4>
 8006478:	2900      	cmp	r1, #0
 800647a:	bfd4      	ite	le
 800647c:	f1c1 0202 	rsble	r2, r1, #2
 8006480:	2201      	movgt	r2, #1
 8006482:	4413      	add	r3, r2
 8006484:	e7e0      	b.n	8006448 <_printf_float+0x1a4>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	055a      	lsls	r2, r3, #21
 800648a:	d407      	bmi.n	800649c <_printf_float+0x1f8>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	4642      	mov	r2, r8
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	d12c      	bne.n	80064f4 <_printf_float+0x250>
 800649a:	e764      	b.n	8006366 <_printf_float+0xc2>
 800649c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064a0:	f240 80e0 	bls.w	8006664 <_printf_float+0x3c0>
 80064a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064a8:	2200      	movs	r2, #0
 80064aa:	2300      	movs	r3, #0
 80064ac:	f7fa fb34 	bl	8000b18 <__aeabi_dcmpeq>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d034      	beq.n	800651e <_printf_float+0x27a>
 80064b4:	4a37      	ldr	r2, [pc, #220]	; (8006594 <_printf_float+0x2f0>)
 80064b6:	2301      	movs	r3, #1
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	f43f af51 	beq.w	8006366 <_printf_float+0xc2>
 80064c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064c8:	429a      	cmp	r2, r3
 80064ca:	db02      	blt.n	80064d2 <_printf_float+0x22e>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	07d8      	lsls	r0, r3, #31
 80064d0:	d510      	bpl.n	80064f4 <_printf_float+0x250>
 80064d2:	ee18 3a10 	vmov	r3, s16
 80064d6:	4652      	mov	r2, sl
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f af41 	beq.w	8006366 <_printf_float+0xc2>
 80064e4:	f04f 0800 	mov.w	r8, #0
 80064e8:	f104 091a 	add.w	r9, r4, #26
 80064ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4543      	cmp	r3, r8
 80064f2:	dc09      	bgt.n	8006508 <_printf_float+0x264>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	079b      	lsls	r3, r3, #30
 80064f8:	f100 8105 	bmi.w	8006706 <_printf_float+0x462>
 80064fc:	68e0      	ldr	r0, [r4, #12]
 80064fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006500:	4298      	cmp	r0, r3
 8006502:	bfb8      	it	lt
 8006504:	4618      	movlt	r0, r3
 8006506:	e730      	b.n	800636a <_printf_float+0xc6>
 8006508:	2301      	movs	r3, #1
 800650a:	464a      	mov	r2, r9
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f af27 	beq.w	8006366 <_printf_float+0xc2>
 8006518:	f108 0801 	add.w	r8, r8, #1
 800651c:	e7e6      	b.n	80064ec <_printf_float+0x248>
 800651e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	dc39      	bgt.n	8006598 <_printf_float+0x2f4>
 8006524:	4a1b      	ldr	r2, [pc, #108]	; (8006594 <_printf_float+0x2f0>)
 8006526:	2301      	movs	r3, #1
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af19 	beq.w	8006366 <_printf_float+0xc2>
 8006534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006538:	4313      	orrs	r3, r2
 800653a:	d102      	bne.n	8006542 <_printf_float+0x29e>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	07d9      	lsls	r1, r3, #31
 8006540:	d5d8      	bpl.n	80064f4 <_printf_float+0x250>
 8006542:	ee18 3a10 	vmov	r3, s16
 8006546:	4652      	mov	r2, sl
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	f43f af09 	beq.w	8006366 <_printf_float+0xc2>
 8006554:	f04f 0900 	mov.w	r9, #0
 8006558:	f104 0a1a 	add.w	sl, r4, #26
 800655c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655e:	425b      	negs	r3, r3
 8006560:	454b      	cmp	r3, r9
 8006562:	dc01      	bgt.n	8006568 <_printf_float+0x2c4>
 8006564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006566:	e792      	b.n	800648e <_printf_float+0x1ea>
 8006568:	2301      	movs	r3, #1
 800656a:	4652      	mov	r2, sl
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f aef7 	beq.w	8006366 <_printf_float+0xc2>
 8006578:	f109 0901 	add.w	r9, r9, #1
 800657c:	e7ee      	b.n	800655c <_printf_float+0x2b8>
 800657e:	bf00      	nop
 8006580:	7fefffff 	.word	0x7fefffff
 8006584:	08008ffc 	.word	0x08008ffc
 8006588:	08009000 	.word	0x08009000
 800658c:	08009008 	.word	0x08009008
 8006590:	08009004 	.word	0x08009004
 8006594:	0800900c 	.word	0x0800900c
 8006598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800659a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800659c:	429a      	cmp	r2, r3
 800659e:	bfa8      	it	ge
 80065a0:	461a      	movge	r2, r3
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	4691      	mov	r9, r2
 80065a6:	dc37      	bgt.n	8006618 <_printf_float+0x374>
 80065a8:	f04f 0b00 	mov.w	fp, #0
 80065ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b0:	f104 021a 	add.w	r2, r4, #26
 80065b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	eba3 0309 	sub.w	r3, r3, r9
 80065bc:	455b      	cmp	r3, fp
 80065be:	dc33      	bgt.n	8006628 <_printf_float+0x384>
 80065c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c4:	429a      	cmp	r2, r3
 80065c6:	db3b      	blt.n	8006640 <_printf_float+0x39c>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07da      	lsls	r2, r3, #31
 80065cc:	d438      	bmi.n	8006640 <_printf_float+0x39c>
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	9a05      	ldr	r2, [sp, #20]
 80065d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d4:	1a9a      	subs	r2, r3, r2
 80065d6:	eba3 0901 	sub.w	r9, r3, r1
 80065da:	4591      	cmp	r9, r2
 80065dc:	bfa8      	it	ge
 80065de:	4691      	movge	r9, r2
 80065e0:	f1b9 0f00 	cmp.w	r9, #0
 80065e4:	dc35      	bgt.n	8006652 <_printf_float+0x3ae>
 80065e6:	f04f 0800 	mov.w	r8, #0
 80065ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ee:	f104 0a1a 	add.w	sl, r4, #26
 80065f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	eba3 0309 	sub.w	r3, r3, r9
 80065fc:	4543      	cmp	r3, r8
 80065fe:	f77f af79 	ble.w	80064f4 <_printf_float+0x250>
 8006602:	2301      	movs	r3, #1
 8006604:	4652      	mov	r2, sl
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	f43f aeaa 	beq.w	8006366 <_printf_float+0xc2>
 8006612:	f108 0801 	add.w	r8, r8, #1
 8006616:	e7ec      	b.n	80065f2 <_printf_float+0x34e>
 8006618:	4613      	mov	r3, r2
 800661a:	4631      	mov	r1, r6
 800661c:	4642      	mov	r2, r8
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	d1c0      	bne.n	80065a8 <_printf_float+0x304>
 8006626:	e69e      	b.n	8006366 <_printf_float+0xc2>
 8006628:	2301      	movs	r3, #1
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	9205      	str	r2, [sp, #20]
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f ae97 	beq.w	8006366 <_printf_float+0xc2>
 8006638:	9a05      	ldr	r2, [sp, #20]
 800663a:	f10b 0b01 	add.w	fp, fp, #1
 800663e:	e7b9      	b.n	80065b4 <_printf_float+0x310>
 8006640:	ee18 3a10 	vmov	r3, s16
 8006644:	4652      	mov	r2, sl
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	d1be      	bne.n	80065ce <_printf_float+0x32a>
 8006650:	e689      	b.n	8006366 <_printf_float+0xc2>
 8006652:	9a05      	ldr	r2, [sp, #20]
 8006654:	464b      	mov	r3, r9
 8006656:	4442      	add	r2, r8
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	d1c1      	bne.n	80065e6 <_printf_float+0x342>
 8006662:	e680      	b.n	8006366 <_printf_float+0xc2>
 8006664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006666:	2a01      	cmp	r2, #1
 8006668:	dc01      	bgt.n	800666e <_printf_float+0x3ca>
 800666a:	07db      	lsls	r3, r3, #31
 800666c:	d538      	bpl.n	80066e0 <_printf_float+0x43c>
 800666e:	2301      	movs	r3, #1
 8006670:	4642      	mov	r2, r8
 8006672:	4631      	mov	r1, r6
 8006674:	4628      	mov	r0, r5
 8006676:	47b8      	blx	r7
 8006678:	3001      	adds	r0, #1
 800667a:	f43f ae74 	beq.w	8006366 <_printf_float+0xc2>
 800667e:	ee18 3a10 	vmov	r3, s16
 8006682:	4652      	mov	r2, sl
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f ae6b 	beq.w	8006366 <_printf_float+0xc2>
 8006690:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	f7fa fa3e 	bl	8000b18 <__aeabi_dcmpeq>
 800669c:	b9d8      	cbnz	r0, 80066d6 <_printf_float+0x432>
 800669e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a0:	f108 0201 	add.w	r2, r8, #1
 80066a4:	3b01      	subs	r3, #1
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	d10e      	bne.n	80066ce <_printf_float+0x42a>
 80066b0:	e659      	b.n	8006366 <_printf_float+0xc2>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4652      	mov	r2, sl
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f ae52 	beq.w	8006366 <_printf_float+0xc2>
 80066c2:	f108 0801 	add.w	r8, r8, #1
 80066c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4543      	cmp	r3, r8
 80066cc:	dcf1      	bgt.n	80066b2 <_printf_float+0x40e>
 80066ce:	464b      	mov	r3, r9
 80066d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066d4:	e6dc      	b.n	8006490 <_printf_float+0x1ec>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 0a1a 	add.w	sl, r4, #26
 80066de:	e7f2      	b.n	80066c6 <_printf_float+0x422>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4642      	mov	r2, r8
 80066e4:	e7df      	b.n	80066a6 <_printf_float+0x402>
 80066e6:	2301      	movs	r3, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae38 	beq.w	8006366 <_printf_float+0xc2>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	4543      	cmp	r3, r8
 8006702:	dcf0      	bgt.n	80066e6 <_printf_float+0x442>
 8006704:	e6fa      	b.n	80064fc <_printf_float+0x258>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0919 	add.w	r9, r4, #25
 800670e:	e7f4      	b.n	80066fa <_printf_float+0x456>

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	4699      	mov	r9, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006720:	4293      	cmp	r3, r2
 8006722:	bfb8      	it	lt
 8006724:	4613      	movlt	r3, r2
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800672c:	4607      	mov	r7, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b10a      	cbz	r2, 8006736 <_printf_common+0x26>
 8006732:	3301      	adds	r3, #1
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	6833      	ldrmi	r3, [r6, #0]
 800673e:	3302      	addmi	r3, #2
 8006740:	6033      	strmi	r3, [r6, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d106      	bne.n	8006758 <_printf_common+0x48>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	6832      	ldr	r2, [r6, #0]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc26      	bgt.n	80067a6 <_printf_common+0x96>
 8006758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800675c:	1e13      	subs	r3, r2, #0
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	bf18      	it	ne
 8006762:	2301      	movne	r3, #1
 8006764:	0692      	lsls	r2, r2, #26
 8006766:	d42b      	bmi.n	80067c0 <_printf_common+0xb0>
 8006768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800676c:	4649      	mov	r1, r9
 800676e:	4638      	mov	r0, r7
 8006770:	47c0      	blx	r8
 8006772:	3001      	adds	r0, #1
 8006774:	d01e      	beq.n	80067b4 <_printf_common+0xa4>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	68e5      	ldr	r5, [r4, #12]
 800677a:	6832      	ldr	r2, [r6, #0]
 800677c:	f003 0306 	and.w	r3, r3, #6
 8006780:	2b04      	cmp	r3, #4
 8006782:	bf08      	it	eq
 8006784:	1aad      	subeq	r5, r5, r2
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	6922      	ldr	r2, [r4, #16]
 800678a:	bf0c      	ite	eq
 800678c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006790:	2500      	movne	r5, #0
 8006792:	4293      	cmp	r3, r2
 8006794:	bfc4      	itt	gt
 8006796:	1a9b      	subgt	r3, r3, r2
 8006798:	18ed      	addgt	r5, r5, r3
 800679a:	2600      	movs	r6, #0
 800679c:	341a      	adds	r4, #26
 800679e:	42b5      	cmp	r5, r6
 80067a0:	d11a      	bne.n	80067d8 <_printf_common+0xc8>
 80067a2:	2000      	movs	r0, #0
 80067a4:	e008      	b.n	80067b8 <_printf_common+0xa8>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4649      	mov	r1, r9
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c0      	blx	r8
 80067b0:	3001      	adds	r0, #1
 80067b2:	d103      	bne.n	80067bc <_printf_common+0xac>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	3501      	adds	r5, #1
 80067be:	e7c6      	b.n	800674e <_printf_common+0x3e>
 80067c0:	18e1      	adds	r1, r4, r3
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	2030      	movs	r0, #48	; 0x30
 80067c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ca:	4422      	add	r2, r4
 80067cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d4:	3302      	adds	r3, #2
 80067d6:	e7c7      	b.n	8006768 <_printf_common+0x58>
 80067d8:	2301      	movs	r3, #1
 80067da:	4622      	mov	r2, r4
 80067dc:	4649      	mov	r1, r9
 80067de:	4638      	mov	r0, r7
 80067e0:	47c0      	blx	r8
 80067e2:	3001      	adds	r0, #1
 80067e4:	d0e6      	beq.n	80067b4 <_printf_common+0xa4>
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7d9      	b.n	800679e <_printf_common+0x8e>
	...

080067ec <_printf_i>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	7e0f      	ldrb	r7, [r1, #24]
 80067f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067f4:	2f78      	cmp	r7, #120	; 0x78
 80067f6:	4691      	mov	r9, r2
 80067f8:	4680      	mov	r8, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	469a      	mov	sl, r3
 80067fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006802:	d807      	bhi.n	8006814 <_printf_i+0x28>
 8006804:	2f62      	cmp	r7, #98	; 0x62
 8006806:	d80a      	bhi.n	800681e <_printf_i+0x32>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f000 80d8 	beq.w	80069be <_printf_i+0x1d2>
 800680e:	2f58      	cmp	r7, #88	; 0x58
 8006810:	f000 80a3 	beq.w	800695a <_printf_i+0x16e>
 8006814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800681c:	e03a      	b.n	8006894 <_printf_i+0xa8>
 800681e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006822:	2b15      	cmp	r3, #21
 8006824:	d8f6      	bhi.n	8006814 <_printf_i+0x28>
 8006826:	a101      	add	r1, pc, #4	; (adr r1, 800682c <_printf_i+0x40>)
 8006828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800682c:	08006885 	.word	0x08006885
 8006830:	08006899 	.word	0x08006899
 8006834:	08006815 	.word	0x08006815
 8006838:	08006815 	.word	0x08006815
 800683c:	08006815 	.word	0x08006815
 8006840:	08006815 	.word	0x08006815
 8006844:	08006899 	.word	0x08006899
 8006848:	08006815 	.word	0x08006815
 800684c:	08006815 	.word	0x08006815
 8006850:	08006815 	.word	0x08006815
 8006854:	08006815 	.word	0x08006815
 8006858:	080069a5 	.word	0x080069a5
 800685c:	080068c9 	.word	0x080068c9
 8006860:	08006987 	.word	0x08006987
 8006864:	08006815 	.word	0x08006815
 8006868:	08006815 	.word	0x08006815
 800686c:	080069c7 	.word	0x080069c7
 8006870:	08006815 	.word	0x08006815
 8006874:	080068c9 	.word	0x080068c9
 8006878:	08006815 	.word	0x08006815
 800687c:	08006815 	.word	0x08006815
 8006880:	0800698f 	.word	0x0800698f
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	602a      	str	r2, [r5, #0]
 800688c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e0a3      	b.n	80069e0 <_printf_i+0x1f4>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	6829      	ldr	r1, [r5, #0]
 800689c:	0606      	lsls	r6, r0, #24
 800689e:	f101 0304 	add.w	r3, r1, #4
 80068a2:	d50a      	bpl.n	80068ba <_printf_i+0xce>
 80068a4:	680e      	ldr	r6, [r1, #0]
 80068a6:	602b      	str	r3, [r5, #0]
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	da03      	bge.n	80068b4 <_printf_i+0xc8>
 80068ac:	232d      	movs	r3, #45	; 0x2d
 80068ae:	4276      	negs	r6, r6
 80068b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b4:	485e      	ldr	r0, [pc, #376]	; (8006a30 <_printf_i+0x244>)
 80068b6:	230a      	movs	r3, #10
 80068b8:	e019      	b.n	80068ee <_printf_i+0x102>
 80068ba:	680e      	ldr	r6, [r1, #0]
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068c2:	bf18      	it	ne
 80068c4:	b236      	sxthne	r6, r6
 80068c6:	e7ef      	b.n	80068a8 <_printf_i+0xbc>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	6820      	ldr	r0, [r4, #0]
 80068cc:	1d19      	adds	r1, r3, #4
 80068ce:	6029      	str	r1, [r5, #0]
 80068d0:	0601      	lsls	r1, r0, #24
 80068d2:	d501      	bpl.n	80068d8 <_printf_i+0xec>
 80068d4:	681e      	ldr	r6, [r3, #0]
 80068d6:	e002      	b.n	80068de <_printf_i+0xf2>
 80068d8:	0646      	lsls	r6, r0, #25
 80068da:	d5fb      	bpl.n	80068d4 <_printf_i+0xe8>
 80068dc:	881e      	ldrh	r6, [r3, #0]
 80068de:	4854      	ldr	r0, [pc, #336]	; (8006a30 <_printf_i+0x244>)
 80068e0:	2f6f      	cmp	r7, #111	; 0x6f
 80068e2:	bf0c      	ite	eq
 80068e4:	2308      	moveq	r3, #8
 80068e6:	230a      	movne	r3, #10
 80068e8:	2100      	movs	r1, #0
 80068ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ee:	6865      	ldr	r5, [r4, #4]
 80068f0:	60a5      	str	r5, [r4, #8]
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	bfa2      	ittt	ge
 80068f6:	6821      	ldrge	r1, [r4, #0]
 80068f8:	f021 0104 	bicge.w	r1, r1, #4
 80068fc:	6021      	strge	r1, [r4, #0]
 80068fe:	b90e      	cbnz	r6, 8006904 <_printf_i+0x118>
 8006900:	2d00      	cmp	r5, #0
 8006902:	d04d      	beq.n	80069a0 <_printf_i+0x1b4>
 8006904:	4615      	mov	r5, r2
 8006906:	fbb6 f1f3 	udiv	r1, r6, r3
 800690a:	fb03 6711 	mls	r7, r3, r1, r6
 800690e:	5dc7      	ldrb	r7, [r0, r7]
 8006910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006914:	4637      	mov	r7, r6
 8006916:	42bb      	cmp	r3, r7
 8006918:	460e      	mov	r6, r1
 800691a:	d9f4      	bls.n	8006906 <_printf_i+0x11a>
 800691c:	2b08      	cmp	r3, #8
 800691e:	d10b      	bne.n	8006938 <_printf_i+0x14c>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	07de      	lsls	r6, r3, #31
 8006924:	d508      	bpl.n	8006938 <_printf_i+0x14c>
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	6861      	ldr	r1, [r4, #4]
 800692a:	4299      	cmp	r1, r3
 800692c:	bfde      	ittt	le
 800692e:	2330      	movle	r3, #48	; 0x30
 8006930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006934:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006938:	1b52      	subs	r2, r2, r5
 800693a:	6122      	str	r2, [r4, #16]
 800693c:	f8cd a000 	str.w	sl, [sp]
 8006940:	464b      	mov	r3, r9
 8006942:	aa03      	add	r2, sp, #12
 8006944:	4621      	mov	r1, r4
 8006946:	4640      	mov	r0, r8
 8006948:	f7ff fee2 	bl	8006710 <_printf_common>
 800694c:	3001      	adds	r0, #1
 800694e:	d14c      	bne.n	80069ea <_printf_i+0x1fe>
 8006950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006954:	b004      	add	sp, #16
 8006956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695a:	4835      	ldr	r0, [pc, #212]	; (8006a30 <_printf_i+0x244>)
 800695c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006960:	6829      	ldr	r1, [r5, #0]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f851 6b04 	ldr.w	r6, [r1], #4
 8006968:	6029      	str	r1, [r5, #0]
 800696a:	061d      	lsls	r5, r3, #24
 800696c:	d514      	bpl.n	8006998 <_printf_i+0x1ac>
 800696e:	07df      	lsls	r7, r3, #31
 8006970:	bf44      	itt	mi
 8006972:	f043 0320 	orrmi.w	r3, r3, #32
 8006976:	6023      	strmi	r3, [r4, #0]
 8006978:	b91e      	cbnz	r6, 8006982 <_printf_i+0x196>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	f023 0320 	bic.w	r3, r3, #32
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	2310      	movs	r3, #16
 8006984:	e7b0      	b.n	80068e8 <_printf_i+0xfc>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	f043 0320 	orr.w	r3, r3, #32
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	2378      	movs	r3, #120	; 0x78
 8006990:	4828      	ldr	r0, [pc, #160]	; (8006a34 <_printf_i+0x248>)
 8006992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006996:	e7e3      	b.n	8006960 <_printf_i+0x174>
 8006998:	0659      	lsls	r1, r3, #25
 800699a:	bf48      	it	mi
 800699c:	b2b6      	uxthmi	r6, r6
 800699e:	e7e6      	b.n	800696e <_printf_i+0x182>
 80069a0:	4615      	mov	r5, r2
 80069a2:	e7bb      	b.n	800691c <_printf_i+0x130>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	6826      	ldr	r6, [r4, #0]
 80069a8:	6961      	ldr	r1, [r4, #20]
 80069aa:	1d18      	adds	r0, r3, #4
 80069ac:	6028      	str	r0, [r5, #0]
 80069ae:	0635      	lsls	r5, r6, #24
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0x1cc>
 80069b4:	6019      	str	r1, [r3, #0]
 80069b6:	e002      	b.n	80069be <_printf_i+0x1d2>
 80069b8:	0670      	lsls	r0, r6, #25
 80069ba:	d5fb      	bpl.n	80069b4 <_printf_i+0x1c8>
 80069bc:	8019      	strh	r1, [r3, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	4615      	mov	r5, r2
 80069c4:	e7ba      	b.n	800693c <_printf_i+0x150>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	1d1a      	adds	r2, r3, #4
 80069ca:	602a      	str	r2, [r5, #0]
 80069cc:	681d      	ldr	r5, [r3, #0]
 80069ce:	6862      	ldr	r2, [r4, #4]
 80069d0:	2100      	movs	r1, #0
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7f9 fc2c 	bl	8000230 <memchr>
 80069d8:	b108      	cbz	r0, 80069de <_printf_i+0x1f2>
 80069da:	1b40      	subs	r0, r0, r5
 80069dc:	6060      	str	r0, [r4, #4]
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	2300      	movs	r3, #0
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e8:	e7a8      	b.n	800693c <_printf_i+0x150>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	462a      	mov	r2, r5
 80069ee:	4649      	mov	r1, r9
 80069f0:	4640      	mov	r0, r8
 80069f2:	47d0      	blx	sl
 80069f4:	3001      	adds	r0, #1
 80069f6:	d0ab      	beq.n	8006950 <_printf_i+0x164>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	079b      	lsls	r3, r3, #30
 80069fc:	d413      	bmi.n	8006a26 <_printf_i+0x23a>
 80069fe:	68e0      	ldr	r0, [r4, #12]
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	4298      	cmp	r0, r3
 8006a04:	bfb8      	it	lt
 8006a06:	4618      	movlt	r0, r3
 8006a08:	e7a4      	b.n	8006954 <_printf_i+0x168>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4640      	mov	r0, r8
 8006a12:	47d0      	blx	sl
 8006a14:	3001      	adds	r0, #1
 8006a16:	d09b      	beq.n	8006950 <_printf_i+0x164>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	9903      	ldr	r1, [sp, #12]
 8006a1e:	1a5b      	subs	r3, r3, r1
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dcf2      	bgt.n	8006a0a <_printf_i+0x21e>
 8006a24:	e7eb      	b.n	80069fe <_printf_i+0x212>
 8006a26:	2500      	movs	r5, #0
 8006a28:	f104 0619 	add.w	r6, r4, #25
 8006a2c:	e7f5      	b.n	8006a1a <_printf_i+0x22e>
 8006a2e:	bf00      	nop
 8006a30:	0800900e 	.word	0x0800900e
 8006a34:	0800901f 	.word	0x0800901f

08006a38 <siprintf>:
 8006a38:	b40e      	push	{r1, r2, r3}
 8006a3a:	b500      	push	{lr}
 8006a3c:	b09c      	sub	sp, #112	; 0x70
 8006a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a40:	9002      	str	r0, [sp, #8]
 8006a42:	9006      	str	r0, [sp, #24]
 8006a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a48:	4809      	ldr	r0, [pc, #36]	; (8006a70 <siprintf+0x38>)
 8006a4a:	9107      	str	r1, [sp, #28]
 8006a4c:	9104      	str	r1, [sp, #16]
 8006a4e:	4909      	ldr	r1, [pc, #36]	; (8006a74 <siprintf+0x3c>)
 8006a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	6800      	ldr	r0, [r0, #0]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	a902      	add	r1, sp, #8
 8006a5c:	f001 fb76 	bl	800814c <_svfiprintf_r>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	b01c      	add	sp, #112	; 0x70
 8006a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	4770      	bx	lr
 8006a70:	20000088 	.word	0x20000088
 8006a74:	ffff0208 	.word	0xffff0208

08006a78 <quorem>:
 8006a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	6903      	ldr	r3, [r0, #16]
 8006a7e:	690c      	ldr	r4, [r1, #16]
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	4607      	mov	r7, r0
 8006a84:	f2c0 8081 	blt.w	8006b8a <quorem+0x112>
 8006a88:	3c01      	subs	r4, #1
 8006a8a:	f101 0814 	add.w	r8, r1, #20
 8006a8e:	f100 0514 	add.w	r5, r0, #20
 8006a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ab0:	d331      	bcc.n	8006b16 <quorem+0x9e>
 8006ab2:	f04f 0e00 	mov.w	lr, #0
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	46ac      	mov	ip, r5
 8006aba:	46f2      	mov	sl, lr
 8006abc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ac0:	b293      	uxth	r3, r2
 8006ac2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ac6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ad0:	f8dc a000 	ldr.w	sl, [ip]
 8006ad4:	0c12      	lsrs	r2, r2, #16
 8006ad6:	fa13 f38a 	uxtah	r3, r3, sl
 8006ada:	fb06 e202 	mla	r2, r6, r2, lr
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	9b00      	ldr	r3, [sp, #0]
 8006ae2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ae6:	b292      	uxth	r2, r2
 8006ae8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006af0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006af4:	4581      	cmp	r9, r0
 8006af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006afa:	f84c 3b04 	str.w	r3, [ip], #4
 8006afe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b02:	d2db      	bcs.n	8006abc <quorem+0x44>
 8006b04:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b08:	b92b      	cbnz	r3, 8006b16 <quorem+0x9e>
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	3b04      	subs	r3, #4
 8006b0e:	429d      	cmp	r5, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	d32e      	bcc.n	8006b72 <quorem+0xfa>
 8006b14:	613c      	str	r4, [r7, #16]
 8006b16:	4638      	mov	r0, r7
 8006b18:	f001 f8c4 	bl	8007ca4 <__mcmp>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	db24      	blt.n	8006b6a <quorem+0xf2>
 8006b20:	3601      	adds	r6, #1
 8006b22:	4628      	mov	r0, r5
 8006b24:	f04f 0c00 	mov.w	ip, #0
 8006b28:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b2c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b30:	b293      	uxth	r3, r2
 8006b32:	ebac 0303 	sub.w	r3, ip, r3
 8006b36:	0c12      	lsrs	r2, r2, #16
 8006b38:	fa13 f38e 	uxtah	r3, r3, lr
 8006b3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b4a:	45c1      	cmp	r9, r8
 8006b4c:	f840 3b04 	str.w	r3, [r0], #4
 8006b50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b54:	d2e8      	bcs.n	8006b28 <quorem+0xb0>
 8006b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b5e:	b922      	cbnz	r2, 8006b6a <quorem+0xf2>
 8006b60:	3b04      	subs	r3, #4
 8006b62:	429d      	cmp	r5, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	d30a      	bcc.n	8006b7e <quorem+0x106>
 8006b68:	613c      	str	r4, [r7, #16]
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	b003      	add	sp, #12
 8006b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	d1cc      	bne.n	8006b14 <quorem+0x9c>
 8006b7a:	3c01      	subs	r4, #1
 8006b7c:	e7c7      	b.n	8006b0e <quorem+0x96>
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d1f0      	bne.n	8006b68 <quorem+0xf0>
 8006b86:	3c01      	subs	r4, #1
 8006b88:	e7eb      	b.n	8006b62 <quorem+0xea>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7ee      	b.n	8006b6c <quorem+0xf4>
	...

08006b90 <_dtoa_r>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	ed2d 8b04 	vpush	{d8-d9}
 8006b98:	ec57 6b10 	vmov	r6, r7, d0
 8006b9c:	b093      	sub	sp, #76	; 0x4c
 8006b9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ba0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ba4:	9106      	str	r1, [sp, #24]
 8006ba6:	ee10 aa10 	vmov	sl, s0
 8006baa:	4604      	mov	r4, r0
 8006bac:	9209      	str	r2, [sp, #36]	; 0x24
 8006bae:	930c      	str	r3, [sp, #48]	; 0x30
 8006bb0:	46bb      	mov	fp, r7
 8006bb2:	b975      	cbnz	r5, 8006bd2 <_dtoa_r+0x42>
 8006bb4:	2010      	movs	r0, #16
 8006bb6:	f000 fddd 	bl	8007774 <malloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6260      	str	r0, [r4, #36]	; 0x24
 8006bbe:	b920      	cbnz	r0, 8006bca <_dtoa_r+0x3a>
 8006bc0:	4ba7      	ldr	r3, [pc, #668]	; (8006e60 <_dtoa_r+0x2d0>)
 8006bc2:	21ea      	movs	r1, #234	; 0xea
 8006bc4:	48a7      	ldr	r0, [pc, #668]	; (8006e64 <_dtoa_r+0x2d4>)
 8006bc6:	f001 fbd1 	bl	800836c <__assert_func>
 8006bca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bce:	6005      	str	r5, [r0, #0]
 8006bd0:	60c5      	str	r5, [r0, #12]
 8006bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	b151      	cbz	r1, 8006bee <_dtoa_r+0x5e>
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	604a      	str	r2, [r1, #4]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4093      	lsls	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fe1c 	bl	8007820 <_Bfree>
 8006be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	1e3b      	subs	r3, r7, #0
 8006bf0:	bfaa      	itet	ge
 8006bf2:	2300      	movge	r3, #0
 8006bf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006bf8:	f8c8 3000 	strge.w	r3, [r8]
 8006bfc:	4b9a      	ldr	r3, [pc, #616]	; (8006e68 <_dtoa_r+0x2d8>)
 8006bfe:	bfbc      	itt	lt
 8006c00:	2201      	movlt	r2, #1
 8006c02:	f8c8 2000 	strlt.w	r2, [r8]
 8006c06:	ea33 030b 	bics.w	r3, r3, fp
 8006c0a:	d11b      	bne.n	8006c44 <_dtoa_r+0xb4>
 8006c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c18:	4333      	orrs	r3, r6
 8006c1a:	f000 8592 	beq.w	8007742 <_dtoa_r+0xbb2>
 8006c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c20:	b963      	cbnz	r3, 8006c3c <_dtoa_r+0xac>
 8006c22:	4b92      	ldr	r3, [pc, #584]	; (8006e6c <_dtoa_r+0x2dc>)
 8006c24:	e022      	b.n	8006c6c <_dtoa_r+0xdc>
 8006c26:	4b92      	ldr	r3, [pc, #584]	; (8006e70 <_dtoa_r+0x2e0>)
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	9801      	ldr	r0, [sp, #4]
 8006c32:	b013      	add	sp, #76	; 0x4c
 8006c34:	ecbd 8b04 	vpop	{d8-d9}
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	4b8b      	ldr	r3, [pc, #556]	; (8006e6c <_dtoa_r+0x2dc>)
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	3303      	adds	r3, #3
 8006c42:	e7f3      	b.n	8006c2c <_dtoa_r+0x9c>
 8006c44:	2200      	movs	r2, #0
 8006c46:	2300      	movs	r3, #0
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	f7f9 ff64 	bl	8000b18 <__aeabi_dcmpeq>
 8006c50:	ec4b ab19 	vmov	d9, sl, fp
 8006c54:	4680      	mov	r8, r0
 8006c56:	b158      	cbz	r0, 8006c70 <_dtoa_r+0xe0>
 8006c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 856b 	beq.w	800773c <_dtoa_r+0xbac>
 8006c66:	4883      	ldr	r0, [pc, #524]	; (8006e74 <_dtoa_r+0x2e4>)
 8006c68:	6018      	str	r0, [r3, #0]
 8006c6a:	1e43      	subs	r3, r0, #1
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	e7df      	b.n	8006c30 <_dtoa_r+0xa0>
 8006c70:	ec4b ab10 	vmov	d0, sl, fp
 8006c74:	aa10      	add	r2, sp, #64	; 0x40
 8006c76:	a911      	add	r1, sp, #68	; 0x44
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f001 f8b9 	bl	8007df0 <__d2b>
 8006c7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c82:	ee08 0a10 	vmov	s16, r0
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	f000 8084 	beq.w	8006d94 <_dtoa_r+0x204>
 8006c8c:	ee19 3a90 	vmov	r3, s19
 8006c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c98:	4656      	mov	r6, sl
 8006c9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ca2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006ca6:	4b74      	ldr	r3, [pc, #464]	; (8006e78 <_dtoa_r+0x2e8>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fb13 	bl	80002d8 <__aeabi_dsub>
 8006cb2:	a365      	add	r3, pc, #404	; (adr r3, 8006e48 <_dtoa_r+0x2b8>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f7f9 fcc6 	bl	8000648 <__aeabi_dmul>
 8006cbc:	a364      	add	r3, pc, #400	; (adr r3, 8006e50 <_dtoa_r+0x2c0>)
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f7f9 fb0b 	bl	80002dc <__adddf3>
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	4628      	mov	r0, r5
 8006cca:	460f      	mov	r7, r1
 8006ccc:	f7f9 fc52 	bl	8000574 <__aeabi_i2d>
 8006cd0:	a361      	add	r3, pc, #388	; (adr r3, 8006e58 <_dtoa_r+0x2c8>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f7f9 fcb7 	bl	8000648 <__aeabi_dmul>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4630      	mov	r0, r6
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	f7f9 fafb 	bl	80002dc <__adddf3>
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f7f9 ff5d 	bl	8000ba8 <__aeabi_d2iz>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	9000      	str	r0, [sp, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 ff18 	bl	8000b2c <__aeabi_dcmplt>
 8006cfc:	b150      	cbz	r0, 8006d14 <_dtoa_r+0x184>
 8006cfe:	9800      	ldr	r0, [sp, #0]
 8006d00:	f7f9 fc38 	bl	8000574 <__aeabi_i2d>
 8006d04:	4632      	mov	r2, r6
 8006d06:	463b      	mov	r3, r7
 8006d08:	f7f9 ff06 	bl	8000b18 <__aeabi_dcmpeq>
 8006d0c:	b910      	cbnz	r0, 8006d14 <_dtoa_r+0x184>
 8006d0e:	9b00      	ldr	r3, [sp, #0]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	9b00      	ldr	r3, [sp, #0]
 8006d16:	2b16      	cmp	r3, #22
 8006d18:	d85a      	bhi.n	8006dd0 <_dtoa_r+0x240>
 8006d1a:	9a00      	ldr	r2, [sp, #0]
 8006d1c:	4b57      	ldr	r3, [pc, #348]	; (8006e7c <_dtoa_r+0x2ec>)
 8006d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	ec51 0b19 	vmov	r0, r1, d9
 8006d2a:	f7f9 feff 	bl	8000b2c <__aeabi_dcmplt>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d050      	beq.n	8006dd4 <_dtoa_r+0x244>
 8006d32:	9b00      	ldr	r3, [sp, #0]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d3e:	1b5d      	subs	r5, r3, r5
 8006d40:	1e6b      	subs	r3, r5, #1
 8006d42:	9305      	str	r3, [sp, #20]
 8006d44:	bf45      	ittet	mi
 8006d46:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d4a:	9304      	strmi	r3, [sp, #16]
 8006d4c:	2300      	movpl	r3, #0
 8006d4e:	2300      	movmi	r3, #0
 8006d50:	bf4c      	ite	mi
 8006d52:	9305      	strmi	r3, [sp, #20]
 8006d54:	9304      	strpl	r3, [sp, #16]
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	db3d      	blt.n	8006dd8 <_dtoa_r+0x248>
 8006d5c:	9b05      	ldr	r3, [sp, #20]
 8006d5e:	9a00      	ldr	r2, [sp, #0]
 8006d60:	920a      	str	r2, [sp, #40]	; 0x28
 8006d62:	4413      	add	r3, r2
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	2300      	movs	r3, #0
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	2b09      	cmp	r3, #9
 8006d6e:	f200 8089 	bhi.w	8006e84 <_dtoa_r+0x2f4>
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	bfc4      	itt	gt
 8006d76:	3b04      	subgt	r3, #4
 8006d78:	9306      	strgt	r3, [sp, #24]
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d80:	bfcc      	ite	gt
 8006d82:	2500      	movgt	r5, #0
 8006d84:	2501      	movle	r5, #1
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	f200 8087 	bhi.w	8006e9a <_dtoa_r+0x30a>
 8006d8c:	e8df f003 	tbb	[pc, r3]
 8006d90:	59383a2d 	.word	0x59383a2d
 8006d94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d98:	441d      	add	r5, r3
 8006d9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	bfc1      	itttt	gt
 8006da2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006da6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006daa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006dae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006db2:	bfda      	itte	le
 8006db4:	f1c3 0320 	rsble	r3, r3, #32
 8006db8:	fa06 f003 	lslle.w	r0, r6, r3
 8006dbc:	4318      	orrgt	r0, r3
 8006dbe:	f7f9 fbc9 	bl	8000554 <__aeabi_ui2d>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006dca:	3d01      	subs	r5, #1
 8006dcc:	930e      	str	r3, [sp, #56]	; 0x38
 8006dce:	e76a      	b.n	8006ca6 <_dtoa_r+0x116>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e7b2      	b.n	8006d3a <_dtoa_r+0x1aa>
 8006dd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dd6:	e7b1      	b.n	8006d3c <_dtoa_r+0x1ac>
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	9a00      	ldr	r2, [sp, #0]
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	4253      	negs	r3, r2
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	2300      	movs	r3, #0
 8006de6:	930a      	str	r3, [sp, #40]	; 0x28
 8006de8:	e7bf      	b.n	8006d6a <_dtoa_r+0x1da>
 8006dea:	2300      	movs	r3, #0
 8006dec:	9308      	str	r3, [sp, #32]
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc55      	bgt.n	8006ea0 <_dtoa_r+0x310>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dfe:	e00c      	b.n	8006e1a <_dtoa_r+0x28a>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e7f3      	b.n	8006dec <_dtoa_r+0x25c>
 8006e04:	2300      	movs	r3, #0
 8006e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	9b00      	ldr	r3, [sp, #0]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	9302      	str	r3, [sp, #8]
 8006e10:	3301      	adds	r3, #1
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	9303      	str	r3, [sp, #12]
 8006e16:	bfb8      	it	lt
 8006e18:	2301      	movlt	r3, #1
 8006e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	6042      	str	r2, [r0, #4]
 8006e20:	2204      	movs	r2, #4
 8006e22:	f102 0614 	add.w	r6, r2, #20
 8006e26:	429e      	cmp	r6, r3
 8006e28:	6841      	ldr	r1, [r0, #4]
 8006e2a:	d93d      	bls.n	8006ea8 <_dtoa_r+0x318>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fcb7 	bl	80077a0 <_Balloc>
 8006e32:	9001      	str	r0, [sp, #4]
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d13b      	bne.n	8006eb0 <_dtoa_r+0x320>
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <_dtoa_r+0x2f0>)
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e40:	e6c0      	b.n	8006bc4 <_dtoa_r+0x34>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e7df      	b.n	8006e06 <_dtoa_r+0x276>
 8006e46:	bf00      	nop
 8006e48:	636f4361 	.word	0x636f4361
 8006e4c:	3fd287a7 	.word	0x3fd287a7
 8006e50:	8b60c8b3 	.word	0x8b60c8b3
 8006e54:	3fc68a28 	.word	0x3fc68a28
 8006e58:	509f79fb 	.word	0x509f79fb
 8006e5c:	3fd34413 	.word	0x3fd34413
 8006e60:	0800903d 	.word	0x0800903d
 8006e64:	08009054 	.word	0x08009054
 8006e68:	7ff00000 	.word	0x7ff00000
 8006e6c:	08009039 	.word	0x08009039
 8006e70:	08009030 	.word	0x08009030
 8006e74:	0800900d 	.word	0x0800900d
 8006e78:	3ff80000 	.word	0x3ff80000
 8006e7c:	08009148 	.word	0x08009148
 8006e80:	080090af 	.word	0x080090af
 8006e84:	2501      	movs	r5, #1
 8006e86:	2300      	movs	r3, #0
 8006e88:	9306      	str	r3, [sp, #24]
 8006e8a:	9508      	str	r5, [sp, #32]
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2312      	movs	r3, #18
 8006e98:	e7b0      	b.n	8006dfc <_dtoa_r+0x26c>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	9308      	str	r3, [sp, #32]
 8006e9e:	e7f5      	b.n	8006e8c <_dtoa_r+0x2fc>
 8006ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ea6:	e7b8      	b.n	8006e1a <_dtoa_r+0x28a>
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	6041      	str	r1, [r0, #4]
 8006eac:	0052      	lsls	r2, r2, #1
 8006eae:	e7b8      	b.n	8006e22 <_dtoa_r+0x292>
 8006eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb2:	9a01      	ldr	r2, [sp, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	2b0e      	cmp	r3, #14
 8006eba:	f200 809d 	bhi.w	8006ff8 <_dtoa_r+0x468>
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	f000 809a 	beq.w	8006ff8 <_dtoa_r+0x468>
 8006ec4:	9b00      	ldr	r3, [sp, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dd32      	ble.n	8006f30 <_dtoa_r+0x3a0>
 8006eca:	4ab7      	ldr	r2, [pc, #732]	; (80071a8 <_dtoa_r+0x618>)
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ed4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed8:	9b00      	ldr	r3, [sp, #0]
 8006eda:	05d8      	lsls	r0, r3, #23
 8006edc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ee0:	d516      	bpl.n	8006f10 <_dtoa_r+0x380>
 8006ee2:	4bb2      	ldr	r3, [pc, #712]	; (80071ac <_dtoa_r+0x61c>)
 8006ee4:	ec51 0b19 	vmov	r0, r1, d9
 8006ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eec:	f7f9 fcd6 	bl	800089c <__aeabi_ddiv>
 8006ef0:	f007 070f 	and.w	r7, r7, #15
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	468b      	mov	fp, r1
 8006ef8:	2503      	movs	r5, #3
 8006efa:	4eac      	ldr	r6, [pc, #688]	; (80071ac <_dtoa_r+0x61c>)
 8006efc:	b957      	cbnz	r7, 8006f14 <_dtoa_r+0x384>
 8006efe:	4642      	mov	r2, r8
 8006f00:	464b      	mov	r3, r9
 8006f02:	4650      	mov	r0, sl
 8006f04:	4659      	mov	r1, fp
 8006f06:	f7f9 fcc9 	bl	800089c <__aeabi_ddiv>
 8006f0a:	4682      	mov	sl, r0
 8006f0c:	468b      	mov	fp, r1
 8006f0e:	e028      	b.n	8006f62 <_dtoa_r+0x3d2>
 8006f10:	2502      	movs	r5, #2
 8006f12:	e7f2      	b.n	8006efa <_dtoa_r+0x36a>
 8006f14:	07f9      	lsls	r1, r7, #31
 8006f16:	d508      	bpl.n	8006f2a <_dtoa_r+0x39a>
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f20:	f7f9 fb92 	bl	8000648 <__aeabi_dmul>
 8006f24:	3501      	adds	r5, #1
 8006f26:	4680      	mov	r8, r0
 8006f28:	4689      	mov	r9, r1
 8006f2a:	107f      	asrs	r7, r7, #1
 8006f2c:	3608      	adds	r6, #8
 8006f2e:	e7e5      	b.n	8006efc <_dtoa_r+0x36c>
 8006f30:	f000 809b 	beq.w	800706a <_dtoa_r+0x4da>
 8006f34:	9b00      	ldr	r3, [sp, #0]
 8006f36:	4f9d      	ldr	r7, [pc, #628]	; (80071ac <_dtoa_r+0x61c>)
 8006f38:	425e      	negs	r6, r3
 8006f3a:	4b9b      	ldr	r3, [pc, #620]	; (80071a8 <_dtoa_r+0x618>)
 8006f3c:	f006 020f 	and.w	r2, r6, #15
 8006f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	ec51 0b19 	vmov	r0, r1, d9
 8006f4c:	f7f9 fb7c 	bl	8000648 <__aeabi_dmul>
 8006f50:	1136      	asrs	r6, r6, #4
 8006f52:	4682      	mov	sl, r0
 8006f54:	468b      	mov	fp, r1
 8006f56:	2300      	movs	r3, #0
 8006f58:	2502      	movs	r5, #2
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	d17a      	bne.n	8007054 <_dtoa_r+0x4c4>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1d3      	bne.n	8006f0a <_dtoa_r+0x37a>
 8006f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8082 	beq.w	800706e <_dtoa_r+0x4de>
 8006f6a:	4b91      	ldr	r3, [pc, #580]	; (80071b0 <_dtoa_r+0x620>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4650      	mov	r0, sl
 8006f70:	4659      	mov	r1, fp
 8006f72:	f7f9 fddb 	bl	8000b2c <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d079      	beq.n	800706e <_dtoa_r+0x4de>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d076      	beq.n	800706e <_dtoa_r+0x4de>
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dd36      	ble.n	8006ff4 <_dtoa_r+0x464>
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	4650      	mov	r0, sl
 8006f8a:	4659      	mov	r1, fp
 8006f8c:	1e5f      	subs	r7, r3, #1
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4b88      	ldr	r3, [pc, #544]	; (80071b4 <_dtoa_r+0x624>)
 8006f92:	f7f9 fb59 	bl	8000648 <__aeabi_dmul>
 8006f96:	9e02      	ldr	r6, [sp, #8]
 8006f98:	4682      	mov	sl, r0
 8006f9a:	468b      	mov	fp, r1
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f7f9 fae8 	bl	8000574 <__aeabi_i2d>
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	465b      	mov	r3, fp
 8006fa8:	f7f9 fb4e 	bl	8000648 <__aeabi_dmul>
 8006fac:	4b82      	ldr	r3, [pc, #520]	; (80071b8 <_dtoa_r+0x628>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f7f9 f994 	bl	80002dc <__adddf3>
 8006fb4:	46d0      	mov	r8, sl
 8006fb6:	46d9      	mov	r9, fp
 8006fb8:	4682      	mov	sl, r0
 8006fba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	d158      	bne.n	8007074 <_dtoa_r+0x4e4>
 8006fc2:	4b7e      	ldr	r3, [pc, #504]	; (80071bc <_dtoa_r+0x62c>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	4649      	mov	r1, r9
 8006fca:	f7f9 f985 	bl	80002d8 <__aeabi_dsub>
 8006fce:	4652      	mov	r2, sl
 8006fd0:	465b      	mov	r3, fp
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	f7f9 fdc7 	bl	8000b68 <__aeabi_dcmpgt>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	f040 8295 	bne.w	800750a <_dtoa_r+0x97a>
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4649      	mov	r1, r9
 8006fea:	f7f9 fd9f 	bl	8000b2c <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f040 8289 	bne.w	8007506 <_dtoa_r+0x976>
 8006ff4:	ec5b ab19 	vmov	sl, fp, d9
 8006ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f2c0 8148 	blt.w	8007290 <_dtoa_r+0x700>
 8007000:	9a00      	ldr	r2, [sp, #0]
 8007002:	2a0e      	cmp	r2, #14
 8007004:	f300 8144 	bgt.w	8007290 <_dtoa_r+0x700>
 8007008:	4b67      	ldr	r3, [pc, #412]	; (80071a8 <_dtoa_r+0x618>)
 800700a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800700e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	f280 80d5 	bge.w	80071c4 <_dtoa_r+0x634>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f300 80d1 	bgt.w	80071c4 <_dtoa_r+0x634>
 8007022:	f040 826f 	bne.w	8007504 <_dtoa_r+0x974>
 8007026:	4b65      	ldr	r3, [pc, #404]	; (80071bc <_dtoa_r+0x62c>)
 8007028:	2200      	movs	r2, #0
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 fb0b 	bl	8000648 <__aeabi_dmul>
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	f7f9 fd8d 	bl	8000b54 <__aeabi_dcmpge>
 800703a:	9e03      	ldr	r6, [sp, #12]
 800703c:	4637      	mov	r7, r6
 800703e:	2800      	cmp	r0, #0
 8007040:	f040 8245 	bne.w	80074ce <_dtoa_r+0x93e>
 8007044:	9d01      	ldr	r5, [sp, #4]
 8007046:	2331      	movs	r3, #49	; 0x31
 8007048:	f805 3b01 	strb.w	r3, [r5], #1
 800704c:	9b00      	ldr	r3, [sp, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	e240      	b.n	80074d6 <_dtoa_r+0x946>
 8007054:	07f2      	lsls	r2, r6, #31
 8007056:	d505      	bpl.n	8007064 <_dtoa_r+0x4d4>
 8007058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800705c:	f7f9 faf4 	bl	8000648 <__aeabi_dmul>
 8007060:	3501      	adds	r5, #1
 8007062:	2301      	movs	r3, #1
 8007064:	1076      	asrs	r6, r6, #1
 8007066:	3708      	adds	r7, #8
 8007068:	e777      	b.n	8006f5a <_dtoa_r+0x3ca>
 800706a:	2502      	movs	r5, #2
 800706c:	e779      	b.n	8006f62 <_dtoa_r+0x3d2>
 800706e:	9f00      	ldr	r7, [sp, #0]
 8007070:	9e03      	ldr	r6, [sp, #12]
 8007072:	e794      	b.n	8006f9e <_dtoa_r+0x40e>
 8007074:	9901      	ldr	r1, [sp, #4]
 8007076:	4b4c      	ldr	r3, [pc, #304]	; (80071a8 <_dtoa_r+0x618>)
 8007078:	4431      	add	r1, r6
 800707a:	910d      	str	r1, [sp, #52]	; 0x34
 800707c:	9908      	ldr	r1, [sp, #32]
 800707e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007082:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007086:	2900      	cmp	r1, #0
 8007088:	d043      	beq.n	8007112 <_dtoa_r+0x582>
 800708a:	494d      	ldr	r1, [pc, #308]	; (80071c0 <_dtoa_r+0x630>)
 800708c:	2000      	movs	r0, #0
 800708e:	f7f9 fc05 	bl	800089c <__aeabi_ddiv>
 8007092:	4652      	mov	r2, sl
 8007094:	465b      	mov	r3, fp
 8007096:	f7f9 f91f 	bl	80002d8 <__aeabi_dsub>
 800709a:	9d01      	ldr	r5, [sp, #4]
 800709c:	4682      	mov	sl, r0
 800709e:	468b      	mov	fp, r1
 80070a0:	4649      	mov	r1, r9
 80070a2:	4640      	mov	r0, r8
 80070a4:	f7f9 fd80 	bl	8000ba8 <__aeabi_d2iz>
 80070a8:	4606      	mov	r6, r0
 80070aa:	f7f9 fa63 	bl	8000574 <__aeabi_i2d>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4640      	mov	r0, r8
 80070b4:	4649      	mov	r1, r9
 80070b6:	f7f9 f90f 	bl	80002d8 <__aeabi_dsub>
 80070ba:	3630      	adds	r6, #48	; 0x30
 80070bc:	f805 6b01 	strb.w	r6, [r5], #1
 80070c0:	4652      	mov	r2, sl
 80070c2:	465b      	mov	r3, fp
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	f7f9 fd30 	bl	8000b2c <__aeabi_dcmplt>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d163      	bne.n	8007198 <_dtoa_r+0x608>
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	4936      	ldr	r1, [pc, #216]	; (80071b0 <_dtoa_r+0x620>)
 80070d6:	2000      	movs	r0, #0
 80070d8:	f7f9 f8fe 	bl	80002d8 <__aeabi_dsub>
 80070dc:	4652      	mov	r2, sl
 80070de:	465b      	mov	r3, fp
 80070e0:	f7f9 fd24 	bl	8000b2c <__aeabi_dcmplt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f040 80b5 	bne.w	8007254 <_dtoa_r+0x6c4>
 80070ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ec:	429d      	cmp	r5, r3
 80070ee:	d081      	beq.n	8006ff4 <_dtoa_r+0x464>
 80070f0:	4b30      	ldr	r3, [pc, #192]	; (80071b4 <_dtoa_r+0x624>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	4650      	mov	r0, sl
 80070f6:	4659      	mov	r1, fp
 80070f8:	f7f9 faa6 	bl	8000648 <__aeabi_dmul>
 80070fc:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <_dtoa_r+0x624>)
 80070fe:	4682      	mov	sl, r0
 8007100:	468b      	mov	fp, r1
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	2200      	movs	r2, #0
 8007108:	f7f9 fa9e 	bl	8000648 <__aeabi_dmul>
 800710c:	4680      	mov	r8, r0
 800710e:	4689      	mov	r9, r1
 8007110:	e7c6      	b.n	80070a0 <_dtoa_r+0x510>
 8007112:	4650      	mov	r0, sl
 8007114:	4659      	mov	r1, fp
 8007116:	f7f9 fa97 	bl	8000648 <__aeabi_dmul>
 800711a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711c:	9d01      	ldr	r5, [sp, #4]
 800711e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007120:	4682      	mov	sl, r0
 8007122:	468b      	mov	fp, r1
 8007124:	4649      	mov	r1, r9
 8007126:	4640      	mov	r0, r8
 8007128:	f7f9 fd3e 	bl	8000ba8 <__aeabi_d2iz>
 800712c:	4606      	mov	r6, r0
 800712e:	f7f9 fa21 	bl	8000574 <__aeabi_i2d>
 8007132:	3630      	adds	r6, #48	; 0x30
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4640      	mov	r0, r8
 800713a:	4649      	mov	r1, r9
 800713c:	f7f9 f8cc 	bl	80002d8 <__aeabi_dsub>
 8007140:	f805 6b01 	strb.w	r6, [r5], #1
 8007144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007146:	429d      	cmp	r5, r3
 8007148:	4680      	mov	r8, r0
 800714a:	4689      	mov	r9, r1
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	d124      	bne.n	800719c <_dtoa_r+0x60c>
 8007152:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <_dtoa_r+0x630>)
 8007154:	4650      	mov	r0, sl
 8007156:	4659      	mov	r1, fp
 8007158:	f7f9 f8c0 	bl	80002dc <__adddf3>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fd00 	bl	8000b68 <__aeabi_dcmpgt>
 8007168:	2800      	cmp	r0, #0
 800716a:	d173      	bne.n	8007254 <_dtoa_r+0x6c4>
 800716c:	4652      	mov	r2, sl
 800716e:	465b      	mov	r3, fp
 8007170:	4913      	ldr	r1, [pc, #76]	; (80071c0 <_dtoa_r+0x630>)
 8007172:	2000      	movs	r0, #0
 8007174:	f7f9 f8b0 	bl	80002d8 <__aeabi_dsub>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4640      	mov	r0, r8
 800717e:	4649      	mov	r1, r9
 8007180:	f7f9 fcd4 	bl	8000b2c <__aeabi_dcmplt>
 8007184:	2800      	cmp	r0, #0
 8007186:	f43f af35 	beq.w	8006ff4 <_dtoa_r+0x464>
 800718a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800718c:	1e6b      	subs	r3, r5, #1
 800718e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007190:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007194:	2b30      	cmp	r3, #48	; 0x30
 8007196:	d0f8      	beq.n	800718a <_dtoa_r+0x5fa>
 8007198:	9700      	str	r7, [sp, #0]
 800719a:	e049      	b.n	8007230 <_dtoa_r+0x6a0>
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <_dtoa_r+0x624>)
 800719e:	f7f9 fa53 	bl	8000648 <__aeabi_dmul>
 80071a2:	4680      	mov	r8, r0
 80071a4:	4689      	mov	r9, r1
 80071a6:	e7bd      	b.n	8007124 <_dtoa_r+0x594>
 80071a8:	08009148 	.word	0x08009148
 80071ac:	08009120 	.word	0x08009120
 80071b0:	3ff00000 	.word	0x3ff00000
 80071b4:	40240000 	.word	0x40240000
 80071b8:	401c0000 	.word	0x401c0000
 80071bc:	40140000 	.word	0x40140000
 80071c0:	3fe00000 	.word	0x3fe00000
 80071c4:	9d01      	ldr	r5, [sp, #4]
 80071c6:	4656      	mov	r6, sl
 80071c8:	465f      	mov	r7, fp
 80071ca:	4642      	mov	r2, r8
 80071cc:	464b      	mov	r3, r9
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fb63 	bl	800089c <__aeabi_ddiv>
 80071d6:	f7f9 fce7 	bl	8000ba8 <__aeabi_d2iz>
 80071da:	4682      	mov	sl, r0
 80071dc:	f7f9 f9ca 	bl	8000574 <__aeabi_i2d>
 80071e0:	4642      	mov	r2, r8
 80071e2:	464b      	mov	r3, r9
 80071e4:	f7f9 fa30 	bl	8000648 <__aeabi_dmul>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071f4:	f7f9 f870 	bl	80002d8 <__aeabi_dsub>
 80071f8:	f805 6b01 	strb.w	r6, [r5], #1
 80071fc:	9e01      	ldr	r6, [sp, #4]
 80071fe:	9f03      	ldr	r7, [sp, #12]
 8007200:	1bae      	subs	r6, r5, r6
 8007202:	42b7      	cmp	r7, r6
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	d135      	bne.n	8007276 <_dtoa_r+0x6e6>
 800720a:	f7f9 f867 	bl	80002dc <__adddf3>
 800720e:	4642      	mov	r2, r8
 8007210:	464b      	mov	r3, r9
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	f7f9 fca7 	bl	8000b68 <__aeabi_dcmpgt>
 800721a:	b9d0      	cbnz	r0, 8007252 <_dtoa_r+0x6c2>
 800721c:	4642      	mov	r2, r8
 800721e:	464b      	mov	r3, r9
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 fc78 	bl	8000b18 <__aeabi_dcmpeq>
 8007228:	b110      	cbz	r0, 8007230 <_dtoa_r+0x6a0>
 800722a:	f01a 0f01 	tst.w	sl, #1
 800722e:	d110      	bne.n	8007252 <_dtoa_r+0x6c2>
 8007230:	4620      	mov	r0, r4
 8007232:	ee18 1a10 	vmov	r1, s16
 8007236:	f000 faf3 	bl	8007820 <_Bfree>
 800723a:	2300      	movs	r3, #0
 800723c:	9800      	ldr	r0, [sp, #0]
 800723e:	702b      	strb	r3, [r5, #0]
 8007240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007242:	3001      	adds	r0, #1
 8007244:	6018      	str	r0, [r3, #0]
 8007246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007248:	2b00      	cmp	r3, #0
 800724a:	f43f acf1 	beq.w	8006c30 <_dtoa_r+0xa0>
 800724e:	601d      	str	r5, [r3, #0]
 8007250:	e4ee      	b.n	8006c30 <_dtoa_r+0xa0>
 8007252:	9f00      	ldr	r7, [sp, #0]
 8007254:	462b      	mov	r3, r5
 8007256:	461d      	mov	r5, r3
 8007258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800725c:	2a39      	cmp	r2, #57	; 0x39
 800725e:	d106      	bne.n	800726e <_dtoa_r+0x6de>
 8007260:	9a01      	ldr	r2, [sp, #4]
 8007262:	429a      	cmp	r2, r3
 8007264:	d1f7      	bne.n	8007256 <_dtoa_r+0x6c6>
 8007266:	9901      	ldr	r1, [sp, #4]
 8007268:	2230      	movs	r2, #48	; 0x30
 800726a:	3701      	adds	r7, #1
 800726c:	700a      	strb	r2, [r1, #0]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	3201      	adds	r2, #1
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e790      	b.n	8007198 <_dtoa_r+0x608>
 8007276:	4ba6      	ldr	r3, [pc, #664]	; (8007510 <_dtoa_r+0x980>)
 8007278:	2200      	movs	r2, #0
 800727a:	f7f9 f9e5 	bl	8000648 <__aeabi_dmul>
 800727e:	2200      	movs	r2, #0
 8007280:	2300      	movs	r3, #0
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	f7f9 fc47 	bl	8000b18 <__aeabi_dcmpeq>
 800728a:	2800      	cmp	r0, #0
 800728c:	d09d      	beq.n	80071ca <_dtoa_r+0x63a>
 800728e:	e7cf      	b.n	8007230 <_dtoa_r+0x6a0>
 8007290:	9a08      	ldr	r2, [sp, #32]
 8007292:	2a00      	cmp	r2, #0
 8007294:	f000 80d7 	beq.w	8007446 <_dtoa_r+0x8b6>
 8007298:	9a06      	ldr	r2, [sp, #24]
 800729a:	2a01      	cmp	r2, #1
 800729c:	f300 80ba 	bgt.w	8007414 <_dtoa_r+0x884>
 80072a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	f000 80b2 	beq.w	800740c <_dtoa_r+0x87c>
 80072a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072ac:	9e07      	ldr	r6, [sp, #28]
 80072ae:	9d04      	ldr	r5, [sp, #16]
 80072b0:	9a04      	ldr	r2, [sp, #16]
 80072b2:	441a      	add	r2, r3
 80072b4:	9204      	str	r2, [sp, #16]
 80072b6:	9a05      	ldr	r2, [sp, #20]
 80072b8:	2101      	movs	r1, #1
 80072ba:	441a      	add	r2, r3
 80072bc:	4620      	mov	r0, r4
 80072be:	9205      	str	r2, [sp, #20]
 80072c0:	f000 fb66 	bl	8007990 <__i2b>
 80072c4:	4607      	mov	r7, r0
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	dd0c      	ble.n	80072e4 <_dtoa_r+0x754>
 80072ca:	9b05      	ldr	r3, [sp, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd09      	ble.n	80072e4 <_dtoa_r+0x754>
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	9a04      	ldr	r2, [sp, #16]
 80072d4:	bfa8      	it	ge
 80072d6:	462b      	movge	r3, r5
 80072d8:	1ad2      	subs	r2, r2, r3
 80072da:	9204      	str	r2, [sp, #16]
 80072dc:	9a05      	ldr	r2, [sp, #20]
 80072de:	1aed      	subs	r5, r5, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	b31b      	cbz	r3, 8007330 <_dtoa_r+0x7a0>
 80072e8:	9b08      	ldr	r3, [sp, #32]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80af 	beq.w	800744e <_dtoa_r+0x8be>
 80072f0:	2e00      	cmp	r6, #0
 80072f2:	dd13      	ble.n	800731c <_dtoa_r+0x78c>
 80072f4:	4639      	mov	r1, r7
 80072f6:	4632      	mov	r2, r6
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fc09 	bl	8007b10 <__pow5mult>
 80072fe:	ee18 2a10 	vmov	r2, s16
 8007302:	4601      	mov	r1, r0
 8007304:	4607      	mov	r7, r0
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fb58 	bl	80079bc <__multiply>
 800730c:	ee18 1a10 	vmov	r1, s16
 8007310:	4680      	mov	r8, r0
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fa84 	bl	8007820 <_Bfree>
 8007318:	ee08 8a10 	vmov	s16, r8
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	1b9a      	subs	r2, r3, r6
 8007320:	d006      	beq.n	8007330 <_dtoa_r+0x7a0>
 8007322:	ee18 1a10 	vmov	r1, s16
 8007326:	4620      	mov	r0, r4
 8007328:	f000 fbf2 	bl	8007b10 <__pow5mult>
 800732c:	ee08 0a10 	vmov	s16, r0
 8007330:	2101      	movs	r1, #1
 8007332:	4620      	mov	r0, r4
 8007334:	f000 fb2c 	bl	8007990 <__i2b>
 8007338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800733a:	2b00      	cmp	r3, #0
 800733c:	4606      	mov	r6, r0
 800733e:	f340 8088 	ble.w	8007452 <_dtoa_r+0x8c2>
 8007342:	461a      	mov	r2, r3
 8007344:	4601      	mov	r1, r0
 8007346:	4620      	mov	r0, r4
 8007348:	f000 fbe2 	bl	8007b10 <__pow5mult>
 800734c:	9b06      	ldr	r3, [sp, #24]
 800734e:	2b01      	cmp	r3, #1
 8007350:	4606      	mov	r6, r0
 8007352:	f340 8081 	ble.w	8007458 <_dtoa_r+0x8c8>
 8007356:	f04f 0800 	mov.w	r8, #0
 800735a:	6933      	ldr	r3, [r6, #16]
 800735c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007360:	6918      	ldr	r0, [r3, #16]
 8007362:	f000 fac5 	bl	80078f0 <__hi0bits>
 8007366:	f1c0 0020 	rsb	r0, r0, #32
 800736a:	9b05      	ldr	r3, [sp, #20]
 800736c:	4418      	add	r0, r3
 800736e:	f010 001f 	ands.w	r0, r0, #31
 8007372:	f000 8092 	beq.w	800749a <_dtoa_r+0x90a>
 8007376:	f1c0 0320 	rsb	r3, r0, #32
 800737a:	2b04      	cmp	r3, #4
 800737c:	f340 808a 	ble.w	8007494 <_dtoa_r+0x904>
 8007380:	f1c0 001c 	rsb	r0, r0, #28
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	4403      	add	r3, r0
 8007388:	9304      	str	r3, [sp, #16]
 800738a:	9b05      	ldr	r3, [sp, #20]
 800738c:	4403      	add	r3, r0
 800738e:	4405      	add	r5, r0
 8007390:	9305      	str	r3, [sp, #20]
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dd07      	ble.n	80073a8 <_dtoa_r+0x818>
 8007398:	ee18 1a10 	vmov	r1, s16
 800739c:	461a      	mov	r2, r3
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fc10 	bl	8007bc4 <__lshift>
 80073a4:	ee08 0a10 	vmov	s16, r0
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	dd05      	ble.n	80073ba <_dtoa_r+0x82a>
 80073ae:	4631      	mov	r1, r6
 80073b0:	461a      	mov	r2, r3
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fc06 	bl	8007bc4 <__lshift>
 80073b8:	4606      	mov	r6, r0
 80073ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d06e      	beq.n	800749e <_dtoa_r+0x90e>
 80073c0:	ee18 0a10 	vmov	r0, s16
 80073c4:	4631      	mov	r1, r6
 80073c6:	f000 fc6d 	bl	8007ca4 <__mcmp>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	da67      	bge.n	800749e <_dtoa_r+0x90e>
 80073ce:	9b00      	ldr	r3, [sp, #0]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	ee18 1a10 	vmov	r1, s16
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	220a      	movs	r2, #10
 80073da:	2300      	movs	r3, #0
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fa41 	bl	8007864 <__multadd>
 80073e2:	9b08      	ldr	r3, [sp, #32]
 80073e4:	ee08 0a10 	vmov	s16, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 81b1 	beq.w	8007750 <_dtoa_r+0xbc0>
 80073ee:	2300      	movs	r3, #0
 80073f0:	4639      	mov	r1, r7
 80073f2:	220a      	movs	r2, #10
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 fa35 	bl	8007864 <__multadd>
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	4607      	mov	r7, r0
 8007400:	f300 808e 	bgt.w	8007520 <_dtoa_r+0x990>
 8007404:	9b06      	ldr	r3, [sp, #24]
 8007406:	2b02      	cmp	r3, #2
 8007408:	dc51      	bgt.n	80074ae <_dtoa_r+0x91e>
 800740a:	e089      	b.n	8007520 <_dtoa_r+0x990>
 800740c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800740e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007412:	e74b      	b.n	80072ac <_dtoa_r+0x71c>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	1e5e      	subs	r6, r3, #1
 8007418:	9b07      	ldr	r3, [sp, #28]
 800741a:	42b3      	cmp	r3, r6
 800741c:	bfbf      	itttt	lt
 800741e:	9b07      	ldrlt	r3, [sp, #28]
 8007420:	9607      	strlt	r6, [sp, #28]
 8007422:	1af2      	sublt	r2, r6, r3
 8007424:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007426:	bfb6      	itet	lt
 8007428:	189b      	addlt	r3, r3, r2
 800742a:	1b9e      	subge	r6, r3, r6
 800742c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	bfb8      	it	lt
 8007432:	2600      	movlt	r6, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	bfb7      	itett	lt
 8007438:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800743c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007440:	1a9d      	sublt	r5, r3, r2
 8007442:	2300      	movlt	r3, #0
 8007444:	e734      	b.n	80072b0 <_dtoa_r+0x720>
 8007446:	9e07      	ldr	r6, [sp, #28]
 8007448:	9d04      	ldr	r5, [sp, #16]
 800744a:	9f08      	ldr	r7, [sp, #32]
 800744c:	e73b      	b.n	80072c6 <_dtoa_r+0x736>
 800744e:	9a07      	ldr	r2, [sp, #28]
 8007450:	e767      	b.n	8007322 <_dtoa_r+0x792>
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	2b01      	cmp	r3, #1
 8007456:	dc18      	bgt.n	800748a <_dtoa_r+0x8fa>
 8007458:	f1ba 0f00 	cmp.w	sl, #0
 800745c:	d115      	bne.n	800748a <_dtoa_r+0x8fa>
 800745e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007462:	b993      	cbnz	r3, 800748a <_dtoa_r+0x8fa>
 8007464:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007468:	0d1b      	lsrs	r3, r3, #20
 800746a:	051b      	lsls	r3, r3, #20
 800746c:	b183      	cbz	r3, 8007490 <_dtoa_r+0x900>
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	3301      	adds	r3, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	9b05      	ldr	r3, [sp, #20]
 8007476:	3301      	adds	r3, #1
 8007478:	9305      	str	r3, [sp, #20]
 800747a:	f04f 0801 	mov.w	r8, #1
 800747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	f47f af6a 	bne.w	800735a <_dtoa_r+0x7ca>
 8007486:	2001      	movs	r0, #1
 8007488:	e76f      	b.n	800736a <_dtoa_r+0x7da>
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	e7f6      	b.n	800747e <_dtoa_r+0x8ee>
 8007490:	4698      	mov	r8, r3
 8007492:	e7f4      	b.n	800747e <_dtoa_r+0x8ee>
 8007494:	f43f af7d 	beq.w	8007392 <_dtoa_r+0x802>
 8007498:	4618      	mov	r0, r3
 800749a:	301c      	adds	r0, #28
 800749c:	e772      	b.n	8007384 <_dtoa_r+0x7f4>
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc37      	bgt.n	8007514 <_dtoa_r+0x984>
 80074a4:	9b06      	ldr	r3, [sp, #24]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	dd34      	ble.n	8007514 <_dtoa_r+0x984>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	9302      	str	r3, [sp, #8]
 80074ae:	9b02      	ldr	r3, [sp, #8]
 80074b0:	b96b      	cbnz	r3, 80074ce <_dtoa_r+0x93e>
 80074b2:	4631      	mov	r1, r6
 80074b4:	2205      	movs	r2, #5
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 f9d4 	bl	8007864 <__multadd>
 80074bc:	4601      	mov	r1, r0
 80074be:	4606      	mov	r6, r0
 80074c0:	ee18 0a10 	vmov	r0, s16
 80074c4:	f000 fbee 	bl	8007ca4 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f73f adbb 	bgt.w	8007044 <_dtoa_r+0x4b4>
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	9d01      	ldr	r5, [sp, #4]
 80074d2:	43db      	mvns	r3, r3
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	4631      	mov	r1, r6
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 f99f 	bl	8007820 <_Bfree>
 80074e2:	2f00      	cmp	r7, #0
 80074e4:	f43f aea4 	beq.w	8007230 <_dtoa_r+0x6a0>
 80074e8:	f1b8 0f00 	cmp.w	r8, #0
 80074ec:	d005      	beq.n	80074fa <_dtoa_r+0x96a>
 80074ee:	45b8      	cmp	r8, r7
 80074f0:	d003      	beq.n	80074fa <_dtoa_r+0x96a>
 80074f2:	4641      	mov	r1, r8
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 f993 	bl	8007820 <_Bfree>
 80074fa:	4639      	mov	r1, r7
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 f98f 	bl	8007820 <_Bfree>
 8007502:	e695      	b.n	8007230 <_dtoa_r+0x6a0>
 8007504:	2600      	movs	r6, #0
 8007506:	4637      	mov	r7, r6
 8007508:	e7e1      	b.n	80074ce <_dtoa_r+0x93e>
 800750a:	9700      	str	r7, [sp, #0]
 800750c:	4637      	mov	r7, r6
 800750e:	e599      	b.n	8007044 <_dtoa_r+0x4b4>
 8007510:	40240000 	.word	0x40240000
 8007514:	9b08      	ldr	r3, [sp, #32]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80ca 	beq.w	80076b0 <_dtoa_r+0xb20>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	2d00      	cmp	r5, #0
 8007522:	dd05      	ble.n	8007530 <_dtoa_r+0x9a0>
 8007524:	4639      	mov	r1, r7
 8007526:	462a      	mov	r2, r5
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fb4b 	bl	8007bc4 <__lshift>
 800752e:	4607      	mov	r7, r0
 8007530:	f1b8 0f00 	cmp.w	r8, #0
 8007534:	d05b      	beq.n	80075ee <_dtoa_r+0xa5e>
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4620      	mov	r0, r4
 800753a:	f000 f931 	bl	80077a0 <_Balloc>
 800753e:	4605      	mov	r5, r0
 8007540:	b928      	cbnz	r0, 800754e <_dtoa_r+0x9be>
 8007542:	4b87      	ldr	r3, [pc, #540]	; (8007760 <_dtoa_r+0xbd0>)
 8007544:	4602      	mov	r2, r0
 8007546:	f240 21ea 	movw	r1, #746	; 0x2ea
 800754a:	f7ff bb3b 	b.w	8006bc4 <_dtoa_r+0x34>
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	3202      	adds	r2, #2
 8007552:	0092      	lsls	r2, r2, #2
 8007554:	f107 010c 	add.w	r1, r7, #12
 8007558:	300c      	adds	r0, #12
 800755a:	f000 f913 	bl	8007784 <memcpy>
 800755e:	2201      	movs	r2, #1
 8007560:	4629      	mov	r1, r5
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fb2e 	bl	8007bc4 <__lshift>
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	f103 0901 	add.w	r9, r3, #1
 800756e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007572:	4413      	add	r3, r2
 8007574:	9305      	str	r3, [sp, #20]
 8007576:	f00a 0301 	and.w	r3, sl, #1
 800757a:	46b8      	mov	r8, r7
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	4607      	mov	r7, r0
 8007580:	4631      	mov	r1, r6
 8007582:	ee18 0a10 	vmov	r0, s16
 8007586:	f7ff fa77 	bl	8006a78 <quorem>
 800758a:	4641      	mov	r1, r8
 800758c:	9002      	str	r0, [sp, #8]
 800758e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007592:	ee18 0a10 	vmov	r0, s16
 8007596:	f000 fb85 	bl	8007ca4 <__mcmp>
 800759a:	463a      	mov	r2, r7
 800759c:	9003      	str	r0, [sp, #12]
 800759e:	4631      	mov	r1, r6
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fb9b 	bl	8007cdc <__mdiff>
 80075a6:	68c2      	ldr	r2, [r0, #12]
 80075a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80075ac:	4605      	mov	r5, r0
 80075ae:	bb02      	cbnz	r2, 80075f2 <_dtoa_r+0xa62>
 80075b0:	4601      	mov	r1, r0
 80075b2:	ee18 0a10 	vmov	r0, s16
 80075b6:	f000 fb75 	bl	8007ca4 <__mcmp>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	9207      	str	r2, [sp, #28]
 80075c2:	f000 f92d 	bl	8007820 <_Bfree>
 80075c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075ca:	ea43 0102 	orr.w	r1, r3, r2
 80075ce:	9b04      	ldr	r3, [sp, #16]
 80075d0:	430b      	orrs	r3, r1
 80075d2:	464d      	mov	r5, r9
 80075d4:	d10f      	bne.n	80075f6 <_dtoa_r+0xa66>
 80075d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075da:	d02a      	beq.n	8007632 <_dtoa_r+0xaa2>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd02      	ble.n	80075e8 <_dtoa_r+0xa58>
 80075e2:	9b02      	ldr	r3, [sp, #8]
 80075e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075e8:	f88b a000 	strb.w	sl, [fp]
 80075ec:	e775      	b.n	80074da <_dtoa_r+0x94a>
 80075ee:	4638      	mov	r0, r7
 80075f0:	e7ba      	b.n	8007568 <_dtoa_r+0x9d8>
 80075f2:	2201      	movs	r2, #1
 80075f4:	e7e2      	b.n	80075bc <_dtoa_r+0xa2c>
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	db04      	blt.n	8007606 <_dtoa_r+0xa76>
 80075fc:	9906      	ldr	r1, [sp, #24]
 80075fe:	430b      	orrs	r3, r1
 8007600:	9904      	ldr	r1, [sp, #16]
 8007602:	430b      	orrs	r3, r1
 8007604:	d122      	bne.n	800764c <_dtoa_r+0xabc>
 8007606:	2a00      	cmp	r2, #0
 8007608:	ddee      	ble.n	80075e8 <_dtoa_r+0xa58>
 800760a:	ee18 1a10 	vmov	r1, s16
 800760e:	2201      	movs	r2, #1
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fad7 	bl	8007bc4 <__lshift>
 8007616:	4631      	mov	r1, r6
 8007618:	ee08 0a10 	vmov	s16, r0
 800761c:	f000 fb42 	bl	8007ca4 <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	dc03      	bgt.n	800762c <_dtoa_r+0xa9c>
 8007624:	d1e0      	bne.n	80075e8 <_dtoa_r+0xa58>
 8007626:	f01a 0f01 	tst.w	sl, #1
 800762a:	d0dd      	beq.n	80075e8 <_dtoa_r+0xa58>
 800762c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007630:	d1d7      	bne.n	80075e2 <_dtoa_r+0xa52>
 8007632:	2339      	movs	r3, #57	; 0x39
 8007634:	f88b 3000 	strb.w	r3, [fp]
 8007638:	462b      	mov	r3, r5
 800763a:	461d      	mov	r5, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007642:	2a39      	cmp	r2, #57	; 0x39
 8007644:	d071      	beq.n	800772a <_dtoa_r+0xb9a>
 8007646:	3201      	adds	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	e746      	b.n	80074da <_dtoa_r+0x94a>
 800764c:	2a00      	cmp	r2, #0
 800764e:	dd07      	ble.n	8007660 <_dtoa_r+0xad0>
 8007650:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007654:	d0ed      	beq.n	8007632 <_dtoa_r+0xaa2>
 8007656:	f10a 0301 	add.w	r3, sl, #1
 800765a:	f88b 3000 	strb.w	r3, [fp]
 800765e:	e73c      	b.n	80074da <_dtoa_r+0x94a>
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007666:	4599      	cmp	r9, r3
 8007668:	d047      	beq.n	80076fa <_dtoa_r+0xb6a>
 800766a:	ee18 1a10 	vmov	r1, s16
 800766e:	2300      	movs	r3, #0
 8007670:	220a      	movs	r2, #10
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f8f6 	bl	8007864 <__multadd>
 8007678:	45b8      	cmp	r8, r7
 800767a:	ee08 0a10 	vmov	s16, r0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	f04f 020a 	mov.w	r2, #10
 8007686:	4641      	mov	r1, r8
 8007688:	4620      	mov	r0, r4
 800768a:	d106      	bne.n	800769a <_dtoa_r+0xb0a>
 800768c:	f000 f8ea 	bl	8007864 <__multadd>
 8007690:	4680      	mov	r8, r0
 8007692:	4607      	mov	r7, r0
 8007694:	f109 0901 	add.w	r9, r9, #1
 8007698:	e772      	b.n	8007580 <_dtoa_r+0x9f0>
 800769a:	f000 f8e3 	bl	8007864 <__multadd>
 800769e:	4639      	mov	r1, r7
 80076a0:	4680      	mov	r8, r0
 80076a2:	2300      	movs	r3, #0
 80076a4:	220a      	movs	r2, #10
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f8dc 	bl	8007864 <__multadd>
 80076ac:	4607      	mov	r7, r0
 80076ae:	e7f1      	b.n	8007694 <_dtoa_r+0xb04>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	9d01      	ldr	r5, [sp, #4]
 80076b6:	ee18 0a10 	vmov	r0, s16
 80076ba:	4631      	mov	r1, r6
 80076bc:	f7ff f9dc 	bl	8006a78 <quorem>
 80076c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076c4:	9b01      	ldr	r3, [sp, #4]
 80076c6:	f805 ab01 	strb.w	sl, [r5], #1
 80076ca:	1aea      	subs	r2, r5, r3
 80076cc:	9b02      	ldr	r3, [sp, #8]
 80076ce:	4293      	cmp	r3, r2
 80076d0:	dd09      	ble.n	80076e6 <_dtoa_r+0xb56>
 80076d2:	ee18 1a10 	vmov	r1, s16
 80076d6:	2300      	movs	r3, #0
 80076d8:	220a      	movs	r2, #10
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 f8c2 	bl	8007864 <__multadd>
 80076e0:	ee08 0a10 	vmov	s16, r0
 80076e4:	e7e7      	b.n	80076b6 <_dtoa_r+0xb26>
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bfc8      	it	gt
 80076ec:	461d      	movgt	r5, r3
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	bfd8      	it	le
 80076f2:	2501      	movle	r5, #1
 80076f4:	441d      	add	r5, r3
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	ee18 1a10 	vmov	r1, s16
 80076fe:	2201      	movs	r2, #1
 8007700:	4620      	mov	r0, r4
 8007702:	f000 fa5f 	bl	8007bc4 <__lshift>
 8007706:	4631      	mov	r1, r6
 8007708:	ee08 0a10 	vmov	s16, r0
 800770c:	f000 faca 	bl	8007ca4 <__mcmp>
 8007710:	2800      	cmp	r0, #0
 8007712:	dc91      	bgt.n	8007638 <_dtoa_r+0xaa8>
 8007714:	d102      	bne.n	800771c <_dtoa_r+0xb8c>
 8007716:	f01a 0f01 	tst.w	sl, #1
 800771a:	d18d      	bne.n	8007638 <_dtoa_r+0xaa8>
 800771c:	462b      	mov	r3, r5
 800771e:	461d      	mov	r5, r3
 8007720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007724:	2a30      	cmp	r2, #48	; 0x30
 8007726:	d0fa      	beq.n	800771e <_dtoa_r+0xb8e>
 8007728:	e6d7      	b.n	80074da <_dtoa_r+0x94a>
 800772a:	9a01      	ldr	r2, [sp, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	d184      	bne.n	800763a <_dtoa_r+0xaaa>
 8007730:	9b00      	ldr	r3, [sp, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	2331      	movs	r3, #49	; 0x31
 8007738:	7013      	strb	r3, [r2, #0]
 800773a:	e6ce      	b.n	80074da <_dtoa_r+0x94a>
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <_dtoa_r+0xbd4>)
 800773e:	f7ff ba95 	b.w	8006c6c <_dtoa_r+0xdc>
 8007742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007744:	2b00      	cmp	r3, #0
 8007746:	f47f aa6e 	bne.w	8006c26 <_dtoa_r+0x96>
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <_dtoa_r+0xbd8>)
 800774c:	f7ff ba8e 	b.w	8006c6c <_dtoa_r+0xdc>
 8007750:	9b02      	ldr	r3, [sp, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	dcae      	bgt.n	80076b4 <_dtoa_r+0xb24>
 8007756:	9b06      	ldr	r3, [sp, #24]
 8007758:	2b02      	cmp	r3, #2
 800775a:	f73f aea8 	bgt.w	80074ae <_dtoa_r+0x91e>
 800775e:	e7a9      	b.n	80076b4 <_dtoa_r+0xb24>
 8007760:	080090af 	.word	0x080090af
 8007764:	0800900c 	.word	0x0800900c
 8007768:	08009030 	.word	0x08009030

0800776c <_localeconv_r>:
 800776c:	4800      	ldr	r0, [pc, #0]	; (8007770 <_localeconv_r+0x4>)
 800776e:	4770      	bx	lr
 8007770:	200001dc 	.word	0x200001dc

08007774 <malloc>:
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <malloc+0xc>)
 8007776:	4601      	mov	r1, r0
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	f000 bc17 	b.w	8007fac <_malloc_r>
 800777e:	bf00      	nop
 8007780:	20000088 	.word	0x20000088

08007784 <memcpy>:
 8007784:	440a      	add	r2, r1
 8007786:	4291      	cmp	r1, r2
 8007788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800778c:	d100      	bne.n	8007790 <memcpy+0xc>
 800778e:	4770      	bx	lr
 8007790:	b510      	push	{r4, lr}
 8007792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800779a:	4291      	cmp	r1, r2
 800779c:	d1f9      	bne.n	8007792 <memcpy+0xe>
 800779e:	bd10      	pop	{r4, pc}

080077a0 <_Balloc>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077a4:	4604      	mov	r4, r0
 80077a6:	460d      	mov	r5, r1
 80077a8:	b976      	cbnz	r6, 80077c8 <_Balloc+0x28>
 80077aa:	2010      	movs	r0, #16
 80077ac:	f7ff ffe2 	bl	8007774 <malloc>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6260      	str	r0, [r4, #36]	; 0x24
 80077b4:	b920      	cbnz	r0, 80077c0 <_Balloc+0x20>
 80077b6:	4b18      	ldr	r3, [pc, #96]	; (8007818 <_Balloc+0x78>)
 80077b8:	4818      	ldr	r0, [pc, #96]	; (800781c <_Balloc+0x7c>)
 80077ba:	2166      	movs	r1, #102	; 0x66
 80077bc:	f000 fdd6 	bl	800836c <__assert_func>
 80077c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c4:	6006      	str	r6, [r0, #0]
 80077c6:	60c6      	str	r6, [r0, #12]
 80077c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077ca:	68f3      	ldr	r3, [r6, #12]
 80077cc:	b183      	cbz	r3, 80077f0 <_Balloc+0x50>
 80077ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077d6:	b9b8      	cbnz	r0, 8007808 <_Balloc+0x68>
 80077d8:	2101      	movs	r1, #1
 80077da:	fa01 f605 	lsl.w	r6, r1, r5
 80077de:	1d72      	adds	r2, r6, #5
 80077e0:	0092      	lsls	r2, r2, #2
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 fb60 	bl	8007ea8 <_calloc_r>
 80077e8:	b160      	cbz	r0, 8007804 <_Balloc+0x64>
 80077ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ee:	e00e      	b.n	800780e <_Balloc+0x6e>
 80077f0:	2221      	movs	r2, #33	; 0x21
 80077f2:	2104      	movs	r1, #4
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 fb57 	bl	8007ea8 <_calloc_r>
 80077fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077fc:	60f0      	str	r0, [r6, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e4      	bne.n	80077ce <_Balloc+0x2e>
 8007804:	2000      	movs	r0, #0
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	6802      	ldr	r2, [r0, #0]
 800780a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800780e:	2300      	movs	r3, #0
 8007810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007814:	e7f7      	b.n	8007806 <_Balloc+0x66>
 8007816:	bf00      	nop
 8007818:	0800903d 	.word	0x0800903d
 800781c:	080090c0 	.word	0x080090c0

08007820 <_Bfree>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007824:	4605      	mov	r5, r0
 8007826:	460c      	mov	r4, r1
 8007828:	b976      	cbnz	r6, 8007848 <_Bfree+0x28>
 800782a:	2010      	movs	r0, #16
 800782c:	f7ff ffa2 	bl	8007774 <malloc>
 8007830:	4602      	mov	r2, r0
 8007832:	6268      	str	r0, [r5, #36]	; 0x24
 8007834:	b920      	cbnz	r0, 8007840 <_Bfree+0x20>
 8007836:	4b09      	ldr	r3, [pc, #36]	; (800785c <_Bfree+0x3c>)
 8007838:	4809      	ldr	r0, [pc, #36]	; (8007860 <_Bfree+0x40>)
 800783a:	218a      	movs	r1, #138	; 0x8a
 800783c:	f000 fd96 	bl	800836c <__assert_func>
 8007840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007844:	6006      	str	r6, [r0, #0]
 8007846:	60c6      	str	r6, [r0, #12]
 8007848:	b13c      	cbz	r4, 800785a <_Bfree+0x3a>
 800784a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800784c:	6862      	ldr	r2, [r4, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007854:	6021      	str	r1, [r4, #0]
 8007856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	0800903d 	.word	0x0800903d
 8007860:	080090c0 	.word	0x080090c0

08007864 <__multadd>:
 8007864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007868:	690d      	ldr	r5, [r1, #16]
 800786a:	4607      	mov	r7, r0
 800786c:	460c      	mov	r4, r1
 800786e:	461e      	mov	r6, r3
 8007870:	f101 0c14 	add.w	ip, r1, #20
 8007874:	2000      	movs	r0, #0
 8007876:	f8dc 3000 	ldr.w	r3, [ip]
 800787a:	b299      	uxth	r1, r3
 800787c:	fb02 6101 	mla	r1, r2, r1, r6
 8007880:	0c1e      	lsrs	r6, r3, #16
 8007882:	0c0b      	lsrs	r3, r1, #16
 8007884:	fb02 3306 	mla	r3, r2, r6, r3
 8007888:	b289      	uxth	r1, r1
 800788a:	3001      	adds	r0, #1
 800788c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007890:	4285      	cmp	r5, r0
 8007892:	f84c 1b04 	str.w	r1, [ip], #4
 8007896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800789a:	dcec      	bgt.n	8007876 <__multadd+0x12>
 800789c:	b30e      	cbz	r6, 80078e2 <__multadd+0x7e>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dc19      	bgt.n	80078d8 <__multadd+0x74>
 80078a4:	6861      	ldr	r1, [r4, #4]
 80078a6:	4638      	mov	r0, r7
 80078a8:	3101      	adds	r1, #1
 80078aa:	f7ff ff79 	bl	80077a0 <_Balloc>
 80078ae:	4680      	mov	r8, r0
 80078b0:	b928      	cbnz	r0, 80078be <__multadd+0x5a>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <__multadd+0x84>)
 80078b6:	480d      	ldr	r0, [pc, #52]	; (80078ec <__multadd+0x88>)
 80078b8:	21b5      	movs	r1, #181	; 0xb5
 80078ba:	f000 fd57 	bl	800836c <__assert_func>
 80078be:	6922      	ldr	r2, [r4, #16]
 80078c0:	3202      	adds	r2, #2
 80078c2:	f104 010c 	add.w	r1, r4, #12
 80078c6:	0092      	lsls	r2, r2, #2
 80078c8:	300c      	adds	r0, #12
 80078ca:	f7ff ff5b 	bl	8007784 <memcpy>
 80078ce:	4621      	mov	r1, r4
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff ffa5 	bl	8007820 <_Bfree>
 80078d6:	4644      	mov	r4, r8
 80078d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078dc:	3501      	adds	r5, #1
 80078de:	615e      	str	r6, [r3, #20]
 80078e0:	6125      	str	r5, [r4, #16]
 80078e2:	4620      	mov	r0, r4
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	080090af 	.word	0x080090af
 80078ec:	080090c0 	.word	0x080090c0

080078f0 <__hi0bits>:
 80078f0:	0c03      	lsrs	r3, r0, #16
 80078f2:	041b      	lsls	r3, r3, #16
 80078f4:	b9d3      	cbnz	r3, 800792c <__hi0bits+0x3c>
 80078f6:	0400      	lsls	r0, r0, #16
 80078f8:	2310      	movs	r3, #16
 80078fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078fe:	bf04      	itt	eq
 8007900:	0200      	lsleq	r0, r0, #8
 8007902:	3308      	addeq	r3, #8
 8007904:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007908:	bf04      	itt	eq
 800790a:	0100      	lsleq	r0, r0, #4
 800790c:	3304      	addeq	r3, #4
 800790e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007912:	bf04      	itt	eq
 8007914:	0080      	lsleq	r0, r0, #2
 8007916:	3302      	addeq	r3, #2
 8007918:	2800      	cmp	r0, #0
 800791a:	db05      	blt.n	8007928 <__hi0bits+0x38>
 800791c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007920:	f103 0301 	add.w	r3, r3, #1
 8007924:	bf08      	it	eq
 8007926:	2320      	moveq	r3, #32
 8007928:	4618      	mov	r0, r3
 800792a:	4770      	bx	lr
 800792c:	2300      	movs	r3, #0
 800792e:	e7e4      	b.n	80078fa <__hi0bits+0xa>

08007930 <__lo0bits>:
 8007930:	6803      	ldr	r3, [r0, #0]
 8007932:	f013 0207 	ands.w	r2, r3, #7
 8007936:	4601      	mov	r1, r0
 8007938:	d00b      	beq.n	8007952 <__lo0bits+0x22>
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d423      	bmi.n	8007986 <__lo0bits+0x56>
 800793e:	0798      	lsls	r0, r3, #30
 8007940:	bf49      	itett	mi
 8007942:	085b      	lsrmi	r3, r3, #1
 8007944:	089b      	lsrpl	r3, r3, #2
 8007946:	2001      	movmi	r0, #1
 8007948:	600b      	strmi	r3, [r1, #0]
 800794a:	bf5c      	itt	pl
 800794c:	600b      	strpl	r3, [r1, #0]
 800794e:	2002      	movpl	r0, #2
 8007950:	4770      	bx	lr
 8007952:	b298      	uxth	r0, r3
 8007954:	b9a8      	cbnz	r0, 8007982 <__lo0bits+0x52>
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	2010      	movs	r0, #16
 800795a:	b2da      	uxtb	r2, r3
 800795c:	b90a      	cbnz	r2, 8007962 <__lo0bits+0x32>
 800795e:	3008      	adds	r0, #8
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	071a      	lsls	r2, r3, #28
 8007964:	bf04      	itt	eq
 8007966:	091b      	lsreq	r3, r3, #4
 8007968:	3004      	addeq	r0, #4
 800796a:	079a      	lsls	r2, r3, #30
 800796c:	bf04      	itt	eq
 800796e:	089b      	lsreq	r3, r3, #2
 8007970:	3002      	addeq	r0, #2
 8007972:	07da      	lsls	r2, r3, #31
 8007974:	d403      	bmi.n	800797e <__lo0bits+0x4e>
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f100 0001 	add.w	r0, r0, #1
 800797c:	d005      	beq.n	800798a <__lo0bits+0x5a>
 800797e:	600b      	str	r3, [r1, #0]
 8007980:	4770      	bx	lr
 8007982:	4610      	mov	r0, r2
 8007984:	e7e9      	b.n	800795a <__lo0bits+0x2a>
 8007986:	2000      	movs	r0, #0
 8007988:	4770      	bx	lr
 800798a:	2020      	movs	r0, #32
 800798c:	4770      	bx	lr
	...

08007990 <__i2b>:
 8007990:	b510      	push	{r4, lr}
 8007992:	460c      	mov	r4, r1
 8007994:	2101      	movs	r1, #1
 8007996:	f7ff ff03 	bl	80077a0 <_Balloc>
 800799a:	4602      	mov	r2, r0
 800799c:	b928      	cbnz	r0, 80079aa <__i2b+0x1a>
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <__i2b+0x24>)
 80079a0:	4805      	ldr	r0, [pc, #20]	; (80079b8 <__i2b+0x28>)
 80079a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079a6:	f000 fce1 	bl	800836c <__assert_func>
 80079aa:	2301      	movs	r3, #1
 80079ac:	6144      	str	r4, [r0, #20]
 80079ae:	6103      	str	r3, [r0, #16]
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	080090af 	.word	0x080090af
 80079b8:	080090c0 	.word	0x080090c0

080079bc <__multiply>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	4691      	mov	r9, r2
 80079c2:	690a      	ldr	r2, [r1, #16]
 80079c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	bfb8      	it	lt
 80079cc:	460b      	movlt	r3, r1
 80079ce:	460c      	mov	r4, r1
 80079d0:	bfbc      	itt	lt
 80079d2:	464c      	movlt	r4, r9
 80079d4:	4699      	movlt	r9, r3
 80079d6:	6927      	ldr	r7, [r4, #16]
 80079d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079dc:	68a3      	ldr	r3, [r4, #8]
 80079de:	6861      	ldr	r1, [r4, #4]
 80079e0:	eb07 060a 	add.w	r6, r7, sl
 80079e4:	42b3      	cmp	r3, r6
 80079e6:	b085      	sub	sp, #20
 80079e8:	bfb8      	it	lt
 80079ea:	3101      	addlt	r1, #1
 80079ec:	f7ff fed8 	bl	80077a0 <_Balloc>
 80079f0:	b930      	cbnz	r0, 8007a00 <__multiply+0x44>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4b44      	ldr	r3, [pc, #272]	; (8007b08 <__multiply+0x14c>)
 80079f6:	4845      	ldr	r0, [pc, #276]	; (8007b0c <__multiply+0x150>)
 80079f8:	f240 115d 	movw	r1, #349	; 0x15d
 80079fc:	f000 fcb6 	bl	800836c <__assert_func>
 8007a00:	f100 0514 	add.w	r5, r0, #20
 8007a04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a08:	462b      	mov	r3, r5
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4543      	cmp	r3, r8
 8007a0e:	d321      	bcc.n	8007a54 <__multiply+0x98>
 8007a10:	f104 0314 	add.w	r3, r4, #20
 8007a14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a18:	f109 0314 	add.w	r3, r9, #20
 8007a1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a20:	9202      	str	r2, [sp, #8]
 8007a22:	1b3a      	subs	r2, r7, r4
 8007a24:	3a15      	subs	r2, #21
 8007a26:	f022 0203 	bic.w	r2, r2, #3
 8007a2a:	3204      	adds	r2, #4
 8007a2c:	f104 0115 	add.w	r1, r4, #21
 8007a30:	428f      	cmp	r7, r1
 8007a32:	bf38      	it	cc
 8007a34:	2204      	movcc	r2, #4
 8007a36:	9201      	str	r2, [sp, #4]
 8007a38:	9a02      	ldr	r2, [sp, #8]
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d80c      	bhi.n	8007a5a <__multiply+0x9e>
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	dd03      	ble.n	8007a4c <__multiply+0x90>
 8007a44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d05a      	beq.n	8007b02 <__multiply+0x146>
 8007a4c:	6106      	str	r6, [r0, #16]
 8007a4e:	b005      	add	sp, #20
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	f843 2b04 	str.w	r2, [r3], #4
 8007a58:	e7d8      	b.n	8007a0c <__multiply+0x50>
 8007a5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a5e:	f1ba 0f00 	cmp.w	sl, #0
 8007a62:	d024      	beq.n	8007aae <__multiply+0xf2>
 8007a64:	f104 0e14 	add.w	lr, r4, #20
 8007a68:	46a9      	mov	r9, r5
 8007a6a:	f04f 0c00 	mov.w	ip, #0
 8007a6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a72:	f8d9 1000 	ldr.w	r1, [r9]
 8007a76:	fa1f fb82 	uxth.w	fp, r2
 8007a7a:	b289      	uxth	r1, r1
 8007a7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a84:	f8d9 2000 	ldr.w	r2, [r9]
 8007a88:	4461      	add	r1, ip
 8007a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a96:	b289      	uxth	r1, r1
 8007a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a9c:	4577      	cmp	r7, lr
 8007a9e:	f849 1b04 	str.w	r1, [r9], #4
 8007aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007aa6:	d8e2      	bhi.n	8007a6e <__multiply+0xb2>
 8007aa8:	9a01      	ldr	r2, [sp, #4]
 8007aaa:	f845 c002 	str.w	ip, [r5, r2]
 8007aae:	9a03      	ldr	r2, [sp, #12]
 8007ab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	f1b9 0f00 	cmp.w	r9, #0
 8007aba:	d020      	beq.n	8007afe <__multiply+0x142>
 8007abc:	6829      	ldr	r1, [r5, #0]
 8007abe:	f104 0c14 	add.w	ip, r4, #20
 8007ac2:	46ae      	mov	lr, r5
 8007ac4:	f04f 0a00 	mov.w	sl, #0
 8007ac8:	f8bc b000 	ldrh.w	fp, [ip]
 8007acc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ad0:	fb09 220b 	mla	r2, r9, fp, r2
 8007ad4:	4492      	add	sl, r2
 8007ad6:	b289      	uxth	r1, r1
 8007ad8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007adc:	f84e 1b04 	str.w	r1, [lr], #4
 8007ae0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ae4:	f8be 1000 	ldrh.w	r1, [lr]
 8007ae8:	0c12      	lsrs	r2, r2, #16
 8007aea:	fb09 1102 	mla	r1, r9, r2, r1
 8007aee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007af2:	4567      	cmp	r7, ip
 8007af4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007af8:	d8e6      	bhi.n	8007ac8 <__multiply+0x10c>
 8007afa:	9a01      	ldr	r2, [sp, #4]
 8007afc:	50a9      	str	r1, [r5, r2]
 8007afe:	3504      	adds	r5, #4
 8007b00:	e79a      	b.n	8007a38 <__multiply+0x7c>
 8007b02:	3e01      	subs	r6, #1
 8007b04:	e79c      	b.n	8007a40 <__multiply+0x84>
 8007b06:	bf00      	nop
 8007b08:	080090af 	.word	0x080090af
 8007b0c:	080090c0 	.word	0x080090c0

08007b10 <__pow5mult>:
 8007b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b14:	4615      	mov	r5, r2
 8007b16:	f012 0203 	ands.w	r2, r2, #3
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460f      	mov	r7, r1
 8007b1e:	d007      	beq.n	8007b30 <__pow5mult+0x20>
 8007b20:	4c25      	ldr	r4, [pc, #148]	; (8007bb8 <__pow5mult+0xa8>)
 8007b22:	3a01      	subs	r2, #1
 8007b24:	2300      	movs	r3, #0
 8007b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b2a:	f7ff fe9b 	bl	8007864 <__multadd>
 8007b2e:	4607      	mov	r7, r0
 8007b30:	10ad      	asrs	r5, r5, #2
 8007b32:	d03d      	beq.n	8007bb0 <__pow5mult+0xa0>
 8007b34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b36:	b97c      	cbnz	r4, 8007b58 <__pow5mult+0x48>
 8007b38:	2010      	movs	r0, #16
 8007b3a:	f7ff fe1b 	bl	8007774 <malloc>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	6270      	str	r0, [r6, #36]	; 0x24
 8007b42:	b928      	cbnz	r0, 8007b50 <__pow5mult+0x40>
 8007b44:	4b1d      	ldr	r3, [pc, #116]	; (8007bbc <__pow5mult+0xac>)
 8007b46:	481e      	ldr	r0, [pc, #120]	; (8007bc0 <__pow5mult+0xb0>)
 8007b48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b4c:	f000 fc0e 	bl	800836c <__assert_func>
 8007b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b54:	6004      	str	r4, [r0, #0]
 8007b56:	60c4      	str	r4, [r0, #12]
 8007b58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b60:	b94c      	cbnz	r4, 8007b76 <__pow5mult+0x66>
 8007b62:	f240 2171 	movw	r1, #625	; 0x271
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7ff ff12 	bl	8007990 <__i2b>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b72:	4604      	mov	r4, r0
 8007b74:	6003      	str	r3, [r0, #0]
 8007b76:	f04f 0900 	mov.w	r9, #0
 8007b7a:	07eb      	lsls	r3, r5, #31
 8007b7c:	d50a      	bpl.n	8007b94 <__pow5mult+0x84>
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4622      	mov	r2, r4
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ff1a 	bl	80079bc <__multiply>
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff fe47 	bl	8007820 <_Bfree>
 8007b92:	4647      	mov	r7, r8
 8007b94:	106d      	asrs	r5, r5, #1
 8007b96:	d00b      	beq.n	8007bb0 <__pow5mult+0xa0>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	b938      	cbnz	r0, 8007bac <__pow5mult+0x9c>
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff ff0b 	bl	80079bc <__multiply>
 8007ba6:	6020      	str	r0, [r4, #0]
 8007ba8:	f8c0 9000 	str.w	r9, [r0]
 8007bac:	4604      	mov	r4, r0
 8007bae:	e7e4      	b.n	8007b7a <__pow5mult+0x6a>
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08009210 	.word	0x08009210
 8007bbc:	0800903d 	.word	0x0800903d
 8007bc0:	080090c0 	.word	0x080090c0

08007bc4 <__lshift>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	460c      	mov	r4, r1
 8007bca:	6849      	ldr	r1, [r1, #4]
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4691      	mov	r9, r2
 8007bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bdc:	f108 0601 	add.w	r6, r8, #1
 8007be0:	42b3      	cmp	r3, r6
 8007be2:	db0b      	blt.n	8007bfc <__lshift+0x38>
 8007be4:	4638      	mov	r0, r7
 8007be6:	f7ff fddb 	bl	80077a0 <_Balloc>
 8007bea:	4605      	mov	r5, r0
 8007bec:	b948      	cbnz	r0, 8007c02 <__lshift+0x3e>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4b2a      	ldr	r3, [pc, #168]	; (8007c9c <__lshift+0xd8>)
 8007bf2:	482b      	ldr	r0, [pc, #172]	; (8007ca0 <__lshift+0xdc>)
 8007bf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bf8:	f000 fbb8 	bl	800836c <__assert_func>
 8007bfc:	3101      	adds	r1, #1
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	e7ee      	b.n	8007be0 <__lshift+0x1c>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f100 0114 	add.w	r1, r0, #20
 8007c08:	f100 0210 	add.w	r2, r0, #16
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	4553      	cmp	r3, sl
 8007c10:	db37      	blt.n	8007c82 <__lshift+0xbe>
 8007c12:	6920      	ldr	r0, [r4, #16]
 8007c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c18:	f104 0314 	add.w	r3, r4, #20
 8007c1c:	f019 091f 	ands.w	r9, r9, #31
 8007c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c28:	d02f      	beq.n	8007c8a <__lshift+0xc6>
 8007c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c2e:	468a      	mov	sl, r1
 8007c30:	f04f 0c00 	mov.w	ip, #0
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	fa02 f209 	lsl.w	r2, r2, r9
 8007c3a:	ea42 020c 	orr.w	r2, r2, ip
 8007c3e:	f84a 2b04 	str.w	r2, [sl], #4
 8007c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c46:	4298      	cmp	r0, r3
 8007c48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c4c:	d8f2      	bhi.n	8007c34 <__lshift+0x70>
 8007c4e:	1b03      	subs	r3, r0, r4
 8007c50:	3b15      	subs	r3, #21
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	3304      	adds	r3, #4
 8007c58:	f104 0215 	add.w	r2, r4, #21
 8007c5c:	4290      	cmp	r0, r2
 8007c5e:	bf38      	it	cc
 8007c60:	2304      	movcc	r3, #4
 8007c62:	f841 c003 	str.w	ip, [r1, r3]
 8007c66:	f1bc 0f00 	cmp.w	ip, #0
 8007c6a:	d001      	beq.n	8007c70 <__lshift+0xac>
 8007c6c:	f108 0602 	add.w	r6, r8, #2
 8007c70:	3e01      	subs	r6, #1
 8007c72:	4638      	mov	r0, r7
 8007c74:	612e      	str	r6, [r5, #16]
 8007c76:	4621      	mov	r1, r4
 8007c78:	f7ff fdd2 	bl	8007820 <_Bfree>
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c86:	3301      	adds	r3, #1
 8007c88:	e7c1      	b.n	8007c0e <__lshift+0x4a>
 8007c8a:	3904      	subs	r1, #4
 8007c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c94:	4298      	cmp	r0, r3
 8007c96:	d8f9      	bhi.n	8007c8c <__lshift+0xc8>
 8007c98:	e7ea      	b.n	8007c70 <__lshift+0xac>
 8007c9a:	bf00      	nop
 8007c9c:	080090af 	.word	0x080090af
 8007ca0:	080090c0 	.word	0x080090c0

08007ca4 <__mcmp>:
 8007ca4:	b530      	push	{r4, r5, lr}
 8007ca6:	6902      	ldr	r2, [r0, #16]
 8007ca8:	690c      	ldr	r4, [r1, #16]
 8007caa:	1b12      	subs	r2, r2, r4
 8007cac:	d10e      	bne.n	8007ccc <__mcmp+0x28>
 8007cae:	f100 0314 	add.w	r3, r0, #20
 8007cb2:	3114      	adds	r1, #20
 8007cb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cc4:	42a5      	cmp	r5, r4
 8007cc6:	d003      	beq.n	8007cd0 <__mcmp+0x2c>
 8007cc8:	d305      	bcc.n	8007cd6 <__mcmp+0x32>
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4610      	mov	r0, r2
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	4283      	cmp	r3, r0
 8007cd2:	d3f3      	bcc.n	8007cbc <__mcmp+0x18>
 8007cd4:	e7fa      	b.n	8007ccc <__mcmp+0x28>
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cda:	e7f7      	b.n	8007ccc <__mcmp+0x28>

08007cdc <__mdiff>:
 8007cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4690      	mov	r8, r2
 8007cea:	f7ff ffdb 	bl	8007ca4 <__mcmp>
 8007cee:	1e05      	subs	r5, r0, #0
 8007cf0:	d110      	bne.n	8007d14 <__mdiff+0x38>
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7ff fd53 	bl	80077a0 <_Balloc>
 8007cfa:	b930      	cbnz	r0, 8007d0a <__mdiff+0x2e>
 8007cfc:	4b3a      	ldr	r3, [pc, #232]	; (8007de8 <__mdiff+0x10c>)
 8007cfe:	4602      	mov	r2, r0
 8007d00:	f240 2132 	movw	r1, #562	; 0x232
 8007d04:	4839      	ldr	r0, [pc, #228]	; (8007dec <__mdiff+0x110>)
 8007d06:	f000 fb31 	bl	800836c <__assert_func>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	bfa4      	itt	ge
 8007d16:	4643      	movge	r3, r8
 8007d18:	46a0      	movge	r8, r4
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d20:	bfa6      	itte	ge
 8007d22:	461c      	movge	r4, r3
 8007d24:	2500      	movge	r5, #0
 8007d26:	2501      	movlt	r5, #1
 8007d28:	f7ff fd3a 	bl	80077a0 <_Balloc>
 8007d2c:	b920      	cbnz	r0, 8007d38 <__mdiff+0x5c>
 8007d2e:	4b2e      	ldr	r3, [pc, #184]	; (8007de8 <__mdiff+0x10c>)
 8007d30:	4602      	mov	r2, r0
 8007d32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d36:	e7e5      	b.n	8007d04 <__mdiff+0x28>
 8007d38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d3c:	6926      	ldr	r6, [r4, #16]
 8007d3e:	60c5      	str	r5, [r0, #12]
 8007d40:	f104 0914 	add.w	r9, r4, #20
 8007d44:	f108 0514 	add.w	r5, r8, #20
 8007d48:	f100 0e14 	add.w	lr, r0, #20
 8007d4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d54:	f108 0210 	add.w	r2, r8, #16
 8007d58:	46f2      	mov	sl, lr
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d64:	fa1f f883 	uxth.w	r8, r3
 8007d68:	fa11 f18b 	uxtah	r1, r1, fp
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	eba1 0808 	sub.w	r8, r1, r8
 8007d72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d7a:	fa1f f888 	uxth.w	r8, r8
 8007d7e:	1419      	asrs	r1, r3, #16
 8007d80:	454e      	cmp	r6, r9
 8007d82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d86:	f84a 3b04 	str.w	r3, [sl], #4
 8007d8a:	d8e7      	bhi.n	8007d5c <__mdiff+0x80>
 8007d8c:	1b33      	subs	r3, r6, r4
 8007d8e:	3b15      	subs	r3, #21
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	3304      	adds	r3, #4
 8007d96:	3415      	adds	r4, #21
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	bf38      	it	cc
 8007d9c:	2304      	movcc	r3, #4
 8007d9e:	441d      	add	r5, r3
 8007da0:	4473      	add	r3, lr
 8007da2:	469e      	mov	lr, r3
 8007da4:	462e      	mov	r6, r5
 8007da6:	4566      	cmp	r6, ip
 8007da8:	d30e      	bcc.n	8007dc8 <__mdiff+0xec>
 8007daa:	f10c 0203 	add.w	r2, ip, #3
 8007dae:	1b52      	subs	r2, r2, r5
 8007db0:	f022 0203 	bic.w	r2, r2, #3
 8007db4:	3d03      	subs	r5, #3
 8007db6:	45ac      	cmp	ip, r5
 8007db8:	bf38      	it	cc
 8007dba:	2200      	movcc	r2, #0
 8007dbc:	441a      	add	r2, r3
 8007dbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007dc2:	b17b      	cbz	r3, 8007de4 <__mdiff+0x108>
 8007dc4:	6107      	str	r7, [r0, #16]
 8007dc6:	e7a3      	b.n	8007d10 <__mdiff+0x34>
 8007dc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dcc:	fa11 f288 	uxtah	r2, r1, r8
 8007dd0:	1414      	asrs	r4, r2, #16
 8007dd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ddc:	f84e 2b04 	str.w	r2, [lr], #4
 8007de0:	1421      	asrs	r1, r4, #16
 8007de2:	e7e0      	b.n	8007da6 <__mdiff+0xca>
 8007de4:	3f01      	subs	r7, #1
 8007de6:	e7ea      	b.n	8007dbe <__mdiff+0xe2>
 8007de8:	080090af 	.word	0x080090af
 8007dec:	080090c0 	.word	0x080090c0

08007df0 <__d2b>:
 8007df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4689      	mov	r9, r1
 8007df6:	2101      	movs	r1, #1
 8007df8:	ec57 6b10 	vmov	r6, r7, d0
 8007dfc:	4690      	mov	r8, r2
 8007dfe:	f7ff fccf 	bl	80077a0 <_Balloc>
 8007e02:	4604      	mov	r4, r0
 8007e04:	b930      	cbnz	r0, 8007e14 <__d2b+0x24>
 8007e06:	4602      	mov	r2, r0
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <__d2b+0xb0>)
 8007e0a:	4826      	ldr	r0, [pc, #152]	; (8007ea4 <__d2b+0xb4>)
 8007e0c:	f240 310a 	movw	r1, #778	; 0x30a
 8007e10:	f000 faac 	bl	800836c <__assert_func>
 8007e14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e1c:	bb35      	cbnz	r5, 8007e6c <__d2b+0x7c>
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	d028      	beq.n	8007e76 <__d2b+0x86>
 8007e24:	4668      	mov	r0, sp
 8007e26:	9600      	str	r6, [sp, #0]
 8007e28:	f7ff fd82 	bl	8007930 <__lo0bits>
 8007e2c:	9900      	ldr	r1, [sp, #0]
 8007e2e:	b300      	cbz	r0, 8007e72 <__d2b+0x82>
 8007e30:	9a01      	ldr	r2, [sp, #4]
 8007e32:	f1c0 0320 	rsb	r3, r0, #32
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	40c2      	lsrs	r2, r0
 8007e3e:	6163      	str	r3, [r4, #20]
 8007e40:	9201      	str	r2, [sp, #4]
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	61a3      	str	r3, [r4, #24]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bf14      	ite	ne
 8007e4a:	2202      	movne	r2, #2
 8007e4c:	2201      	moveq	r2, #1
 8007e4e:	6122      	str	r2, [r4, #16]
 8007e50:	b1d5      	cbz	r5, 8007e88 <__d2b+0x98>
 8007e52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e56:	4405      	add	r5, r0
 8007e58:	f8c9 5000 	str.w	r5, [r9]
 8007e5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e60:	f8c8 0000 	str.w	r0, [r8]
 8007e64:	4620      	mov	r0, r4
 8007e66:	b003      	add	sp, #12
 8007e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e70:	e7d5      	b.n	8007e1e <__d2b+0x2e>
 8007e72:	6161      	str	r1, [r4, #20]
 8007e74:	e7e5      	b.n	8007e42 <__d2b+0x52>
 8007e76:	a801      	add	r0, sp, #4
 8007e78:	f7ff fd5a 	bl	8007930 <__lo0bits>
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	6163      	str	r3, [r4, #20]
 8007e80:	2201      	movs	r2, #1
 8007e82:	6122      	str	r2, [r4, #16]
 8007e84:	3020      	adds	r0, #32
 8007e86:	e7e3      	b.n	8007e50 <__d2b+0x60>
 8007e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e90:	f8c9 0000 	str.w	r0, [r9]
 8007e94:	6918      	ldr	r0, [r3, #16]
 8007e96:	f7ff fd2b 	bl	80078f0 <__hi0bits>
 8007e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e9e:	e7df      	b.n	8007e60 <__d2b+0x70>
 8007ea0:	080090af 	.word	0x080090af
 8007ea4:	080090c0 	.word	0x080090c0

08007ea8 <_calloc_r>:
 8007ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eaa:	fba1 2402 	umull	r2, r4, r1, r2
 8007eae:	b94c      	cbnz	r4, 8007ec4 <_calloc_r+0x1c>
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	9201      	str	r2, [sp, #4]
 8007eb4:	f000 f87a 	bl	8007fac <_malloc_r>
 8007eb8:	9a01      	ldr	r2, [sp, #4]
 8007eba:	4605      	mov	r5, r0
 8007ebc:	b930      	cbnz	r0, 8007ecc <_calloc_r+0x24>
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	b003      	add	sp, #12
 8007ec2:	bd30      	pop	{r4, r5, pc}
 8007ec4:	220c      	movs	r2, #12
 8007ec6:	6002      	str	r2, [r0, #0]
 8007ec8:	2500      	movs	r5, #0
 8007eca:	e7f8      	b.n	8007ebe <_calloc_r+0x16>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	f7fe f941 	bl	8006154 <memset>
 8007ed2:	e7f4      	b.n	8007ebe <_calloc_r+0x16>

08007ed4 <_free_r>:
 8007ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	d044      	beq.n	8007f64 <_free_r+0x90>
 8007eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ede:	9001      	str	r0, [sp, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ee6:	bfb8      	it	lt
 8007ee8:	18e4      	addlt	r4, r4, r3
 8007eea:	f000 fa9b 	bl	8008424 <__malloc_lock>
 8007eee:	4a1e      	ldr	r2, [pc, #120]	; (8007f68 <_free_r+0x94>)
 8007ef0:	9801      	ldr	r0, [sp, #4]
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	b933      	cbnz	r3, 8007f04 <_free_r+0x30>
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	6014      	str	r4, [r2, #0]
 8007efa:	b003      	add	sp, #12
 8007efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f00:	f000 ba96 	b.w	8008430 <__malloc_unlock>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d908      	bls.n	8007f1a <_free_r+0x46>
 8007f08:	6825      	ldr	r5, [r4, #0]
 8007f0a:	1961      	adds	r1, r4, r5
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf01      	itttt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	1949      	addeq	r1, r1, r5
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	e7ed      	b.n	8007ef6 <_free_r+0x22>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b10b      	cbz	r3, 8007f24 <_free_r+0x50>
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d9fa      	bls.n	8007f1a <_free_r+0x46>
 8007f24:	6811      	ldr	r1, [r2, #0]
 8007f26:	1855      	adds	r5, r2, r1
 8007f28:	42a5      	cmp	r5, r4
 8007f2a:	d10b      	bne.n	8007f44 <_free_r+0x70>
 8007f2c:	6824      	ldr	r4, [r4, #0]
 8007f2e:	4421      	add	r1, r4
 8007f30:	1854      	adds	r4, r2, r1
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	d1e0      	bne.n	8007efa <_free_r+0x26>
 8007f38:	681c      	ldr	r4, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	6053      	str	r3, [r2, #4]
 8007f3e:	4421      	add	r1, r4
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	e7da      	b.n	8007efa <_free_r+0x26>
 8007f44:	d902      	bls.n	8007f4c <_free_r+0x78>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	e7d6      	b.n	8007efa <_free_r+0x26>
 8007f4c:	6825      	ldr	r5, [r4, #0]
 8007f4e:	1961      	adds	r1, r4, r5
 8007f50:	428b      	cmp	r3, r1
 8007f52:	bf04      	itt	eq
 8007f54:	6819      	ldreq	r1, [r3, #0]
 8007f56:	685b      	ldreq	r3, [r3, #4]
 8007f58:	6063      	str	r3, [r4, #4]
 8007f5a:	bf04      	itt	eq
 8007f5c:	1949      	addeq	r1, r1, r5
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	6054      	str	r4, [r2, #4]
 8007f62:	e7ca      	b.n	8007efa <_free_r+0x26>
 8007f64:	b003      	add	sp, #12
 8007f66:	bd30      	pop	{r4, r5, pc}
 8007f68:	200004ec 	.word	0x200004ec

08007f6c <sbrk_aligned>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4e0e      	ldr	r6, [pc, #56]	; (8007fa8 <sbrk_aligned+0x3c>)
 8007f70:	460c      	mov	r4, r1
 8007f72:	6831      	ldr	r1, [r6, #0]
 8007f74:	4605      	mov	r5, r0
 8007f76:	b911      	cbnz	r1, 8007f7e <sbrk_aligned+0x12>
 8007f78:	f000 f9e8 	bl	800834c <_sbrk_r>
 8007f7c:	6030      	str	r0, [r6, #0]
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f9e3 	bl	800834c <_sbrk_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d00a      	beq.n	8007fa0 <sbrk_aligned+0x34>
 8007f8a:	1cc4      	adds	r4, r0, #3
 8007f8c:	f024 0403 	bic.w	r4, r4, #3
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d007      	beq.n	8007fa4 <sbrk_aligned+0x38>
 8007f94:	1a21      	subs	r1, r4, r0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f9d8 	bl	800834c <_sbrk_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d101      	bne.n	8007fa4 <sbrk_aligned+0x38>
 8007fa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	200004f0 	.word	0x200004f0

08007fac <_malloc_r>:
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	1ccd      	adds	r5, r1, #3
 8007fb2:	f025 0503 	bic.w	r5, r5, #3
 8007fb6:	3508      	adds	r5, #8
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	bf38      	it	cc
 8007fbc:	250c      	movcc	r5, #12
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	db01      	blt.n	8007fc8 <_malloc_r+0x1c>
 8007fc4:	42a9      	cmp	r1, r5
 8007fc6:	d905      	bls.n	8007fd4 <_malloc_r+0x28>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	2600      	movs	r6, #0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd4:	4e2e      	ldr	r6, [pc, #184]	; (8008090 <_malloc_r+0xe4>)
 8007fd6:	f000 fa25 	bl	8008424 <__malloc_lock>
 8007fda:	6833      	ldr	r3, [r6, #0]
 8007fdc:	461c      	mov	r4, r3
 8007fde:	bb34      	cbnz	r4, 800802e <_malloc_r+0x82>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff ffc2 	bl	8007f6c <sbrk_aligned>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	4604      	mov	r4, r0
 8007fec:	d14d      	bne.n	800808a <_malloc_r+0xde>
 8007fee:	6834      	ldr	r4, [r6, #0]
 8007ff0:	4626      	mov	r6, r4
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d140      	bne.n	8008078 <_malloc_r+0xcc>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	eb04 0803 	add.w	r8, r4, r3
 8008000:	f000 f9a4 	bl	800834c <_sbrk_r>
 8008004:	4580      	cmp	r8, r0
 8008006:	d13a      	bne.n	800807e <_malloc_r+0xd2>
 8008008:	6821      	ldr	r1, [r4, #0]
 800800a:	3503      	adds	r5, #3
 800800c:	1a6d      	subs	r5, r5, r1
 800800e:	f025 0503 	bic.w	r5, r5, #3
 8008012:	3508      	adds	r5, #8
 8008014:	2d0c      	cmp	r5, #12
 8008016:	bf38      	it	cc
 8008018:	250c      	movcc	r5, #12
 800801a:	4629      	mov	r1, r5
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff ffa5 	bl	8007f6c <sbrk_aligned>
 8008022:	3001      	adds	r0, #1
 8008024:	d02b      	beq.n	800807e <_malloc_r+0xd2>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	442b      	add	r3, r5
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	e00e      	b.n	800804c <_malloc_r+0xa0>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	1b52      	subs	r2, r2, r5
 8008032:	d41e      	bmi.n	8008072 <_malloc_r+0xc6>
 8008034:	2a0b      	cmp	r2, #11
 8008036:	d916      	bls.n	8008066 <_malloc_r+0xba>
 8008038:	1961      	adds	r1, r4, r5
 800803a:	42a3      	cmp	r3, r4
 800803c:	6025      	str	r5, [r4, #0]
 800803e:	bf18      	it	ne
 8008040:	6059      	strne	r1, [r3, #4]
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	bf08      	it	eq
 8008046:	6031      	streq	r1, [r6, #0]
 8008048:	5162      	str	r2, [r4, r5]
 800804a:	604b      	str	r3, [r1, #4]
 800804c:	4638      	mov	r0, r7
 800804e:	f104 060b 	add.w	r6, r4, #11
 8008052:	f000 f9ed 	bl	8008430 <__malloc_unlock>
 8008056:	f026 0607 	bic.w	r6, r6, #7
 800805a:	1d23      	adds	r3, r4, #4
 800805c:	1af2      	subs	r2, r6, r3
 800805e:	d0b6      	beq.n	8007fce <_malloc_r+0x22>
 8008060:	1b9b      	subs	r3, r3, r6
 8008062:	50a3      	str	r3, [r4, r2]
 8008064:	e7b3      	b.n	8007fce <_malloc_r+0x22>
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	42a3      	cmp	r3, r4
 800806a:	bf0c      	ite	eq
 800806c:	6032      	streq	r2, [r6, #0]
 800806e:	605a      	strne	r2, [r3, #4]
 8008070:	e7ec      	b.n	800804c <_malloc_r+0xa0>
 8008072:	4623      	mov	r3, r4
 8008074:	6864      	ldr	r4, [r4, #4]
 8008076:	e7b2      	b.n	8007fde <_malloc_r+0x32>
 8008078:	4634      	mov	r4, r6
 800807a:	6876      	ldr	r6, [r6, #4]
 800807c:	e7b9      	b.n	8007ff2 <_malloc_r+0x46>
 800807e:	230c      	movs	r3, #12
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	4638      	mov	r0, r7
 8008084:	f000 f9d4 	bl	8008430 <__malloc_unlock>
 8008088:	e7a1      	b.n	8007fce <_malloc_r+0x22>
 800808a:	6025      	str	r5, [r4, #0]
 800808c:	e7de      	b.n	800804c <_malloc_r+0xa0>
 800808e:	bf00      	nop
 8008090:	200004ec 	.word	0x200004ec

08008094 <__ssputs_r>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	688e      	ldr	r6, [r1, #8]
 800809a:	429e      	cmp	r6, r3
 800809c:	4682      	mov	sl, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	4690      	mov	r8, r2
 80080a2:	461f      	mov	r7, r3
 80080a4:	d838      	bhi.n	8008118 <__ssputs_r+0x84>
 80080a6:	898a      	ldrh	r2, [r1, #12]
 80080a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080ac:	d032      	beq.n	8008114 <__ssputs_r+0x80>
 80080ae:	6825      	ldr	r5, [r4, #0]
 80080b0:	6909      	ldr	r1, [r1, #16]
 80080b2:	eba5 0901 	sub.w	r9, r5, r1
 80080b6:	6965      	ldr	r5, [r4, #20]
 80080b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c0:	3301      	adds	r3, #1
 80080c2:	444b      	add	r3, r9
 80080c4:	106d      	asrs	r5, r5, #1
 80080c6:	429d      	cmp	r5, r3
 80080c8:	bf38      	it	cc
 80080ca:	461d      	movcc	r5, r3
 80080cc:	0553      	lsls	r3, r2, #21
 80080ce:	d531      	bpl.n	8008134 <__ssputs_r+0xa0>
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7ff ff6b 	bl	8007fac <_malloc_r>
 80080d6:	4606      	mov	r6, r0
 80080d8:	b950      	cbnz	r0, 80080f0 <__ssputs_r+0x5c>
 80080da:	230c      	movs	r3, #12
 80080dc:	f8ca 3000 	str.w	r3, [sl]
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f0:	6921      	ldr	r1, [r4, #16]
 80080f2:	464a      	mov	r2, r9
 80080f4:	f7ff fb46 	bl	8007784 <memcpy>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	6126      	str	r6, [r4, #16]
 8008106:	6165      	str	r5, [r4, #20]
 8008108:	444e      	add	r6, r9
 800810a:	eba5 0509 	sub.w	r5, r5, r9
 800810e:	6026      	str	r6, [r4, #0]
 8008110:	60a5      	str	r5, [r4, #8]
 8008112:	463e      	mov	r6, r7
 8008114:	42be      	cmp	r6, r7
 8008116:	d900      	bls.n	800811a <__ssputs_r+0x86>
 8008118:	463e      	mov	r6, r7
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	4632      	mov	r2, r6
 800811e:	4641      	mov	r1, r8
 8008120:	f000 f966 	bl	80083f0 <memmove>
 8008124:	68a3      	ldr	r3, [r4, #8]
 8008126:	1b9b      	subs	r3, r3, r6
 8008128:	60a3      	str	r3, [r4, #8]
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	4433      	add	r3, r6
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	2000      	movs	r0, #0
 8008132:	e7db      	b.n	80080ec <__ssputs_r+0x58>
 8008134:	462a      	mov	r2, r5
 8008136:	f000 f981 	bl	800843c <_realloc_r>
 800813a:	4606      	mov	r6, r0
 800813c:	2800      	cmp	r0, #0
 800813e:	d1e1      	bne.n	8008104 <__ssputs_r+0x70>
 8008140:	6921      	ldr	r1, [r4, #16]
 8008142:	4650      	mov	r0, sl
 8008144:	f7ff fec6 	bl	8007ed4 <_free_r>
 8008148:	e7c7      	b.n	80080da <__ssputs_r+0x46>
	...

0800814c <_svfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4698      	mov	r8, r3
 8008152:	898b      	ldrh	r3, [r1, #12]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	b09d      	sub	sp, #116	; 0x74
 8008158:	4607      	mov	r7, r0
 800815a:	460d      	mov	r5, r1
 800815c:	4614      	mov	r4, r2
 800815e:	d50e      	bpl.n	800817e <_svfiprintf_r+0x32>
 8008160:	690b      	ldr	r3, [r1, #16]
 8008162:	b963      	cbnz	r3, 800817e <_svfiprintf_r+0x32>
 8008164:	2140      	movs	r1, #64	; 0x40
 8008166:	f7ff ff21 	bl	8007fac <_malloc_r>
 800816a:	6028      	str	r0, [r5, #0]
 800816c:	6128      	str	r0, [r5, #16]
 800816e:	b920      	cbnz	r0, 800817a <_svfiprintf_r+0x2e>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008178:	e0d1      	b.n	800831e <_svfiprintf_r+0x1d2>
 800817a:	2340      	movs	r3, #64	; 0x40
 800817c:	616b      	str	r3, [r5, #20]
 800817e:	2300      	movs	r3, #0
 8008180:	9309      	str	r3, [sp, #36]	; 0x24
 8008182:	2320      	movs	r3, #32
 8008184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008188:	f8cd 800c 	str.w	r8, [sp, #12]
 800818c:	2330      	movs	r3, #48	; 0x30
 800818e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008338 <_svfiprintf_r+0x1ec>
 8008192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008196:	f04f 0901 	mov.w	r9, #1
 800819a:	4623      	mov	r3, r4
 800819c:	469a      	mov	sl, r3
 800819e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a2:	b10a      	cbz	r2, 80081a8 <_svfiprintf_r+0x5c>
 80081a4:	2a25      	cmp	r2, #37	; 0x25
 80081a6:	d1f9      	bne.n	800819c <_svfiprintf_r+0x50>
 80081a8:	ebba 0b04 	subs.w	fp, sl, r4
 80081ac:	d00b      	beq.n	80081c6 <_svfiprintf_r+0x7a>
 80081ae:	465b      	mov	r3, fp
 80081b0:	4622      	mov	r2, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7ff ff6d 	bl	8008094 <__ssputs_r>
 80081ba:	3001      	adds	r0, #1
 80081bc:	f000 80aa 	beq.w	8008314 <_svfiprintf_r+0x1c8>
 80081c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c2:	445a      	add	r2, fp
 80081c4:	9209      	str	r2, [sp, #36]	; 0x24
 80081c6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80a2 	beq.w	8008314 <_svfiprintf_r+0x1c8>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081da:	f10a 0a01 	add.w	sl, sl, #1
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	9307      	str	r3, [sp, #28]
 80081e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e6:	931a      	str	r3, [sp, #104]	; 0x68
 80081e8:	4654      	mov	r4, sl
 80081ea:	2205      	movs	r2, #5
 80081ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f0:	4851      	ldr	r0, [pc, #324]	; (8008338 <_svfiprintf_r+0x1ec>)
 80081f2:	f7f8 f81d 	bl	8000230 <memchr>
 80081f6:	9a04      	ldr	r2, [sp, #16]
 80081f8:	b9d8      	cbnz	r0, 8008232 <_svfiprintf_r+0xe6>
 80081fa:	06d0      	lsls	r0, r2, #27
 80081fc:	bf44      	itt	mi
 80081fe:	2320      	movmi	r3, #32
 8008200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008204:	0711      	lsls	r1, r2, #28
 8008206:	bf44      	itt	mi
 8008208:	232b      	movmi	r3, #43	; 0x2b
 800820a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820e:	f89a 3000 	ldrb.w	r3, [sl]
 8008212:	2b2a      	cmp	r3, #42	; 0x2a
 8008214:	d015      	beq.n	8008242 <_svfiprintf_r+0xf6>
 8008216:	9a07      	ldr	r2, [sp, #28]
 8008218:	4654      	mov	r4, sl
 800821a:	2000      	movs	r0, #0
 800821c:	f04f 0c0a 	mov.w	ip, #10
 8008220:	4621      	mov	r1, r4
 8008222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008226:	3b30      	subs	r3, #48	; 0x30
 8008228:	2b09      	cmp	r3, #9
 800822a:	d94e      	bls.n	80082ca <_svfiprintf_r+0x17e>
 800822c:	b1b0      	cbz	r0, 800825c <_svfiprintf_r+0x110>
 800822e:	9207      	str	r2, [sp, #28]
 8008230:	e014      	b.n	800825c <_svfiprintf_r+0x110>
 8008232:	eba0 0308 	sub.w	r3, r0, r8
 8008236:	fa09 f303 	lsl.w	r3, r9, r3
 800823a:	4313      	orrs	r3, r2
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	46a2      	mov	sl, r4
 8008240:	e7d2      	b.n	80081e8 <_svfiprintf_r+0x9c>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	1d19      	adds	r1, r3, #4
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	9103      	str	r1, [sp, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfbb      	ittet	lt
 800824e:	425b      	neglt	r3, r3
 8008250:	f042 0202 	orrlt.w	r2, r2, #2
 8008254:	9307      	strge	r3, [sp, #28]
 8008256:	9307      	strlt	r3, [sp, #28]
 8008258:	bfb8      	it	lt
 800825a:	9204      	strlt	r2, [sp, #16]
 800825c:	7823      	ldrb	r3, [r4, #0]
 800825e:	2b2e      	cmp	r3, #46	; 0x2e
 8008260:	d10c      	bne.n	800827c <_svfiprintf_r+0x130>
 8008262:	7863      	ldrb	r3, [r4, #1]
 8008264:	2b2a      	cmp	r3, #42	; 0x2a
 8008266:	d135      	bne.n	80082d4 <_svfiprintf_r+0x188>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	1d1a      	adds	r2, r3, #4
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	9203      	str	r2, [sp, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	bfb8      	it	lt
 8008274:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008278:	3402      	adds	r4, #2
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008348 <_svfiprintf_r+0x1fc>
 8008280:	7821      	ldrb	r1, [r4, #0]
 8008282:	2203      	movs	r2, #3
 8008284:	4650      	mov	r0, sl
 8008286:	f7f7 ffd3 	bl	8000230 <memchr>
 800828a:	b140      	cbz	r0, 800829e <_svfiprintf_r+0x152>
 800828c:	2340      	movs	r3, #64	; 0x40
 800828e:	eba0 000a 	sub.w	r0, r0, sl
 8008292:	fa03 f000 	lsl.w	r0, r3, r0
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	4303      	orrs	r3, r0
 800829a:	3401      	adds	r4, #1
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a2:	4826      	ldr	r0, [pc, #152]	; (800833c <_svfiprintf_r+0x1f0>)
 80082a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a8:	2206      	movs	r2, #6
 80082aa:	f7f7 ffc1 	bl	8000230 <memchr>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d038      	beq.n	8008324 <_svfiprintf_r+0x1d8>
 80082b2:	4b23      	ldr	r3, [pc, #140]	; (8008340 <_svfiprintf_r+0x1f4>)
 80082b4:	bb1b      	cbnz	r3, 80082fe <_svfiprintf_r+0x1b2>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	3307      	adds	r3, #7
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	3308      	adds	r3, #8
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c4:	4433      	add	r3, r6
 80082c6:	9309      	str	r3, [sp, #36]	; 0x24
 80082c8:	e767      	b.n	800819a <_svfiprintf_r+0x4e>
 80082ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ce:	460c      	mov	r4, r1
 80082d0:	2001      	movs	r0, #1
 80082d2:	e7a5      	b.n	8008220 <_svfiprintf_r+0xd4>
 80082d4:	2300      	movs	r3, #0
 80082d6:	3401      	adds	r4, #1
 80082d8:	9305      	str	r3, [sp, #20]
 80082da:	4619      	mov	r1, r3
 80082dc:	f04f 0c0a 	mov.w	ip, #10
 80082e0:	4620      	mov	r0, r4
 80082e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e6:	3a30      	subs	r2, #48	; 0x30
 80082e8:	2a09      	cmp	r2, #9
 80082ea:	d903      	bls.n	80082f4 <_svfiprintf_r+0x1a8>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0c5      	beq.n	800827c <_svfiprintf_r+0x130>
 80082f0:	9105      	str	r1, [sp, #20]
 80082f2:	e7c3      	b.n	800827c <_svfiprintf_r+0x130>
 80082f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f8:	4604      	mov	r4, r0
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7f0      	b.n	80082e0 <_svfiprintf_r+0x194>
 80082fe:	ab03      	add	r3, sp, #12
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	462a      	mov	r2, r5
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <_svfiprintf_r+0x1f8>)
 8008306:	a904      	add	r1, sp, #16
 8008308:	4638      	mov	r0, r7
 800830a:	f7fd ffcb 	bl	80062a4 <_printf_float>
 800830e:	1c42      	adds	r2, r0, #1
 8008310:	4606      	mov	r6, r0
 8008312:	d1d6      	bne.n	80082c2 <_svfiprintf_r+0x176>
 8008314:	89ab      	ldrh	r3, [r5, #12]
 8008316:	065b      	lsls	r3, r3, #25
 8008318:	f53f af2c 	bmi.w	8008174 <_svfiprintf_r+0x28>
 800831c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800831e:	b01d      	add	sp, #116	; 0x74
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	ab03      	add	r3, sp, #12
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	462a      	mov	r2, r5
 800832a:	4b06      	ldr	r3, [pc, #24]	; (8008344 <_svfiprintf_r+0x1f8>)
 800832c:	a904      	add	r1, sp, #16
 800832e:	4638      	mov	r0, r7
 8008330:	f7fe fa5c 	bl	80067ec <_printf_i>
 8008334:	e7eb      	b.n	800830e <_svfiprintf_r+0x1c2>
 8008336:	bf00      	nop
 8008338:	0800921c 	.word	0x0800921c
 800833c:	08009226 	.word	0x08009226
 8008340:	080062a5 	.word	0x080062a5
 8008344:	08008095 	.word	0x08008095
 8008348:	08009222 	.word	0x08009222

0800834c <_sbrk_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d06      	ldr	r5, [pc, #24]	; (8008368 <_sbrk_r+0x1c>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	f7f9 fd1c 	bl	8001d94 <_sbrk>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_sbrk_r+0x1a>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_sbrk_r+0x1a>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200004f4 	.word	0x200004f4

0800836c <__assert_func>:
 800836c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800836e:	4614      	mov	r4, r2
 8008370:	461a      	mov	r2, r3
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <__assert_func+0x2c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4605      	mov	r5, r0
 8008378:	68d8      	ldr	r0, [r3, #12]
 800837a:	b14c      	cbz	r4, 8008390 <__assert_func+0x24>
 800837c:	4b07      	ldr	r3, [pc, #28]	; (800839c <__assert_func+0x30>)
 800837e:	9100      	str	r1, [sp, #0]
 8008380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008384:	4906      	ldr	r1, [pc, #24]	; (80083a0 <__assert_func+0x34>)
 8008386:	462b      	mov	r3, r5
 8008388:	f000 f80e 	bl	80083a8 <fiprintf>
 800838c:	f000 faac 	bl	80088e8 <abort>
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <__assert_func+0x38>)
 8008392:	461c      	mov	r4, r3
 8008394:	e7f3      	b.n	800837e <__assert_func+0x12>
 8008396:	bf00      	nop
 8008398:	20000088 	.word	0x20000088
 800839c:	0800922d 	.word	0x0800922d
 80083a0:	0800923a 	.word	0x0800923a
 80083a4:	08009268 	.word	0x08009268

080083a8 <fiprintf>:
 80083a8:	b40e      	push	{r1, r2, r3}
 80083aa:	b503      	push	{r0, r1, lr}
 80083ac:	4601      	mov	r1, r0
 80083ae:	ab03      	add	r3, sp, #12
 80083b0:	4805      	ldr	r0, [pc, #20]	; (80083c8 <fiprintf+0x20>)
 80083b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b6:	6800      	ldr	r0, [r0, #0]
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	f000 f897 	bl	80084ec <_vfiprintf_r>
 80083be:	b002      	add	sp, #8
 80083c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083c4:	b003      	add	sp, #12
 80083c6:	4770      	bx	lr
 80083c8:	20000088 	.word	0x20000088

080083cc <__ascii_mbtowc>:
 80083cc:	b082      	sub	sp, #8
 80083ce:	b901      	cbnz	r1, 80083d2 <__ascii_mbtowc+0x6>
 80083d0:	a901      	add	r1, sp, #4
 80083d2:	b142      	cbz	r2, 80083e6 <__ascii_mbtowc+0x1a>
 80083d4:	b14b      	cbz	r3, 80083ea <__ascii_mbtowc+0x1e>
 80083d6:	7813      	ldrb	r3, [r2, #0]
 80083d8:	600b      	str	r3, [r1, #0]
 80083da:	7812      	ldrb	r2, [r2, #0]
 80083dc:	1e10      	subs	r0, r2, #0
 80083de:	bf18      	it	ne
 80083e0:	2001      	movne	r0, #1
 80083e2:	b002      	add	sp, #8
 80083e4:	4770      	bx	lr
 80083e6:	4610      	mov	r0, r2
 80083e8:	e7fb      	b.n	80083e2 <__ascii_mbtowc+0x16>
 80083ea:	f06f 0001 	mvn.w	r0, #1
 80083ee:	e7f8      	b.n	80083e2 <__ascii_mbtowc+0x16>

080083f0 <memmove>:
 80083f0:	4288      	cmp	r0, r1
 80083f2:	b510      	push	{r4, lr}
 80083f4:	eb01 0402 	add.w	r4, r1, r2
 80083f8:	d902      	bls.n	8008400 <memmove+0x10>
 80083fa:	4284      	cmp	r4, r0
 80083fc:	4623      	mov	r3, r4
 80083fe:	d807      	bhi.n	8008410 <memmove+0x20>
 8008400:	1e43      	subs	r3, r0, #1
 8008402:	42a1      	cmp	r1, r4
 8008404:	d008      	beq.n	8008418 <memmove+0x28>
 8008406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800840a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800840e:	e7f8      	b.n	8008402 <memmove+0x12>
 8008410:	4402      	add	r2, r0
 8008412:	4601      	mov	r1, r0
 8008414:	428a      	cmp	r2, r1
 8008416:	d100      	bne.n	800841a <memmove+0x2a>
 8008418:	bd10      	pop	{r4, pc}
 800841a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800841e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008422:	e7f7      	b.n	8008414 <memmove+0x24>

08008424 <__malloc_lock>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__malloc_lock+0x8>)
 8008426:	f000 bc1f 	b.w	8008c68 <__retarget_lock_acquire_recursive>
 800842a:	bf00      	nop
 800842c:	200004f8 	.word	0x200004f8

08008430 <__malloc_unlock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_unlock+0x8>)
 8008432:	f000 bc1a 	b.w	8008c6a <__retarget_lock_release_recursive>
 8008436:	bf00      	nop
 8008438:	200004f8 	.word	0x200004f8

0800843c <_realloc_r>:
 800843c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008440:	4680      	mov	r8, r0
 8008442:	4614      	mov	r4, r2
 8008444:	460e      	mov	r6, r1
 8008446:	b921      	cbnz	r1, 8008452 <_realloc_r+0x16>
 8008448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844c:	4611      	mov	r1, r2
 800844e:	f7ff bdad 	b.w	8007fac <_malloc_r>
 8008452:	b92a      	cbnz	r2, 8008460 <_realloc_r+0x24>
 8008454:	f7ff fd3e 	bl	8007ed4 <_free_r>
 8008458:	4625      	mov	r5, r4
 800845a:	4628      	mov	r0, r5
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	f000 fc6a 	bl	8008d38 <_malloc_usable_size_r>
 8008464:	4284      	cmp	r4, r0
 8008466:	4607      	mov	r7, r0
 8008468:	d802      	bhi.n	8008470 <_realloc_r+0x34>
 800846a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800846e:	d812      	bhi.n	8008496 <_realloc_r+0x5a>
 8008470:	4621      	mov	r1, r4
 8008472:	4640      	mov	r0, r8
 8008474:	f7ff fd9a 	bl	8007fac <_malloc_r>
 8008478:	4605      	mov	r5, r0
 800847a:	2800      	cmp	r0, #0
 800847c:	d0ed      	beq.n	800845a <_realloc_r+0x1e>
 800847e:	42bc      	cmp	r4, r7
 8008480:	4622      	mov	r2, r4
 8008482:	4631      	mov	r1, r6
 8008484:	bf28      	it	cs
 8008486:	463a      	movcs	r2, r7
 8008488:	f7ff f97c 	bl	8007784 <memcpy>
 800848c:	4631      	mov	r1, r6
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff fd20 	bl	8007ed4 <_free_r>
 8008494:	e7e1      	b.n	800845a <_realloc_r+0x1e>
 8008496:	4635      	mov	r5, r6
 8008498:	e7df      	b.n	800845a <_realloc_r+0x1e>

0800849a <__sfputc_r>:
 800849a:	6893      	ldr	r3, [r2, #8]
 800849c:	3b01      	subs	r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	b410      	push	{r4}
 80084a2:	6093      	str	r3, [r2, #8]
 80084a4:	da08      	bge.n	80084b8 <__sfputc_r+0x1e>
 80084a6:	6994      	ldr	r4, [r2, #24]
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	db01      	blt.n	80084b0 <__sfputc_r+0x16>
 80084ac:	290a      	cmp	r1, #10
 80084ae:	d103      	bne.n	80084b8 <__sfputc_r+0x1e>
 80084b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b4:	f000 b94a 	b.w	800874c <__swbuf_r>
 80084b8:	6813      	ldr	r3, [r2, #0]
 80084ba:	1c58      	adds	r0, r3, #1
 80084bc:	6010      	str	r0, [r2, #0]
 80084be:	7019      	strb	r1, [r3, #0]
 80084c0:	4608      	mov	r0, r1
 80084c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <__sfputs_r>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	4614      	mov	r4, r2
 80084d0:	18d5      	adds	r5, r2, r3
 80084d2:	42ac      	cmp	r4, r5
 80084d4:	d101      	bne.n	80084da <__sfputs_r+0x12>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e007      	b.n	80084ea <__sfputs_r+0x22>
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	463a      	mov	r2, r7
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff ffda 	bl	800849a <__sfputc_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d1f3      	bne.n	80084d2 <__sfputs_r+0xa>
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084ec <_vfiprintf_r>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	460d      	mov	r5, r1
 80084f2:	b09d      	sub	sp, #116	; 0x74
 80084f4:	4614      	mov	r4, r2
 80084f6:	4698      	mov	r8, r3
 80084f8:	4606      	mov	r6, r0
 80084fa:	b118      	cbz	r0, 8008504 <_vfiprintf_r+0x18>
 80084fc:	6983      	ldr	r3, [r0, #24]
 80084fe:	b90b      	cbnz	r3, 8008504 <_vfiprintf_r+0x18>
 8008500:	f000 fb14 	bl	8008b2c <__sinit>
 8008504:	4b89      	ldr	r3, [pc, #548]	; (800872c <_vfiprintf_r+0x240>)
 8008506:	429d      	cmp	r5, r3
 8008508:	d11b      	bne.n	8008542 <_vfiprintf_r+0x56>
 800850a:	6875      	ldr	r5, [r6, #4]
 800850c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850e:	07d9      	lsls	r1, r3, #31
 8008510:	d405      	bmi.n	800851e <_vfiprintf_r+0x32>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	059a      	lsls	r2, r3, #22
 8008516:	d402      	bmi.n	800851e <_vfiprintf_r+0x32>
 8008518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851a:	f000 fba5 	bl	8008c68 <__retarget_lock_acquire_recursive>
 800851e:	89ab      	ldrh	r3, [r5, #12]
 8008520:	071b      	lsls	r3, r3, #28
 8008522:	d501      	bpl.n	8008528 <_vfiprintf_r+0x3c>
 8008524:	692b      	ldr	r3, [r5, #16]
 8008526:	b9eb      	cbnz	r3, 8008564 <_vfiprintf_r+0x78>
 8008528:	4629      	mov	r1, r5
 800852a:	4630      	mov	r0, r6
 800852c:	f000 f96e 	bl	800880c <__swsetup_r>
 8008530:	b1c0      	cbz	r0, 8008564 <_vfiprintf_r+0x78>
 8008532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008534:	07dc      	lsls	r4, r3, #31
 8008536:	d50e      	bpl.n	8008556 <_vfiprintf_r+0x6a>
 8008538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800853c:	b01d      	add	sp, #116	; 0x74
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	4b7b      	ldr	r3, [pc, #492]	; (8008730 <_vfiprintf_r+0x244>)
 8008544:	429d      	cmp	r5, r3
 8008546:	d101      	bne.n	800854c <_vfiprintf_r+0x60>
 8008548:	68b5      	ldr	r5, [r6, #8]
 800854a:	e7df      	b.n	800850c <_vfiprintf_r+0x20>
 800854c:	4b79      	ldr	r3, [pc, #484]	; (8008734 <_vfiprintf_r+0x248>)
 800854e:	429d      	cmp	r5, r3
 8008550:	bf08      	it	eq
 8008552:	68f5      	ldreq	r5, [r6, #12]
 8008554:	e7da      	b.n	800850c <_vfiprintf_r+0x20>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	0598      	lsls	r0, r3, #22
 800855a:	d4ed      	bmi.n	8008538 <_vfiprintf_r+0x4c>
 800855c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800855e:	f000 fb84 	bl	8008c6a <__retarget_lock_release_recursive>
 8008562:	e7e9      	b.n	8008538 <_vfiprintf_r+0x4c>
 8008564:	2300      	movs	r3, #0
 8008566:	9309      	str	r3, [sp, #36]	; 0x24
 8008568:	2320      	movs	r3, #32
 800856a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800856e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008572:	2330      	movs	r3, #48	; 0x30
 8008574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008738 <_vfiprintf_r+0x24c>
 8008578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800857c:	f04f 0901 	mov.w	r9, #1
 8008580:	4623      	mov	r3, r4
 8008582:	469a      	mov	sl, r3
 8008584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008588:	b10a      	cbz	r2, 800858e <_vfiprintf_r+0xa2>
 800858a:	2a25      	cmp	r2, #37	; 0x25
 800858c:	d1f9      	bne.n	8008582 <_vfiprintf_r+0x96>
 800858e:	ebba 0b04 	subs.w	fp, sl, r4
 8008592:	d00b      	beq.n	80085ac <_vfiprintf_r+0xc0>
 8008594:	465b      	mov	r3, fp
 8008596:	4622      	mov	r2, r4
 8008598:	4629      	mov	r1, r5
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff ff94 	bl	80084c8 <__sfputs_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	f000 80aa 	beq.w	80086fa <_vfiprintf_r+0x20e>
 80085a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a8:	445a      	add	r2, fp
 80085aa:	9209      	str	r2, [sp, #36]	; 0x24
 80085ac:	f89a 3000 	ldrb.w	r3, [sl]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80a2 	beq.w	80086fa <_vfiprintf_r+0x20e>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c0:	f10a 0a01 	add.w	sl, sl, #1
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085cc:	931a      	str	r3, [sp, #104]	; 0x68
 80085ce:	4654      	mov	r4, sl
 80085d0:	2205      	movs	r2, #5
 80085d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d6:	4858      	ldr	r0, [pc, #352]	; (8008738 <_vfiprintf_r+0x24c>)
 80085d8:	f7f7 fe2a 	bl	8000230 <memchr>
 80085dc:	9a04      	ldr	r2, [sp, #16]
 80085de:	b9d8      	cbnz	r0, 8008618 <_vfiprintf_r+0x12c>
 80085e0:	06d1      	lsls	r1, r2, #27
 80085e2:	bf44      	itt	mi
 80085e4:	2320      	movmi	r3, #32
 80085e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ea:	0713      	lsls	r3, r2, #28
 80085ec:	bf44      	itt	mi
 80085ee:	232b      	movmi	r3, #43	; 0x2b
 80085f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085f4:	f89a 3000 	ldrb.w	r3, [sl]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d015      	beq.n	8008628 <_vfiprintf_r+0x13c>
 80085fc:	9a07      	ldr	r2, [sp, #28]
 80085fe:	4654      	mov	r4, sl
 8008600:	2000      	movs	r0, #0
 8008602:	f04f 0c0a 	mov.w	ip, #10
 8008606:	4621      	mov	r1, r4
 8008608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800860c:	3b30      	subs	r3, #48	; 0x30
 800860e:	2b09      	cmp	r3, #9
 8008610:	d94e      	bls.n	80086b0 <_vfiprintf_r+0x1c4>
 8008612:	b1b0      	cbz	r0, 8008642 <_vfiprintf_r+0x156>
 8008614:	9207      	str	r2, [sp, #28]
 8008616:	e014      	b.n	8008642 <_vfiprintf_r+0x156>
 8008618:	eba0 0308 	sub.w	r3, r0, r8
 800861c:	fa09 f303 	lsl.w	r3, r9, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	46a2      	mov	sl, r4
 8008626:	e7d2      	b.n	80085ce <_vfiprintf_r+0xe2>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	1d19      	adds	r1, r3, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	9103      	str	r1, [sp, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bfbb      	ittet	lt
 8008634:	425b      	neglt	r3, r3
 8008636:	f042 0202 	orrlt.w	r2, r2, #2
 800863a:	9307      	strge	r3, [sp, #28]
 800863c:	9307      	strlt	r3, [sp, #28]
 800863e:	bfb8      	it	lt
 8008640:	9204      	strlt	r2, [sp, #16]
 8008642:	7823      	ldrb	r3, [r4, #0]
 8008644:	2b2e      	cmp	r3, #46	; 0x2e
 8008646:	d10c      	bne.n	8008662 <_vfiprintf_r+0x176>
 8008648:	7863      	ldrb	r3, [r4, #1]
 800864a:	2b2a      	cmp	r3, #42	; 0x2a
 800864c:	d135      	bne.n	80086ba <_vfiprintf_r+0x1ce>
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	1d1a      	adds	r2, r3, #4
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	9203      	str	r2, [sp, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfb8      	it	lt
 800865a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800865e:	3402      	adds	r4, #2
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008748 <_vfiprintf_r+0x25c>
 8008666:	7821      	ldrb	r1, [r4, #0]
 8008668:	2203      	movs	r2, #3
 800866a:	4650      	mov	r0, sl
 800866c:	f7f7 fde0 	bl	8000230 <memchr>
 8008670:	b140      	cbz	r0, 8008684 <_vfiprintf_r+0x198>
 8008672:	2340      	movs	r3, #64	; 0x40
 8008674:	eba0 000a 	sub.w	r0, r0, sl
 8008678:	fa03 f000 	lsl.w	r0, r3, r0
 800867c:	9b04      	ldr	r3, [sp, #16]
 800867e:	4303      	orrs	r3, r0
 8008680:	3401      	adds	r4, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008688:	482c      	ldr	r0, [pc, #176]	; (800873c <_vfiprintf_r+0x250>)
 800868a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800868e:	2206      	movs	r2, #6
 8008690:	f7f7 fdce 	bl	8000230 <memchr>
 8008694:	2800      	cmp	r0, #0
 8008696:	d03f      	beq.n	8008718 <_vfiprintf_r+0x22c>
 8008698:	4b29      	ldr	r3, [pc, #164]	; (8008740 <_vfiprintf_r+0x254>)
 800869a:	bb1b      	cbnz	r3, 80086e4 <_vfiprintf_r+0x1f8>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	3307      	adds	r3, #7
 80086a0:	f023 0307 	bic.w	r3, r3, #7
 80086a4:	3308      	adds	r3, #8
 80086a6:	9303      	str	r3, [sp, #12]
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	443b      	add	r3, r7
 80086ac:	9309      	str	r3, [sp, #36]	; 0x24
 80086ae:	e767      	b.n	8008580 <_vfiprintf_r+0x94>
 80086b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b4:	460c      	mov	r4, r1
 80086b6:	2001      	movs	r0, #1
 80086b8:	e7a5      	b.n	8008606 <_vfiprintf_r+0x11a>
 80086ba:	2300      	movs	r3, #0
 80086bc:	3401      	adds	r4, #1
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	4619      	mov	r1, r3
 80086c2:	f04f 0c0a 	mov.w	ip, #10
 80086c6:	4620      	mov	r0, r4
 80086c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086cc:	3a30      	subs	r2, #48	; 0x30
 80086ce:	2a09      	cmp	r2, #9
 80086d0:	d903      	bls.n	80086da <_vfiprintf_r+0x1ee>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0c5      	beq.n	8008662 <_vfiprintf_r+0x176>
 80086d6:	9105      	str	r1, [sp, #20]
 80086d8:	e7c3      	b.n	8008662 <_vfiprintf_r+0x176>
 80086da:	fb0c 2101 	mla	r1, ip, r1, r2
 80086de:	4604      	mov	r4, r0
 80086e0:	2301      	movs	r3, #1
 80086e2:	e7f0      	b.n	80086c6 <_vfiprintf_r+0x1da>
 80086e4:	ab03      	add	r3, sp, #12
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	462a      	mov	r2, r5
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <_vfiprintf_r+0x258>)
 80086ec:	a904      	add	r1, sp, #16
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7fd fdd8 	bl	80062a4 <_printf_float>
 80086f4:	4607      	mov	r7, r0
 80086f6:	1c78      	adds	r0, r7, #1
 80086f8:	d1d6      	bne.n	80086a8 <_vfiprintf_r+0x1bc>
 80086fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086fc:	07d9      	lsls	r1, r3, #31
 80086fe:	d405      	bmi.n	800870c <_vfiprintf_r+0x220>
 8008700:	89ab      	ldrh	r3, [r5, #12]
 8008702:	059a      	lsls	r2, r3, #22
 8008704:	d402      	bmi.n	800870c <_vfiprintf_r+0x220>
 8008706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008708:	f000 faaf 	bl	8008c6a <__retarget_lock_release_recursive>
 800870c:	89ab      	ldrh	r3, [r5, #12]
 800870e:	065b      	lsls	r3, r3, #25
 8008710:	f53f af12 	bmi.w	8008538 <_vfiprintf_r+0x4c>
 8008714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008716:	e711      	b.n	800853c <_vfiprintf_r+0x50>
 8008718:	ab03      	add	r3, sp, #12
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	462a      	mov	r2, r5
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <_vfiprintf_r+0x258>)
 8008720:	a904      	add	r1, sp, #16
 8008722:	4630      	mov	r0, r6
 8008724:	f7fe f862 	bl	80067ec <_printf_i>
 8008728:	e7e4      	b.n	80086f4 <_vfiprintf_r+0x208>
 800872a:	bf00      	nop
 800872c:	08009394 	.word	0x08009394
 8008730:	080093b4 	.word	0x080093b4
 8008734:	08009374 	.word	0x08009374
 8008738:	0800921c 	.word	0x0800921c
 800873c:	08009226 	.word	0x08009226
 8008740:	080062a5 	.word	0x080062a5
 8008744:	080084c9 	.word	0x080084c9
 8008748:	08009222 	.word	0x08009222

0800874c <__swbuf_r>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	460e      	mov	r6, r1
 8008750:	4614      	mov	r4, r2
 8008752:	4605      	mov	r5, r0
 8008754:	b118      	cbz	r0, 800875e <__swbuf_r+0x12>
 8008756:	6983      	ldr	r3, [r0, #24]
 8008758:	b90b      	cbnz	r3, 800875e <__swbuf_r+0x12>
 800875a:	f000 f9e7 	bl	8008b2c <__sinit>
 800875e:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <__swbuf_r+0x98>)
 8008760:	429c      	cmp	r4, r3
 8008762:	d12b      	bne.n	80087bc <__swbuf_r+0x70>
 8008764:	686c      	ldr	r4, [r5, #4]
 8008766:	69a3      	ldr	r3, [r4, #24]
 8008768:	60a3      	str	r3, [r4, #8]
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	071a      	lsls	r2, r3, #28
 800876e:	d52f      	bpl.n	80087d0 <__swbuf_r+0x84>
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	b36b      	cbz	r3, 80087d0 <__swbuf_r+0x84>
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	1ac0      	subs	r0, r0, r3
 800877a:	6963      	ldr	r3, [r4, #20]
 800877c:	b2f6      	uxtb	r6, r6
 800877e:	4283      	cmp	r3, r0
 8008780:	4637      	mov	r7, r6
 8008782:	dc04      	bgt.n	800878e <__swbuf_r+0x42>
 8008784:	4621      	mov	r1, r4
 8008786:	4628      	mov	r0, r5
 8008788:	f000 f93c 	bl	8008a04 <_fflush_r>
 800878c:	bb30      	cbnz	r0, 80087dc <__swbuf_r+0x90>
 800878e:	68a3      	ldr	r3, [r4, #8]
 8008790:	3b01      	subs	r3, #1
 8008792:	60a3      	str	r3, [r4, #8]
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	6022      	str	r2, [r4, #0]
 800879a:	701e      	strb	r6, [r3, #0]
 800879c:	6963      	ldr	r3, [r4, #20]
 800879e:	3001      	adds	r0, #1
 80087a0:	4283      	cmp	r3, r0
 80087a2:	d004      	beq.n	80087ae <__swbuf_r+0x62>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	07db      	lsls	r3, r3, #31
 80087a8:	d506      	bpl.n	80087b8 <__swbuf_r+0x6c>
 80087aa:	2e0a      	cmp	r6, #10
 80087ac:	d104      	bne.n	80087b8 <__swbuf_r+0x6c>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4628      	mov	r0, r5
 80087b2:	f000 f927 	bl	8008a04 <_fflush_r>
 80087b6:	b988      	cbnz	r0, 80087dc <__swbuf_r+0x90>
 80087b8:	4638      	mov	r0, r7
 80087ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <__swbuf_r+0x9c>)
 80087be:	429c      	cmp	r4, r3
 80087c0:	d101      	bne.n	80087c6 <__swbuf_r+0x7a>
 80087c2:	68ac      	ldr	r4, [r5, #8]
 80087c4:	e7cf      	b.n	8008766 <__swbuf_r+0x1a>
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <__swbuf_r+0xa0>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	bf08      	it	eq
 80087cc:	68ec      	ldreq	r4, [r5, #12]
 80087ce:	e7ca      	b.n	8008766 <__swbuf_r+0x1a>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f81a 	bl	800880c <__swsetup_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0cb      	beq.n	8008774 <__swbuf_r+0x28>
 80087dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80087e0:	e7ea      	b.n	80087b8 <__swbuf_r+0x6c>
 80087e2:	bf00      	nop
 80087e4:	08009394 	.word	0x08009394
 80087e8:	080093b4 	.word	0x080093b4
 80087ec:	08009374 	.word	0x08009374

080087f0 <__ascii_wctomb>:
 80087f0:	b149      	cbz	r1, 8008806 <__ascii_wctomb+0x16>
 80087f2:	2aff      	cmp	r2, #255	; 0xff
 80087f4:	bf85      	ittet	hi
 80087f6:	238a      	movhi	r3, #138	; 0x8a
 80087f8:	6003      	strhi	r3, [r0, #0]
 80087fa:	700a      	strbls	r2, [r1, #0]
 80087fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008800:	bf98      	it	ls
 8008802:	2001      	movls	r0, #1
 8008804:	4770      	bx	lr
 8008806:	4608      	mov	r0, r1
 8008808:	4770      	bx	lr
	...

0800880c <__swsetup_r>:
 800880c:	4b32      	ldr	r3, [pc, #200]	; (80088d8 <__swsetup_r+0xcc>)
 800880e:	b570      	push	{r4, r5, r6, lr}
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	4606      	mov	r6, r0
 8008814:	460c      	mov	r4, r1
 8008816:	b125      	cbz	r5, 8008822 <__swsetup_r+0x16>
 8008818:	69ab      	ldr	r3, [r5, #24]
 800881a:	b913      	cbnz	r3, 8008822 <__swsetup_r+0x16>
 800881c:	4628      	mov	r0, r5
 800881e:	f000 f985 	bl	8008b2c <__sinit>
 8008822:	4b2e      	ldr	r3, [pc, #184]	; (80088dc <__swsetup_r+0xd0>)
 8008824:	429c      	cmp	r4, r3
 8008826:	d10f      	bne.n	8008848 <__swsetup_r+0x3c>
 8008828:	686c      	ldr	r4, [r5, #4]
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008830:	0719      	lsls	r1, r3, #28
 8008832:	d42c      	bmi.n	800888e <__swsetup_r+0x82>
 8008834:	06dd      	lsls	r5, r3, #27
 8008836:	d411      	bmi.n	800885c <__swsetup_r+0x50>
 8008838:	2309      	movs	r3, #9
 800883a:	6033      	str	r3, [r6, #0]
 800883c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008846:	e03e      	b.n	80088c6 <__swsetup_r+0xba>
 8008848:	4b25      	ldr	r3, [pc, #148]	; (80088e0 <__swsetup_r+0xd4>)
 800884a:	429c      	cmp	r4, r3
 800884c:	d101      	bne.n	8008852 <__swsetup_r+0x46>
 800884e:	68ac      	ldr	r4, [r5, #8]
 8008850:	e7eb      	b.n	800882a <__swsetup_r+0x1e>
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <__swsetup_r+0xd8>)
 8008854:	429c      	cmp	r4, r3
 8008856:	bf08      	it	eq
 8008858:	68ec      	ldreq	r4, [r5, #12]
 800885a:	e7e6      	b.n	800882a <__swsetup_r+0x1e>
 800885c:	0758      	lsls	r0, r3, #29
 800885e:	d512      	bpl.n	8008886 <__swsetup_r+0x7a>
 8008860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008862:	b141      	cbz	r1, 8008876 <__swsetup_r+0x6a>
 8008864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__swsetup_r+0x66>
 800886c:	4630      	mov	r0, r6
 800886e:	f7ff fb31 	bl	8007ed4 <_free_r>
 8008872:	2300      	movs	r3, #0
 8008874:	6363      	str	r3, [r4, #52]	; 0x34
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	2300      	movs	r3, #0
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0308 	orr.w	r3, r3, #8
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	b94b      	cbnz	r3, 80088a6 <__swsetup_r+0x9a>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889c:	d003      	beq.n	80088a6 <__swsetup_r+0x9a>
 800889e:	4621      	mov	r1, r4
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 fa09 	bl	8008cb8 <__smakebuf_r>
 80088a6:	89a0      	ldrh	r0, [r4, #12]
 80088a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088ac:	f010 0301 	ands.w	r3, r0, #1
 80088b0:	d00a      	beq.n	80088c8 <__swsetup_r+0xbc>
 80088b2:	2300      	movs	r3, #0
 80088b4:	60a3      	str	r3, [r4, #8]
 80088b6:	6963      	ldr	r3, [r4, #20]
 80088b8:	425b      	negs	r3, r3
 80088ba:	61a3      	str	r3, [r4, #24]
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	b943      	cbnz	r3, 80088d2 <__swsetup_r+0xc6>
 80088c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088c4:	d1ba      	bne.n	800883c <__swsetup_r+0x30>
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	0781      	lsls	r1, r0, #30
 80088ca:	bf58      	it	pl
 80088cc:	6963      	ldrpl	r3, [r4, #20]
 80088ce:	60a3      	str	r3, [r4, #8]
 80088d0:	e7f4      	b.n	80088bc <__swsetup_r+0xb0>
 80088d2:	2000      	movs	r0, #0
 80088d4:	e7f7      	b.n	80088c6 <__swsetup_r+0xba>
 80088d6:	bf00      	nop
 80088d8:	20000088 	.word	0x20000088
 80088dc:	08009394 	.word	0x08009394
 80088e0:	080093b4 	.word	0x080093b4
 80088e4:	08009374 	.word	0x08009374

080088e8 <abort>:
 80088e8:	b508      	push	{r3, lr}
 80088ea:	2006      	movs	r0, #6
 80088ec:	f000 fa54 	bl	8008d98 <raise>
 80088f0:	2001      	movs	r0, #1
 80088f2:	f7f9 f9d7 	bl	8001ca4 <_exit>
	...

080088f8 <__sflush_r>:
 80088f8:	898a      	ldrh	r2, [r1, #12]
 80088fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	4605      	mov	r5, r0
 8008900:	0710      	lsls	r0, r2, #28
 8008902:	460c      	mov	r4, r1
 8008904:	d458      	bmi.n	80089b8 <__sflush_r+0xc0>
 8008906:	684b      	ldr	r3, [r1, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dc05      	bgt.n	8008918 <__sflush_r+0x20>
 800890c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	dc02      	bgt.n	8008918 <__sflush_r+0x20>
 8008912:	2000      	movs	r0, #0
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800891a:	2e00      	cmp	r6, #0
 800891c:	d0f9      	beq.n	8008912 <__sflush_r+0x1a>
 800891e:	2300      	movs	r3, #0
 8008920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008924:	682f      	ldr	r7, [r5, #0]
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	d032      	beq.n	8008990 <__sflush_r+0x98>
 800892a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	075a      	lsls	r2, r3, #29
 8008930:	d505      	bpl.n	800893e <__sflush_r+0x46>
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	1ac0      	subs	r0, r0, r3
 8008936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008938:	b10b      	cbz	r3, 800893e <__sflush_r+0x46>
 800893a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893c:	1ac0      	subs	r0, r0, r3
 800893e:	2300      	movs	r3, #0
 8008940:	4602      	mov	r2, r0
 8008942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008944:	6a21      	ldr	r1, [r4, #32]
 8008946:	4628      	mov	r0, r5
 8008948:	47b0      	blx	r6
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	d106      	bne.n	800895e <__sflush_r+0x66>
 8008950:	6829      	ldr	r1, [r5, #0]
 8008952:	291d      	cmp	r1, #29
 8008954:	d82c      	bhi.n	80089b0 <__sflush_r+0xb8>
 8008956:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <__sflush_r+0x108>)
 8008958:	40ca      	lsrs	r2, r1
 800895a:	07d6      	lsls	r6, r2, #31
 800895c:	d528      	bpl.n	80089b0 <__sflush_r+0xb8>
 800895e:	2200      	movs	r2, #0
 8008960:	6062      	str	r2, [r4, #4]
 8008962:	04d9      	lsls	r1, r3, #19
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	d504      	bpl.n	8008974 <__sflush_r+0x7c>
 800896a:	1c42      	adds	r2, r0, #1
 800896c:	d101      	bne.n	8008972 <__sflush_r+0x7a>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	b903      	cbnz	r3, 8008974 <__sflush_r+0x7c>
 8008972:	6560      	str	r0, [r4, #84]	; 0x54
 8008974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008976:	602f      	str	r7, [r5, #0]
 8008978:	2900      	cmp	r1, #0
 800897a:	d0ca      	beq.n	8008912 <__sflush_r+0x1a>
 800897c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008980:	4299      	cmp	r1, r3
 8008982:	d002      	beq.n	800898a <__sflush_r+0x92>
 8008984:	4628      	mov	r0, r5
 8008986:	f7ff faa5 	bl	8007ed4 <_free_r>
 800898a:	2000      	movs	r0, #0
 800898c:	6360      	str	r0, [r4, #52]	; 0x34
 800898e:	e7c1      	b.n	8008914 <__sflush_r+0x1c>
 8008990:	6a21      	ldr	r1, [r4, #32]
 8008992:	2301      	movs	r3, #1
 8008994:	4628      	mov	r0, r5
 8008996:	47b0      	blx	r6
 8008998:	1c41      	adds	r1, r0, #1
 800899a:	d1c7      	bne.n	800892c <__sflush_r+0x34>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c4      	beq.n	800892c <__sflush_r+0x34>
 80089a2:	2b1d      	cmp	r3, #29
 80089a4:	d001      	beq.n	80089aa <__sflush_r+0xb2>
 80089a6:	2b16      	cmp	r3, #22
 80089a8:	d101      	bne.n	80089ae <__sflush_r+0xb6>
 80089aa:	602f      	str	r7, [r5, #0]
 80089ac:	e7b1      	b.n	8008912 <__sflush_r+0x1a>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	e7ad      	b.n	8008914 <__sflush_r+0x1c>
 80089b8:	690f      	ldr	r7, [r1, #16]
 80089ba:	2f00      	cmp	r7, #0
 80089bc:	d0a9      	beq.n	8008912 <__sflush_r+0x1a>
 80089be:	0793      	lsls	r3, r2, #30
 80089c0:	680e      	ldr	r6, [r1, #0]
 80089c2:	bf08      	it	eq
 80089c4:	694b      	ldreq	r3, [r1, #20]
 80089c6:	600f      	str	r7, [r1, #0]
 80089c8:	bf18      	it	ne
 80089ca:	2300      	movne	r3, #0
 80089cc:	eba6 0807 	sub.w	r8, r6, r7
 80089d0:	608b      	str	r3, [r1, #8]
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	dd9c      	ble.n	8008912 <__sflush_r+0x1a>
 80089d8:	6a21      	ldr	r1, [r4, #32]
 80089da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089dc:	4643      	mov	r3, r8
 80089de:	463a      	mov	r2, r7
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b0      	blx	r6
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dc06      	bgt.n	80089f6 <__sflush_r+0xfe>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f4:	e78e      	b.n	8008914 <__sflush_r+0x1c>
 80089f6:	4407      	add	r7, r0
 80089f8:	eba8 0800 	sub.w	r8, r8, r0
 80089fc:	e7e9      	b.n	80089d2 <__sflush_r+0xda>
 80089fe:	bf00      	nop
 8008a00:	20400001 	.word	0x20400001

08008a04 <_fflush_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b913      	cbnz	r3, 8008a14 <_fflush_r+0x10>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	4628      	mov	r0, r5
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	b118      	cbz	r0, 8008a1e <_fflush_r+0x1a>
 8008a16:	6983      	ldr	r3, [r0, #24]
 8008a18:	b90b      	cbnz	r3, 8008a1e <_fflush_r+0x1a>
 8008a1a:	f000 f887 	bl	8008b2c <__sinit>
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <_fflush_r+0x6c>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	d11b      	bne.n	8008a5c <_fflush_r+0x58>
 8008a24:	686c      	ldr	r4, [r5, #4]
 8008a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0ef      	beq.n	8008a0e <_fflush_r+0xa>
 8008a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a30:	07d0      	lsls	r0, r2, #31
 8008a32:	d404      	bmi.n	8008a3e <_fflush_r+0x3a>
 8008a34:	0599      	lsls	r1, r3, #22
 8008a36:	d402      	bmi.n	8008a3e <_fflush_r+0x3a>
 8008a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3a:	f000 f915 	bl	8008c68 <__retarget_lock_acquire_recursive>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7ff ff59 	bl	80088f8 <__sflush_r>
 8008a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a48:	07da      	lsls	r2, r3, #31
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	d4e0      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	059b      	lsls	r3, r3, #22
 8008a52:	d4dd      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a56:	f000 f908 	bl	8008c6a <__retarget_lock_release_recursive>
 8008a5a:	e7d9      	b.n	8008a10 <_fflush_r+0xc>
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <_fflush_r+0x70>)
 8008a5e:	429c      	cmp	r4, r3
 8008a60:	d101      	bne.n	8008a66 <_fflush_r+0x62>
 8008a62:	68ac      	ldr	r4, [r5, #8]
 8008a64:	e7df      	b.n	8008a26 <_fflush_r+0x22>
 8008a66:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <_fflush_r+0x74>)
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	bf08      	it	eq
 8008a6c:	68ec      	ldreq	r4, [r5, #12]
 8008a6e:	e7da      	b.n	8008a26 <_fflush_r+0x22>
 8008a70:	08009394 	.word	0x08009394
 8008a74:	080093b4 	.word	0x080093b4
 8008a78:	08009374 	.word	0x08009374

08008a7c <std>:
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	4604      	mov	r4, r0
 8008a82:	e9c0 3300 	strd	r3, r3, [r0]
 8008a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a8a:	6083      	str	r3, [r0, #8]
 8008a8c:	8181      	strh	r1, [r0, #12]
 8008a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a90:	81c2      	strh	r2, [r0, #14]
 8008a92:	6183      	str	r3, [r0, #24]
 8008a94:	4619      	mov	r1, r3
 8008a96:	2208      	movs	r2, #8
 8008a98:	305c      	adds	r0, #92	; 0x5c
 8008a9a:	f7fd fb5b 	bl	8006154 <memset>
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <std+0x38>)
 8008aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x3c>)
 8008aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x40>)
 8008aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x44>)
 8008aac:	6224      	str	r4, [r4, #32]
 8008aae:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08008dd1 	.word	0x08008dd1
 8008ab8:	08008df3 	.word	0x08008df3
 8008abc:	08008e2b 	.word	0x08008e2b
 8008ac0:	08008e4f 	.word	0x08008e4f

08008ac4 <_cleanup_r>:
 8008ac4:	4901      	ldr	r1, [pc, #4]	; (8008acc <_cleanup_r+0x8>)
 8008ac6:	f000 b8af 	b.w	8008c28 <_fwalk_reent>
 8008aca:	bf00      	nop
 8008acc:	08008a05 	.word	0x08008a05

08008ad0 <__sfmoreglue>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	2268      	movs	r2, #104	; 0x68
 8008ad4:	1e4d      	subs	r5, r1, #1
 8008ad6:	4355      	muls	r5, r2
 8008ad8:	460e      	mov	r6, r1
 8008ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ade:	f7ff fa65 	bl	8007fac <_malloc_r>
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	b140      	cbz	r0, 8008af8 <__sfmoreglue+0x28>
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8008aec:	300c      	adds	r0, #12
 8008aee:	60a0      	str	r0, [r4, #8]
 8008af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af4:	f7fd fb2e 	bl	8006154 <memset>
 8008af8:	4620      	mov	r0, r4
 8008afa:	bd70      	pop	{r4, r5, r6, pc}

08008afc <__sfp_lock_acquire>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__sfp_lock_acquire+0x8>)
 8008afe:	f000 b8b3 	b.w	8008c68 <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	200004f9 	.word	0x200004f9

08008b08 <__sfp_lock_release>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__sfp_lock_release+0x8>)
 8008b0a:	f000 b8ae 	b.w	8008c6a <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	200004f9 	.word	0x200004f9

08008b14 <__sinit_lock_acquire>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__sinit_lock_acquire+0x8>)
 8008b16:	f000 b8a7 	b.w	8008c68 <__retarget_lock_acquire_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	200004fa 	.word	0x200004fa

08008b20 <__sinit_lock_release>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__sinit_lock_release+0x8>)
 8008b22:	f000 b8a2 	b.w	8008c6a <__retarget_lock_release_recursive>
 8008b26:	bf00      	nop
 8008b28:	200004fa 	.word	0x200004fa

08008b2c <__sinit>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	4604      	mov	r4, r0
 8008b30:	f7ff fff0 	bl	8008b14 <__sinit_lock_acquire>
 8008b34:	69a3      	ldr	r3, [r4, #24]
 8008b36:	b11b      	cbz	r3, 8008b40 <__sinit+0x14>
 8008b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3c:	f7ff bff0 	b.w	8008b20 <__sinit_lock_release>
 8008b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b44:	6523      	str	r3, [r4, #80]	; 0x50
 8008b46:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <__sinit+0x68>)
 8008b48:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <__sinit+0x6c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	bf04      	itt	eq
 8008b52:	2301      	moveq	r3, #1
 8008b54:	61a3      	streq	r3, [r4, #24]
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 f820 	bl	8008b9c <__sfp>
 8008b5c:	6060      	str	r0, [r4, #4]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f81c 	bl	8008b9c <__sfp>
 8008b64:	60a0      	str	r0, [r4, #8]
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f818 	bl	8008b9c <__sfp>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	60e0      	str	r0, [r4, #12]
 8008b70:	2104      	movs	r1, #4
 8008b72:	6860      	ldr	r0, [r4, #4]
 8008b74:	f7ff ff82 	bl	8008a7c <std>
 8008b78:	68a0      	ldr	r0, [r4, #8]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	2109      	movs	r1, #9
 8008b7e:	f7ff ff7d 	bl	8008a7c <std>
 8008b82:	68e0      	ldr	r0, [r4, #12]
 8008b84:	2202      	movs	r2, #2
 8008b86:	2112      	movs	r1, #18
 8008b88:	f7ff ff78 	bl	8008a7c <std>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	61a3      	str	r3, [r4, #24]
 8008b90:	e7d2      	b.n	8008b38 <__sinit+0xc>
 8008b92:	bf00      	nop
 8008b94:	08008ff8 	.word	0x08008ff8
 8008b98:	08008ac5 	.word	0x08008ac5

08008b9c <__sfp>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	f7ff ffac 	bl	8008afc <__sfp_lock_acquire>
 8008ba4:	4b1e      	ldr	r3, [pc, #120]	; (8008c20 <__sfp+0x84>)
 8008ba6:	681e      	ldr	r6, [r3, #0]
 8008ba8:	69b3      	ldr	r3, [r6, #24]
 8008baa:	b913      	cbnz	r3, 8008bb2 <__sfp+0x16>
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ffbd 	bl	8008b2c <__sinit>
 8008bb2:	3648      	adds	r6, #72	; 0x48
 8008bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	d503      	bpl.n	8008bc4 <__sfp+0x28>
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	b30b      	cbz	r3, 8008c04 <__sfp+0x68>
 8008bc0:	6836      	ldr	r6, [r6, #0]
 8008bc2:	e7f7      	b.n	8008bb4 <__sfp+0x18>
 8008bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bc8:	b9d5      	cbnz	r5, 8008c00 <__sfp+0x64>
 8008bca:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <__sfp+0x88>)
 8008bcc:	60e3      	str	r3, [r4, #12]
 8008bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8008bd4:	f000 f847 	bl	8008c66 <__retarget_lock_init_recursive>
 8008bd8:	f7ff ff96 	bl	8008b08 <__sfp_lock_release>
 8008bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008be4:	6025      	str	r5, [r4, #0]
 8008be6:	61a5      	str	r5, [r4, #24]
 8008be8:	2208      	movs	r2, #8
 8008bea:	4629      	mov	r1, r5
 8008bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bf0:	f7fd fab0 	bl	8006154 <memset>
 8008bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c00:	3468      	adds	r4, #104	; 0x68
 8008c02:	e7d9      	b.n	8008bb8 <__sfp+0x1c>
 8008c04:	2104      	movs	r1, #4
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7ff ff62 	bl	8008ad0 <__sfmoreglue>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	6030      	str	r0, [r6, #0]
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1d5      	bne.n	8008bc0 <__sfp+0x24>
 8008c14:	f7ff ff78 	bl	8008b08 <__sfp_lock_release>
 8008c18:	230c      	movs	r3, #12
 8008c1a:	603b      	str	r3, [r7, #0]
 8008c1c:	e7ee      	b.n	8008bfc <__sfp+0x60>
 8008c1e:	bf00      	nop
 8008c20:	08008ff8 	.word	0x08008ff8
 8008c24:	ffff0001 	.word	0xffff0001

08008c28 <_fwalk_reent>:
 8008c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	4688      	mov	r8, r1
 8008c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c34:	2700      	movs	r7, #0
 8008c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c3e:	d505      	bpl.n	8008c4c <_fwalk_reent+0x24>
 8008c40:	6824      	ldr	r4, [r4, #0]
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	d1f7      	bne.n	8008c36 <_fwalk_reent+0xe>
 8008c46:	4638      	mov	r0, r7
 8008c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4c:	89ab      	ldrh	r3, [r5, #12]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d907      	bls.n	8008c62 <_fwalk_reent+0x3a>
 8008c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c56:	3301      	adds	r3, #1
 8008c58:	d003      	beq.n	8008c62 <_fwalk_reent+0x3a>
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	47c0      	blx	r8
 8008c60:	4307      	orrs	r7, r0
 8008c62:	3568      	adds	r5, #104	; 0x68
 8008c64:	e7e9      	b.n	8008c3a <_fwalk_reent+0x12>

08008c66 <__retarget_lock_init_recursive>:
 8008c66:	4770      	bx	lr

08008c68 <__retarget_lock_acquire_recursive>:
 8008c68:	4770      	bx	lr

08008c6a <__retarget_lock_release_recursive>:
 8008c6a:	4770      	bx	lr

08008c6c <__swhatbuf_r>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	460e      	mov	r6, r1
 8008c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c74:	2900      	cmp	r1, #0
 8008c76:	b096      	sub	sp, #88	; 0x58
 8008c78:	4614      	mov	r4, r2
 8008c7a:	461d      	mov	r5, r3
 8008c7c:	da08      	bge.n	8008c90 <__swhatbuf_r+0x24>
 8008c7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	602a      	str	r2, [r5, #0]
 8008c86:	061a      	lsls	r2, r3, #24
 8008c88:	d410      	bmi.n	8008cac <__swhatbuf_r+0x40>
 8008c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c8e:	e00e      	b.n	8008cae <__swhatbuf_r+0x42>
 8008c90:	466a      	mov	r2, sp
 8008c92:	f000 f903 	bl	8008e9c <_fstat_r>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	dbf1      	blt.n	8008c7e <__swhatbuf_r+0x12>
 8008c9a:	9a01      	ldr	r2, [sp, #4]
 8008c9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ca4:	425a      	negs	r2, r3
 8008ca6:	415a      	adcs	r2, r3
 8008ca8:	602a      	str	r2, [r5, #0]
 8008caa:	e7ee      	b.n	8008c8a <__swhatbuf_r+0x1e>
 8008cac:	2340      	movs	r3, #64	; 0x40
 8008cae:	2000      	movs	r0, #0
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	b016      	add	sp, #88	; 0x58
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cb8 <__smakebuf_r>:
 8008cb8:	898b      	ldrh	r3, [r1, #12]
 8008cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cbc:	079d      	lsls	r5, r3, #30
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	d507      	bpl.n	8008cd4 <__smakebuf_r+0x1c>
 8008cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	2301      	movs	r3, #1
 8008cce:	6163      	str	r3, [r4, #20]
 8008cd0:	b002      	add	sp, #8
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	ab01      	add	r3, sp, #4
 8008cd6:	466a      	mov	r2, sp
 8008cd8:	f7ff ffc8 	bl	8008c6c <__swhatbuf_r>
 8008cdc:	9900      	ldr	r1, [sp, #0]
 8008cde:	4605      	mov	r5, r0
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff f963 	bl	8007fac <_malloc_r>
 8008ce6:	b948      	cbnz	r0, 8008cfc <__smakebuf_r+0x44>
 8008ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d4ef      	bmi.n	8008cd0 <__smakebuf_r+0x18>
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	f043 0302 	orr.w	r3, r3, #2
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	e7e3      	b.n	8008cc4 <__smakebuf_r+0xc>
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <__smakebuf_r+0x7c>)
 8008cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	9b00      	ldr	r3, [sp, #0]
 8008d0c:	6163      	str	r3, [r4, #20]
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	6120      	str	r0, [r4, #16]
 8008d12:	b15b      	cbz	r3, 8008d2c <__smakebuf_r+0x74>
 8008d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f000 f8d1 	bl	8008ec0 <_isatty_r>
 8008d1e:	b128      	cbz	r0, 8008d2c <__smakebuf_r+0x74>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	89a0      	ldrh	r0, [r4, #12]
 8008d2e:	4305      	orrs	r5, r0
 8008d30:	81a5      	strh	r5, [r4, #12]
 8008d32:	e7cd      	b.n	8008cd0 <__smakebuf_r+0x18>
 8008d34:	08008ac5 	.word	0x08008ac5

08008d38 <_malloc_usable_size_r>:
 8008d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3c:	1f18      	subs	r0, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bfbc      	itt	lt
 8008d42:	580b      	ldrlt	r3, [r1, r0]
 8008d44:	18c0      	addlt	r0, r0, r3
 8008d46:	4770      	bx	lr

08008d48 <_raise_r>:
 8008d48:	291f      	cmp	r1, #31
 8008d4a:	b538      	push	{r3, r4, r5, lr}
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	460d      	mov	r5, r1
 8008d50:	d904      	bls.n	8008d5c <_raise_r+0x14>
 8008d52:	2316      	movs	r3, #22
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d5e:	b112      	cbz	r2, 8008d66 <_raise_r+0x1e>
 8008d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d64:	b94b      	cbnz	r3, 8008d7a <_raise_r+0x32>
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 f830 	bl	8008dcc <_getpid_r>
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	4601      	mov	r1, r0
 8008d70:	4620      	mov	r0, r4
 8008d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d76:	f000 b817 	b.w	8008da8 <_kill_r>
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d00a      	beq.n	8008d94 <_raise_r+0x4c>
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	d103      	bne.n	8008d8a <_raise_r+0x42>
 8008d82:	2316      	movs	r3, #22
 8008d84:	6003      	str	r3, [r0, #0]
 8008d86:	2001      	movs	r0, #1
 8008d88:	e7e7      	b.n	8008d5a <_raise_r+0x12>
 8008d8a:	2400      	movs	r4, #0
 8008d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d90:	4628      	mov	r0, r5
 8008d92:	4798      	blx	r3
 8008d94:	2000      	movs	r0, #0
 8008d96:	e7e0      	b.n	8008d5a <_raise_r+0x12>

08008d98 <raise>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <raise+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f7ff bfd3 	b.w	8008d48 <_raise_r>
 8008da2:	bf00      	nop
 8008da4:	20000088 	.word	0x20000088

08008da8 <_kill_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	; (8008dc8 <_kill_r+0x20>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	f7f8 ff65 	bl	8001c84 <_kill>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d102      	bne.n	8008dc4 <_kill_r+0x1c>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	b103      	cbz	r3, 8008dc4 <_kill_r+0x1c>
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200004f4 	.word	0x200004f4

08008dcc <_getpid_r>:
 8008dcc:	f7f8 bf52 	b.w	8001c74 <_getpid>

08008dd0 <__sread>:
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd8:	f000 f894 	bl	8008f04 <_read_r>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	bfab      	itete	ge
 8008de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008de2:	89a3      	ldrhlt	r3, [r4, #12]
 8008de4:	181b      	addge	r3, r3, r0
 8008de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dea:	bfac      	ite	ge
 8008dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dee:	81a3      	strhlt	r3, [r4, #12]
 8008df0:	bd10      	pop	{r4, pc}

08008df2 <__swrite>:
 8008df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df6:	461f      	mov	r7, r3
 8008df8:	898b      	ldrh	r3, [r1, #12]
 8008dfa:	05db      	lsls	r3, r3, #23
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	4616      	mov	r6, r2
 8008e02:	d505      	bpl.n	8008e10 <__swrite+0x1e>
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	2302      	movs	r3, #2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f000 f868 	bl	8008ee0 <_lseek_r>
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	463b      	mov	r3, r7
 8008e20:	4628      	mov	r0, r5
 8008e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e26:	f000 b817 	b.w	8008e58 <_write_r>

08008e2a <__sseek>:
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e32:	f000 f855 	bl	8008ee0 <_lseek_r>
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	bf15      	itete	ne
 8008e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e46:	81a3      	strheq	r3, [r4, #12]
 8008e48:	bf18      	it	ne
 8008e4a:	81a3      	strhne	r3, [r4, #12]
 8008e4c:	bd10      	pop	{r4, pc}

08008e4e <__sclose>:
 8008e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e52:	f000 b813 	b.w	8008e7c <_close_r>
	...

08008e58 <_write_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d07      	ldr	r5, [pc, #28]	; (8008e78 <_write_r+0x20>)
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	602a      	str	r2, [r5, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f7f8 ff43 	bl	8001cf2 <_write>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	d102      	bne.n	8008e76 <_write_r+0x1e>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	b103      	cbz	r3, 8008e76 <_write_r+0x1e>
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	200004f4 	.word	0x200004f4

08008e7c <_close_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d06      	ldr	r5, [pc, #24]	; (8008e98 <_close_r+0x1c>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	f7f8 ff4f 	bl	8001d2a <_close>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_close_r+0x1a>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_close_r+0x1a>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	200004f4 	.word	0x200004f4

08008e9c <_fstat_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	; (8008ebc <_fstat_r+0x20>)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f7f8 ff4a 	bl	8001d42 <_fstat>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d102      	bne.n	8008eb8 <_fstat_r+0x1c>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	b103      	cbz	r3, 8008eb8 <_fstat_r+0x1c>
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
 8008eba:	bf00      	nop
 8008ebc:	200004f4 	.word	0x200004f4

08008ec0 <_isatty_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	; (8008edc <_isatty_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f8 ff49 	bl	8001d62 <_isatty>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_isatty_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_isatty_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	200004f4 	.word	0x200004f4

08008ee0 <_lseek_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	; (8008f00 <_lseek_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7f8 ff42 	bl	8001d78 <_lseek>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_lseek_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_lseek_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	200004f4 	.word	0x200004f4

08008f04 <_read_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d07      	ldr	r5, [pc, #28]	; (8008f24 <_read_r+0x20>)
 8008f08:	4604      	mov	r4, r0
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	602a      	str	r2, [r5, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f7f8 fed0 	bl	8001cb8 <_read>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_read_r+0x1e>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_read_r+0x1e>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	200004f4 	.word	0x200004f4

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr
