
Fotoresistenza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005384  08005384  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800538c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  080053fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080053fc  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209c  00000000  00000000  00031376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00033418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00034190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fc5  00000000  00000000  00034e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe5d  00000000  00000000  0005be05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003d2  00000000  00000000  0006bc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  0016c084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005290 	.word	0x08005290

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005290 	.word	0x08005290

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b09a      	sub	sp, #104	; 0x68
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t AD_RES = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t lampeggio = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint8_t MSG1[] = "Warning!: Undervoltage\r\n";
 80005e6:	4b5c      	ldr	r3, [pc, #368]	; (8000758 <main+0x184>)
 80005e8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	c403      	stmia	r4!, {r0, r1}
 80005f8:	7022      	strb	r2, [r4, #0]
	uint8_t MSG2[] = "Warning!: Overvoltage\r\n";
 80005fa:	4b58      	ldr	r3, [pc, #352]	; (800075c <main+0x188>)
 80005fc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0003 	ldmia.w	r5, {r0, r1}
 800060a:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t MSG3[] = "Voltage:\r\n";
 800060e:	4a54      	ldr	r2, [pc, #336]	; (8000760 <main+0x18c>)
 8000610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000614:	ca07      	ldmia	r2, {r0, r1, r2}
 8000616:	c303      	stmia	r3!, {r0, r1}
 8000618:	801a      	strh	r2, [r3, #0]
 800061a:	3302      	adds	r3, #2
 800061c:	0c12      	lsrs	r2, r2, #16
 800061e:	701a      	strb	r2, [r3, #0]
	uint8_t MSG4[] = "Button State: Pressed\r\n";
 8000620:	4b50      	ldr	r3, [pc, #320]	; (8000764 <main+0x190>)
 8000622:	f107 040c 	add.w	r4, r7, #12
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000630:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fbab 	bl	8000d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f89e 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f9aa 	bl	8000994 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000640:	f000 f95e 	bl	8000900 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000644:	f000 f8e4 	bl	8000810 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000648:	4847      	ldr	r0, [pc, #284]	; (8000768 <main+0x194>)
 800064a:	f001 f803 	bl	8001654 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 800064e:	2101      	movs	r1, #1
 8000650:	4845      	ldr	r0, [pc, #276]	; (8000768 <main+0x194>)
 8000652:	f001 f8e3 	bl	800181c <HAL_ADC_PollForConversion>
  if(HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13))
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4844      	ldr	r0, [pc, #272]	; (800076c <main+0x198>)
 800065c:	f002 fa54 	bl	8002b08 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <main+0xa0>
 	      {
 	        HAL_UART_Transmit(&hlpuart1, MSG4, sizeof(MSG4), 100);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2218      	movs	r2, #24
 800066e:	4840      	ldr	r0, [pc, #256]	; (8000770 <main+0x19c>)
 8000670:	f003 fb24 	bl	8003cbc <HAL_UART_Transmit>

	  /* Infinite loop */

	    /* USER CODE END WHILE */
	   /* USER CODE BEGIN 3 */
	      HAL_ADC_Start(&hadc1);
 8000674:	483c      	ldr	r0, [pc, #240]	; (8000768 <main+0x194>)
 8000676:	f000 ffed 	bl	8001654 <HAL_ADC_Start>
	     // Poll ADC1 Perihperal & TimeOut = 200mSec
	      HAL_ADC_PollForConversion(&hadc1, 200);
 800067a:	21c8      	movs	r1, #200	; 0xc8
 800067c:	483a      	ldr	r0, [pc, #232]	; (8000768 <main+0x194>)
 800067e:	f001 f8cd 	bl	800181c <HAL_ADC_PollForConversion>
	     // Read The ADC Conversion Result & Map It To PWM DutyCycle
	      AD_RES = HAL_ADC_GetValue(&hadc1);
 8000682:	4839      	ldr	r0, [pc, #228]	; (8000768 <main+0x194>)
 8000684:	f001 f9d0 	bl	8001a28 <HAL_ADC_GetValue>
 8000688:	4603      	mov	r3, r0
 800068a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	      //lampeggio = (AD_RES<<2)


	      if(HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13))
 800068e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000692:	4836      	ldr	r0, [pc, #216]	; (800076c <main+0x198>)
 8000694:	f002 fa38 	bl	8002b08 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d007      	beq.n	80006ae <main+0xda>
	     	      {
	     	        HAL_UART_Transmit(&hlpuart1, MSG4, sizeof(MSG4), 100);
 800069e:	f107 010c 	add.w	r1, r7, #12
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	2218      	movs	r2, #24
 80006a6:	4832      	ldr	r0, [pc, #200]	; (8000770 <main+0x19c>)
 80006a8:	f003 fb08 	bl	8003cbc <HAL_UART_Transmit>
 80006ac:	e02e      	b.n	800070c <main+0x138>

	     	      }
	      else if(AD_RES<2234){
 80006ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80006b2:	f640 02b9 	movw	r2, #2233	; 0x8b9
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d811      	bhi.n	80006de <main+0x10a>
		      // LED RED ON
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2110      	movs	r1, #16
 80006be:	482b      	ldr	r0, [pc, #172]	; (800076c <main+0x198>)
 80006c0:	f002 fa3a 	bl	8002b38 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	4828      	ldr	r0, [pc, #160]	; (800076c <main+0x198>)
 80006ca:	f002 fa35 	bl	8002b38 <HAL_GPIO_WritePin>
	    	  HAL_UART_Transmit(&hlpuart1, MSG1, sizeof(MSG1), 100);
 80006ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	2219      	movs	r2, #25
 80006d6:	4826      	ldr	r0, [pc, #152]	; (8000770 <main+0x19c>)
 80006d8:	f003 faf0 	bl	8003cbc <HAL_UART_Transmit>
 80006dc:	e016      	b.n	800070c <main+0x138>
	      }
	      else if(AD_RES>3351){
 80006de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80006e2:	f640 5217 	movw	r2, #3351	; 0xd17
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d910      	bls.n	800070c <main+0x138>
		      // LED GREEn ON
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2110      	movs	r1, #16
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <main+0x198>)
 80006f0:	f002 fa22 	bl	8002b38 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2120      	movs	r1, #32
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <main+0x198>)
 80006fa:	f002 fa1d 	bl	8002b38 <HAL_GPIO_WritePin>
	    	  HAL_UART_Transmit(&hlpuart1, MSG2, sizeof(MSG2), 100);
 80006fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2218      	movs	r2, #24
 8000706:	481a      	ldr	r0, [pc, #104]	; (8000770 <main+0x19c>)
 8000708:	f003 fad8 	bl	8003cbc <HAL_UART_Transmit>
	      }
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2110      	movs	r1, #16
 8000710:	4816      	ldr	r0, [pc, #88]	; (800076c <main+0x198>)
 8000712:	f002 fa11 	bl	8002b38 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4814      	ldr	r0, [pc, #80]	; (800076c <main+0x198>)
 800071c:	f002 fa0c 	bl	8002b38 <HAL_GPIO_WritePin>
	    	  sprintf(msg, "%hu\r\n", AD_RES);
 8000720:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000724:	463b      	mov	r3, r7
 8000726:	4913      	ldr	r1, [pc, #76]	; (8000774 <main+0x1a0>)
 8000728:	4618      	mov	r0, r3
 800072a:	f004 f943 	bl	80049b4 <siprintf>
	    	  HAL_UART_Transmit(&hlpuart1, MSG3, sizeof(MSG3), 1000);
 800072e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	220b      	movs	r2, #11
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <main+0x19c>)
 800073a:	f003 fabf 	bl	8003cbc <HAL_UART_Transmit>
	    	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), 1000);
 800073e:	463b      	mov	r3, r7
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd6d 	bl	8000220 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	4639      	mov	r1, r7
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <main+0x19c>)
 8000752:	f003 fab3 	bl	8003cbc <HAL_UART_Transmit>
	      HAL_ADC_Start(&hadc1);
 8000756:	e78d      	b.n	8000674 <main+0xa0>
 8000758:	080052b0 	.word	0x080052b0
 800075c:	080052cc 	.word	0x080052cc
 8000760:	080052e4 	.word	0x080052e4
 8000764:	080052f0 	.word	0x080052f0
 8000768:	2000008c 	.word	0x2000008c
 800076c:	48000800 	.word	0x48000800
 8000770:	200000f8 	.word	0x200000f8
 8000774:	080052a8 	.word	0x080052a8

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2238      	movs	r2, #56	; 0x38
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f90c 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800079a:	2000      	movs	r0, #0
 800079c:	f002 fa08 	bl	8002bb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007ba:	2355      	movs	r3, #85	; 0x55
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 faa2 	bl	8002d18 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007da:	f000 f95f 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2104      	movs	r1, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fda6 	bl	8003348 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000802:	f000 f94b 	bl	8000a9c <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f004 f8bb 	bl	80049a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000830:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000834:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000838:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000858:	2204      	movs	r2, #4
 800085a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800086a:	2201      	movs	r2, #1
 800086c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000898:	4817      	ldr	r0, [pc, #92]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800089a:	f000 fd19 	bl	80012d0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 f8fa 	bl	8000a9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_ADC1_Init+0xe8>)
 80008b4:	f001 fd8e 	bl	80023d4 <HAL_ADCEx_MultiModeConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008be:	f000 f8ed 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_ADC1_Init+0xec>)
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	237f      	movs	r3, #127	; 0x7f
 80008d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_ADC1_Init+0xe8>)
 80008e0:	f001 f8b0 	bl	8001a44 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ea:	f000 f8d7 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	08600004 	.word	0x08600004

08000900 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000944:	f003 f96a 	bl	8003c1c <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f8a5 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000956:	f003 ff31 	bl	80047bc <HAL_UARTEx_SetTxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000960:	f000 f89c 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000968:	f003 ff66 	bl	8004838 <HAL_UARTEx_SetRxFifoThreshold>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000972:	f000 f893 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000978:	f003 fee7 	bl	800474a <HAL_UARTEx_DisableFifoMode>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000982:	f000 f88b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000f8 	.word	0x200000f8
 8000990:	40008000 	.word	0x40008000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009c8:	f043 0320 	orr.w	r3, r3, #32
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0320 	and.w	r3, r3, #32
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <MX_GPIO_Init+0x100>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0x100>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f002 f890 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2130      	movs	r1, #48	; 0x30
 8000a1c:	481e      	ldr	r0, [pc, #120]	; (8000a98 <MX_GPIO_Init+0x104>)
 8000a1e:	f002 f88b 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4817      	ldr	r0, [pc, #92]	; (8000a98 <MX_GPIO_Init+0x104>)
 8000a3a:	f001 fee3 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000a3e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 fed3 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a5e:	2330      	movs	r3, #48	; 0x30
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_GPIO_Init+0x104>)
 8000a76:	f001 fec5 	bl	8002804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	; 0x28
 8000a80:	f001 fe8b 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f001 fea2 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ade:	f002 f90b 	bl	8002cf8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09e      	sub	sp, #120	; 0x78
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2254      	movs	r2, #84	; 0x54
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 ff47 	bl	80049a4 <memset>
  if(hadc->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b1e:	d134      	bne.n	8000b8a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b2a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 fe25 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b3c:	f7ff ffae 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_ADC_MspInit+0xa4>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <HAL_ADC_MspInit+0xa4>)
 8000b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_ADC_MspInit+0xa4>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_ADC_MspInit+0xa4>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_ADC_MspInit+0xa4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_ADC_MspInit+0xa4>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b70:	2302      	movs	r3, #2
 8000b72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f001 fe3d 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3778      	adds	r7, #120	; 0x78
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09e      	sub	sp, #120	; 0x78
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2254      	movs	r2, #84	; 0x54
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 fef3 	bl	80049a4 <memset>
  if(huart->Instance==LPUART1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_UART_MspInit+0xa8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d136      	bne.n	8000c36 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bc8:	2320      	movs	r3, #32
 8000bca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fdd3 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be0:	f7ff ff5c 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c14:	230c      	movs	r3, #12
 8000c16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c24:	230c      	movs	r3, #12
 8000c26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f001 fde7 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3778      	adds	r7, #120	; 0x78
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40008000 	.word	0x40008000
 8000c44:	40021000 	.word	0x40021000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8ce 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ca4:	f001 ff60 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f003 fe38 	bl	8004950 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	20000188 	.word	0x20000188
 8000d14:	200001a0 	.word	0x200001a0

08000d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f003 fdf7 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fc31 	bl	80005d4 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   r0, =_estack
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d80:	0800538c 	.word	0x0800538c
  ldr r2, =_sbss
 8000d84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d88:	200001a0 	.word	0x200001a0

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>

08000d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f001 fcf3 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f80e 	bl	8000dc0 <HAL_InitTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	e001      	b.n	8000db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db0:	f7ff fe7a 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db4:	79fb      	ldrb	r3, [r7, #7]

}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_InitTick+0x68>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d022      	beq.n	8000e1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_InitTick+0x68>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fcfe 	bl	80027ea <HAL_SYSTICK_Config>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10f      	bne.n	8000e14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	d809      	bhi.n	8000e0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e02:	f001 fcca 	bl	800279a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_InitTick+0x70>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e007      	b.n	8000e1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e004      	b.n	8000e1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e001      	b.n	8000e1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e44:	6013      	str	r3, [r2, #0]
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	2000018c 	.word	0x2000018c
 8000e54:	20000008 	.word	0x20000008

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000018c 	.word	0x2000018c

08000e70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	609a      	str	r2, [r3, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3360      	adds	r3, #96	; 0x60
 8000eea:	461a      	mov	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <LL_ADC_SetOffset+0x44>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	4313      	orrs	r3, r2
 8000f08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	03fff000 	.word	0x03fff000

08000f20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3360      	adds	r3, #96	; 0x60
 8000f2e:	461a      	mov	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3360      	adds	r3, #96	; 0x60
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b087      	sub	sp, #28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3360      	adds	r3, #96	; 0x60
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3360      	adds	r3, #96	; 0x60
 8000fc8:	461a      	mov	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	615a      	str	r2, [r3, #20]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800103a:	b480      	push	{r7}
 800103c:	b087      	sub	sp, #28
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3330      	adds	r3, #48	; 0x30
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	4413      	add	r3, r2
 8001058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	211f      	movs	r1, #31
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	0e9b      	lsrs	r3, r3, #26
 8001072:	f003 011f 	and.w	r1, r3, #31
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001092:	b480      	push	{r7}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3314      	adds	r3, #20
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	0e5b      	lsrs	r3, r3, #25
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	0d1b      	lsrs	r3, r3, #20
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2107      	movs	r1, #7
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	0d1b      	lsrs	r3, r3, #20
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d10a      	bne.n	8001112 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001108:	431a      	orrs	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001110:	e00a      	b.n	8001128 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	407f0000 	.word	0x407f0000

08001138 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 031f 	and.w	r3, r3, #31
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6093      	str	r3, [r2, #8]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011a8:	d101      	bne.n	80011ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011f8:	d101      	bne.n	80011fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <LL_ADC_IsEnabled+0x18>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <LL_ADC_IsEnabled+0x1a>
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800126a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126e:	f043 0204 	orr.w	r2, r3, #4
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b04      	cmp	r3, #4
 8001294:	d101      	bne.n	800129a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d101      	bne.n	80012c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1af      	b.n	800164a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fbf9 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff3f 	bl	8001194 <LL_ADC_IsDeepPowerDownEnabled>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff25 	bl	8001170 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff5a 	bl	80011e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d115      	bne.n	8001362 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff3e 	bl	80011bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001340:	4b9f      	ldr	r3, [pc, #636]	; (80015c0 <HAL_ADC_Init+0x2f0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	099b      	lsrs	r3, r3, #6
 8001346:	4a9f      	ldr	r2, [pc, #636]	; (80015c4 <HAL_ADC_Init+0x2f4>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	099b      	lsrs	r3, r3, #6
 800134e:	3301      	adds	r3, #1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001354:	e002      	b.n	800135c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff3c 	bl	80011e4 <LL_ADC_IsInternalRegulatorEnabled>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	f043 0210 	orr.w	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff75 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001398:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8148 	bne.w	8001638 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 8144 	bne.w	8001638 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013b8:	f043 0202 	orr.w	r2, r3, #2
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff35 	bl	8001234 <LL_ADC_IsEnabled>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d141      	bne.n	8001454 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_Init+0x114>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <HAL_ADC_Init+0x2f8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10f      	bne.n	8001404 <HAL_ADC_Init+0x134>
 80013e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013e8:	f7ff ff24 	bl	8001234 <LL_ADC_IsEnabled>
 80013ec:	4604      	mov	r4, r0
 80013ee:	4876      	ldr	r0, [pc, #472]	; (80015c8 <HAL_ADC_Init+0x2f8>)
 80013f0:	f7ff ff20 	bl	8001234 <LL_ADC_IsEnabled>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4323      	orrs	r3, r4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	e012      	b.n	800142a <HAL_ADC_Init+0x15a>
 8001404:	4871      	ldr	r0, [pc, #452]	; (80015cc <HAL_ADC_Init+0x2fc>)
 8001406:	f7ff ff15 	bl	8001234 <LL_ADC_IsEnabled>
 800140a:	4604      	mov	r4, r0
 800140c:	4870      	ldr	r0, [pc, #448]	; (80015d0 <HAL_ADC_Init+0x300>)
 800140e:	f7ff ff11 	bl	8001234 <LL_ADC_IsEnabled>
 8001412:	4603      	mov	r3, r0
 8001414:	431c      	orrs	r4, r3
 8001416:	486f      	ldr	r0, [pc, #444]	; (80015d4 <HAL_ADC_Init+0x304>)
 8001418:	f7ff ff0c 	bl	8001234 <LL_ADC_IsEnabled>
 800141c:	4603      	mov	r3, r0
 800141e:	4323      	orrs	r3, r4
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001436:	d004      	beq.n	8001442 <HAL_ADC_Init+0x172>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a62      	ldr	r2, [pc, #392]	; (80015c8 <HAL_ADC_Init+0x2f8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0x176>
 8001442:	4a65      	ldr	r2, [pc, #404]	; (80015d8 <HAL_ADC_Init+0x308>)
 8001444:	e000      	b.n	8001448 <HAL_ADC_Init+0x178>
 8001446:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_ADC_Init+0x30c>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f7ff fd0e 	bl	8000e70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7f5b      	ldrb	r3, [r3, #29]
 8001458:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001464:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800146a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001472:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147e:	2b01      	cmp	r3, #1
 8001480:	d106      	bne.n	8001490 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	3b01      	subs	r3, #1
 8001488:	045b      	lsls	r3, r3, #17
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_ADC_Init+0x310>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	430b      	orrs	r3, r1
 80014be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fed1 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 80014e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fede 	bl	80012a8 <LL_ADC_INJ_IsConversionOngoing>
 80014ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d17f      	bne.n	80015f4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d17c      	bne.n	80015f4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001506:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001516:	f023 0302 	bic.w	r3, r3, #2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	430b      	orrs	r3, r1
 8001522:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d017      	beq.n	800155c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800153a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001544:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6911      	ldr	r1, [r2, #16]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	430b      	orrs	r3, r1
 8001556:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800155a:	e013      	b.n	8001584 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800156a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800157c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001580:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800158a:	2b01      	cmp	r3, #1
 800158c:	d12a      	bne.n	80015e4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015a4:	4311      	orrs	r1, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015aa:	4311      	orrs	r1, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015b0:	430a      	orrs	r2, r1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0201 	orr.w	r2, r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	e019      	b.n	80015f4 <HAL_ADC_Init+0x324>
 80015c0:	20000000 	.word	0x20000000
 80015c4:	053e2d63 	.word	0x053e2d63
 80015c8:	50000100 	.word	0x50000100
 80015cc:	50000400 	.word	0x50000400
 80015d0:	50000500 	.word	0x50000500
 80015d4:	50000600 	.word	0x50000600
 80015d8:	50000300 	.word	0x50000300
 80015dc:	50000700 	.word	0x50000700
 80015e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10c      	bne.n	8001616 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f023 010f 	bic.w	r1, r3, #15
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
 8001614:	e007      	b.n	8001626 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020f 	bic.w	r2, r2, #15
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	65da      	str	r2, [r3, #92]	; 0x5c
 8001636:	e007      	b.n	8001648 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	f043 0210 	orr.w	r2, r3, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001648:	7ffb      	ldrb	r3, [r7, #31]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop

08001654 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001664:	d004      	beq.n	8001670 <HAL_ADC_Start+0x1c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a67      	ldr	r2, [pc, #412]	; (8001808 <HAL_ADC_Start+0x1b4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_ADC_Start+0x20>
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <HAL_ADC_Start+0x1b8>)
 8001672:	e000      	b.n	8001676 <HAL_ADC_Start+0x22>
 8001674:	4b66      	ldr	r3, [pc, #408]	; (8001810 <HAL_ADC_Start+0x1bc>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd5e 	bl	8001138 <LL_ADC_GetMultimode>
 800167c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fdfd 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 80b4 	bne.w	80017f8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_Start+0x4a>
 800169a:	2302      	movs	r3, #2
 800169c:	e0af      	b.n	80017fe <HAL_ADC_Start+0x1aa>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fe0c 	bl	80022c4 <ADC_Enable>
 80016ac:	4603      	mov	r3, r0
 80016ae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 809b 	bne.w	80017ee <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_ADC_Start+0x1b4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d009      	beq.n	80016ea <HAL_ADC_Start+0x96>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_ADC_Start+0x1c0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <HAL_ADC_Start+0x92>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e003      	b.n	80016ee <HAL_ADC_Start+0x9a>
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_ADC_Start+0x1c4>)
 80016e8:	e001      	b.n	80016ee <HAL_ADC_Start+0x9a>
 80016ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d002      	beq.n	80016fc <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001714:	d106      	bne.n	8001724 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	f023 0206 	bic.w	r2, r3, #6
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	661a      	str	r2, [r3, #96]	; 0x60
 8001722:	e002      	b.n	800172a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	221c      	movs	r2, #28
 8001730:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_ADC_Start+0x1b4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d009      	beq.n	8001758 <HAL_ADC_Start+0x104>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_ADC_Start+0x1c0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d002      	beq.n	8001754 <HAL_ADC_Start+0x100>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	e003      	b.n	800175c <HAL_ADC_Start+0x108>
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_ADC_Start+0x1c4>)
 8001756:	e001      	b.n	800175c <HAL_ADC_Start+0x108>
 8001758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4293      	cmp	r3, r2
 8001762:	d008      	beq.n	8001776 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d002      	beq.n	8001776 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d114      	bne.n	80017a0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fd5e 	bl	800125a <LL_ADC_REG_StartConversion>
 800179e:	e02d      	b.n	80017fc <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a15      	ldr	r2, [pc, #84]	; (8001808 <HAL_ADC_Start+0x1b4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d009      	beq.n	80017ca <HAL_ADC_Start+0x176>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_ADC_Start+0x1c0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d002      	beq.n	80017c6 <HAL_ADC_Start+0x172>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e003      	b.n	80017ce <HAL_ADC_Start+0x17a>
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_ADC_Start+0x1c4>)
 80017c8:	e001      	b.n	80017ce <HAL_ADC_Start+0x17a>
 80017ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00f      	beq.n	80017fc <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ec:	e006      	b.n	80017fc <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80017f6:	e001      	b.n	80017fc <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
 80017fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	50000100 	.word	0x50000100
 800180c:	50000300 	.word	0x50000300
 8001810:	50000700 	.word	0x50000700
 8001814:	50000500 	.word	0x50000500
 8001818:	50000400 	.word	0x50000400

0800181c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182e:	d004      	beq.n	800183a <HAL_ADC_PollForConversion+0x1e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a77      	ldr	r2, [pc, #476]	; (8001a14 <HAL_ADC_PollForConversion+0x1f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_ADC_PollForConversion+0x22>
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_ADC_PollForConversion+0x1fc>)
 800183c:	e000      	b.n	8001840 <HAL_ADC_PollForConversion+0x24>
 800183e:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <HAL_ADC_PollForConversion+0x200>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fc79 	bl	8001138 <LL_ADC_GetMultimode>
 8001846:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d102      	bne.n	8001856 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001850:	2308      	movs	r3, #8
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	e037      	b.n	80018c6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d002      	beq.n	8001868 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b09      	cmp	r3, #9
 8001866:	d111      	bne.n	800188c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0c1      	b.n	8001a0a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001886:	2304      	movs	r3, #4
 8001888:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800188a:	e01c      	b.n	80018c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001894:	d004      	beq.n	80018a0 <HAL_ADC_PollForConversion+0x84>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_ADC_PollForConversion+0x1f8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_PollForConversion+0x88>
 80018a0:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_ADC_PollForConversion+0x1fc>)
 80018a2:	e000      	b.n	80018a6 <HAL_ADC_PollForConversion+0x8a>
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_ADC_PollForConversion+0x200>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc54 	bl	8001154 <LL_ADC_GetMultiDMATransfer>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	f043 0220 	orr.w	r2, r3, #32
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0a3      	b.n	8001a0a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018c2:	2304      	movs	r3, #4
 80018c4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018c6:	f7ff fac7 	bl	8000e58 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018cc:	e021      	b.n	8001912 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d4:	d01d      	beq.n	8001912 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018d6:	f7ff fabf 	bl	8000e58 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <HAL_ADC_PollForConversion+0xd0>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d112      	bne.n	8001912 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10b      	bne.n	8001912 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	f043 0204 	orr.w	r2, r3, #4
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e07b      	b.n	8001a0a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0d6      	beq.n	80018ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fb6f 	bl	8001014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7f5b      	ldrb	r3, [r3, #29]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d118      	bne.n	8001976 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b08      	cmp	r3, #8
 8001950:	d111      	bne.n	8001976 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <HAL_ADC_PollForConversion+0x1f8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_ADC_PollForConversion+0x178>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <HAL_ADC_PollForConversion+0x204>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d002      	beq.n	8001990 <HAL_ADC_PollForConversion+0x174>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	e003      	b.n	8001998 <HAL_ADC_PollForConversion+0x17c>
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_ADC_PollForConversion+0x208>)
 8001992:	e001      	b.n	8001998 <HAL_ADC_PollForConversion+0x17c>
 8001994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4293      	cmp	r3, r2
 800199e:	d008      	beq.n	80019b2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d002      	beq.n	80019b2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b09      	cmp	r3, #9
 80019b0:	d104      	bne.n	80019bc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	e014      	b.n	80019e6 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_ADC_PollForConversion+0x1f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_ADC_PollForConversion+0x1be>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_ADC_PollForConversion+0x204>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d002      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x1ba>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e003      	b.n	80019de <HAL_ADC_PollForConversion+0x1c2>
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_ADC_PollForConversion+0x208>)
 80019d8:	e001      	b.n	80019de <HAL_ADC_PollForConversion+0x1c2>
 80019da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d104      	bne.n	80019f6 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e008      	b.n	8001a08 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	220c      	movs	r2, #12
 8001a06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	50000100 	.word	0x50000100
 8001a18:	50000300 	.word	0x50000300
 8001a1c:	50000700 	.word	0x50000700
 8001a20:	50000500 	.word	0x50000500
 8001a24:	50000400 	.word	0x50000400

08001a28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b6      	sub	sp, #216	; 0xd8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x24>
 8001a62:	2302      	movs	r3, #2
 8001a64:	f000 bc13 	b.w	800228e <HAL_ADC_ConfigChannel+0x84a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc04 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 83f3 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f7ff fad3 	bl	800103a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fbf2 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fbfe 	bl	80012a8 <LL_ADC_INJ_IsConversionOngoing>
 8001aac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 81d9 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 81d4 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001acc:	d10f      	bne.n	8001aee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff fada 	bl	8001092 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fa81 	bl	8000fee <LL_ADC_SetSamplingTimeCommonConfig>
 8001aec:	e00e      	b.n	8001b0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7ff fac9 	bl	8001092 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fa71 	bl	8000fee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	08db      	lsrs	r3, r3, #3
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d022      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6919      	ldr	r1, [r3, #16]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3e:	f7ff f9cb 	bl	8000ed8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7ff fa17 	bl	8000f82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6919      	ldr	r1, [r3, #16]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	7f1b      	ldrb	r3, [r3, #28]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x126>
 8001b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x128>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f7ff fa23 	bl	8000fb8 <LL_ADC_SetOffsetSaturation>
 8001b72:	e17b      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f9d0 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x15c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f9c5 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	f003 021f 	and.w	r2, r3, #31
 8001b9e:	e01e      	b.n	8001bde <HAL_ADC_ConfigChannel+0x19a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f9ba 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e004      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	e018      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1e4>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	e004      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d106      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f989 	bl	8000f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f96d 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x222>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f962 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	e01e      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x260>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f957 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c94:	2320      	movs	r3, #32
 8001c96:	e004      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x278>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	e018      	b.n	8001cee <HAL_ADC_ConfigChannel+0x2aa>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e004      	b.n	8001cee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d106      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f926 	bl	8000f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f90a 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x2e8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f8ff 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	e01e      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x326>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2102      	movs	r1, #2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f8f4 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e004      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d105      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x33e>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	e016      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x36c>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e004      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2200      	movs	r2, #0
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f8c5 	bl	8000f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f8a9 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x3aa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2103      	movs	r1, #3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f89e 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	e017      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x3da>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2103      	movs	r1, #3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f893 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e003      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x3f2>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0e9b      	lsrs	r3, r3, #26
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	e011      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x416>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e003      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d106      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2200      	movs	r2, #0
 8001e64:	2103      	movs	r1, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f870 	bl	8000f4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f9df 	bl	8001234 <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 813d 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff f92c 	bl	80010e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4aa2      	ldr	r2, [pc, #648]	; (8002120 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 812e 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x480>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e019      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x4b4>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e003      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b09      	cmp	r3, #9
 8001ef0:	bf94      	ite	ls
 8001ef2:	2301      	movls	r3, #1
 8001ef4:	2300      	movhi	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d079      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x4d4>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	069b      	lsls	r3, r3, #26
 8001f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f16:	e015      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x500>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	069b      	lsls	r3, r3, #26
 8001f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x520>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	e017      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x550>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x576>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	051b      	lsls	r3, r3, #20
 8001fb8:	e018      	b.n	8001fec <HAL_ADC_ConfigChannel+0x5a8>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	430b      	orrs	r3, r1
 8001fee:	e07e      	b.n	80020ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_ADC_ConfigChannel+0x5c8>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	069b      	lsls	r3, r3, #26
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200a:	e015      	b.n	8002038 <HAL_ADC_ConfigChannel+0x5f4>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e003      	b.n	8002030 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	069b      	lsls	r3, r3, #26
 8002034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x614>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	e017      	b.n	8002088 <HAL_ADC_ConfigChannel+0x644>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	61fb      	str	r3, [r7, #28]
  return result;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	ea42 0103 	orr.w	r1, r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x670>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	051b      	lsls	r3, r3, #20
 80020ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b2:	e01b      	b.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	613b      	str	r3, [r7, #16]
  return result;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 021f 	and.w	r2, r3, #31
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	430b      	orrs	r3, r1
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe ffcd 	bl	8001092 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_ADC_ConfigChannel+0x6e0>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80be 	beq.w	8002282 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210e:	d004      	beq.n	800211a <HAL_ADC_ConfigChannel+0x6d6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_ADC_ConfigChannel+0x6e4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10a      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x6ec>
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_ADC_ConfigChannel+0x6e8>)
 800211c:	e009      	b.n	8002132 <HAL_ADC_ConfigChannel+0x6ee>
 800211e:	bf00      	nop
 8002120:	407f0000 	.word	0x407f0000
 8002124:	80080000 	.word	0x80080000
 8002128:	50000100 	.word	0x50000100
 800212c:	50000300 	.word	0x50000300
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fec2 	bl	8000ebc <LL_ADC_GetCommonPathInternalCh>
 8002138:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_ADC_ConfigChannel+0x858>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x70c>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_ADC_ConfigChannel+0x85c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d13a      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d134      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002164:	d005      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x72e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_ADC_ConfigChannel+0x860>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f040 8085 	bne.w	800227c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217a:	d004      	beq.n	8002186 <HAL_ADC_ConfigChannel+0x742>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a49      	ldr	r2, [pc, #292]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x746>
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_ADC_ConfigChannel+0x868>)
 8002188:	e000      	b.n	800218c <HAL_ADC_ConfigChannel+0x748>
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 800218c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f7fe fe7d 	bl	8000e96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800219c:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_ADC_ConfigChannel+0x86c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	4a44      	ldr	r2, [pc, #272]	; (80022b4 <HAL_ADC_ConfigChannel+0x870>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021b6:	e002      	b.n	80021be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c4:	e05a      	b.n	800227c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <HAL_ADC_ConfigChannel+0x874>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d125      	bne.n	800221c <HAL_ADC_ConfigChannel+0x7d8>
 80021d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11f      	bne.n	800221c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d104      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x7ac>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_ADC_ConfigChannel+0x878>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d047      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d004      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x7c0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x7c4>
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_ADC_ConfigChannel+0x868>)
 8002206:	e000      	b.n	800220a <HAL_ADC_ConfigChannel+0x7c6>
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 800220a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7fe fe3e 	bl	8000e96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800221a:	e031      	b.n	8002280 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_ADC_ConfigChannel+0x87c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12d      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d127      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d022      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002244:	d004      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x80c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x810>
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_ADC_ConfigChannel+0x868>)
 8002252:	e000      	b.n	8002256 <HAL_ADC_ConfigChannel+0x812>
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 8002256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800225a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7fe fe18 	bl	8000e96 <LL_ADC_SetCommonPathInternalCh>
 8002266:	e00c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800227a:	e002      	b.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227c:	bf00      	nop
 800227e:	e000      	b.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002280:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800228a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800228e:	4618      	mov	r0, r3
 8002290:	37d8      	adds	r7, #216	; 0xd8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	50000700 	.word	0x50000700
 800229c:	c3210000 	.word	0xc3210000
 80022a0:	90c00010 	.word	0x90c00010
 80022a4:	50000600 	.word	0x50000600
 80022a8:	50000100 	.word	0x50000100
 80022ac:	50000300 	.word	0x50000300
 80022b0:	20000000 	.word	0x20000000
 80022b4:	053e2d63 	.word	0x053e2d63
 80022b8:	c7520000 	.word	0xc7520000
 80022bc:	50000500 	.word	0x50000500
 80022c0:	cb840000 	.word	0xcb840000

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe ffaf 	bl	8001234 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d14d      	bne.n	8002378 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <ADC_Enable+0xc0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e039      	b.n	800237a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe ff7e 	bl	800120c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002310:	f7fe fda2 	bl	8000e58 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002316:	e028      	b.n	800236a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe ff89 	bl	8001234 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d104      	bne.n	8002332 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe ff6d 	bl	800120c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002332:	f7fe fd91 	bl	8000e58 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d914      	bls.n	800236a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d00d      	beq.n	800236a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d1cf      	bne.n	8002318 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	8000003f 	.word	0x8000003f

08002388 <LL_ADC_IsEnabled>:
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <LL_ADC_IsEnabled+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_IsEnabled+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_REG_IsConversionOngoing>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b0a1      	sub	sp, #132	; 0x84
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e0e7      	b.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023fa:	2300      	movs	r3, #0
 80023fc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023fe:	2300      	movs	r3, #0
 8002400:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240a:	d102      	bne.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	e009      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800241c:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	e001      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0be      	b.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffb1 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 800244c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffab 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80a0 	bne.w	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 809c 	bne.w	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002470:	d004      	beq.n	800247c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800247c:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800247e:	e000      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002482:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d04b      	beq.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800248c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249e:	035b      	lsls	r3, r3, #13
 80024a0:	430b      	orrs	r3, r1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b0:	d004      	beq.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a45      	ldr	r2, [pc, #276]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10f      	bne.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80024bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024c0:	f7ff ff62 	bl	8002388 <LL_ADC_IsEnabled>
 80024c4:	4604      	mov	r4, r0
 80024c6:	4841      	ldr	r0, [pc, #260]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024c8:	f7ff ff5e 	bl	8002388 <LL_ADC_IsEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4323      	orrs	r3, r4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e012      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80024dc:	483c      	ldr	r0, [pc, #240]	; (80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024de:	f7ff ff53 	bl	8002388 <LL_ADC_IsEnabled>
 80024e2:	4604      	mov	r4, r0
 80024e4:	483b      	ldr	r0, [pc, #236]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024e6:	f7ff ff4f 	bl	8002388 <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	431c      	orrs	r4, r3
 80024ee:	483c      	ldr	r0, [pc, #240]	; (80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024f0:	f7ff ff4a 	bl	8002388 <LL_ADC_IsEnabled>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4323      	orrs	r3, r4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d056      	beq.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800250e:	f023 030f 	bic.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	6892      	ldr	r2, [r2, #8]
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002522:	e047      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002538:	d004      	beq.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10f      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002544:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002548:	f7ff ff1e 	bl	8002388 <LL_ADC_IsEnabled>
 800254c:	4604      	mov	r4, r0
 800254e:	481f      	ldr	r0, [pc, #124]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002550:	f7ff ff1a 	bl	8002388 <LL_ADC_IsEnabled>
 8002554:	4603      	mov	r3, r0
 8002556:	4323      	orrs	r3, r4
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e012      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002564:	481a      	ldr	r0, [pc, #104]	; (80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002566:	f7ff ff0f 	bl	8002388 <LL_ADC_IsEnabled>
 800256a:	4604      	mov	r4, r0
 800256c:	4819      	ldr	r0, [pc, #100]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800256e:	f7ff ff0b 	bl	8002388 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	431c      	orrs	r4, r3
 8002576:	481a      	ldr	r0, [pc, #104]	; (80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002578:	f7ff ff06 	bl	8002388 <LL_ADC_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	4323      	orrs	r3, r4
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800258e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002596:	f023 030f 	bic.w	r3, r3, #15
 800259a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800259c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800259e:	e009      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025b2:	e000      	b.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3784      	adds	r7, #132	; 0x84
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	50000100 	.word	0x50000100
 80025d0:	50000400 	.word	0x50000400
 80025d4:	50000500 	.word	0x50000500
 80025d8:	50000300 	.word	0x50000300
 80025dc:	50000700 	.word	0x50000700
 80025e0:	50000600 	.word	0x50000600

080025e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800260c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002616:	4a04      	ldr	r2, [pc, #16]	; (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	60d3      	str	r3, [r2, #12]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <__NVIC_GetPriorityGrouping+0x18>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 0307 	and.w	r3, r3, #7
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db0b      	blt.n	8002672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <__NVIC_EnableIRQ+0x38>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	; (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002764:	f7ff ff8e 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff29 	bl	80025e4 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff40 	bl	800262c <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff90 	bl	80026d8 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5f 	bl	8002684 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff33 	bl	8002648 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa4 	bl	8002740 <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002812:	e15a      	b.n	8002aca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 814c 	beq.w	8002ac4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d005      	beq.n	8002844 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002840:	2b02      	cmp	r3, #2
 8002842:	d130      	bne.n	80028a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800287a:	2201      	movs	r2, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 0201 	and.w	r2, r3, #1
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d017      	beq.n	80028e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d123      	bne.n	8002936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	6939      	ldr	r1, [r7, #16]
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80a6 	beq.w	8002ac4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002978:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_GPIO_Init+0x2e4>)
 800297a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297c:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <HAL_GPIO_Init+0x2e4>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6613      	str	r3, [r2, #96]	; 0x60
 8002984:	4b58      	ldr	r3, [pc, #352]	; (8002ae8 <HAL_GPIO_Init+0x2e4>)
 8002986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002990:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_GPIO_Init+0x2e8>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ba:	d01f      	beq.n	80029fc <HAL_GPIO_Init+0x1f8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_GPIO_Init+0x2ec>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d019      	beq.n	80029f8 <HAL_GPIO_Init+0x1f4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_GPIO_Init+0x2f0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_GPIO_Init+0x1f0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x2f4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_GPIO_Init+0x1ec>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a49      	ldr	r2, [pc, #292]	; (8002afc <HAL_GPIO_Init+0x2f8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x1e8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a48      	ldr	r2, [pc, #288]	; (8002b00 <HAL_GPIO_Init+0x2fc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029e4:	2305      	movs	r3, #5
 80029e6:	e00a      	b.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029e8:	2306      	movs	r3, #6
 80029ea:	e008      	b.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e006      	b.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029f0:	2303      	movs	r3, #3
 80029f2:	e004      	b.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029fc:	2300      	movs	r3, #0
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	f002 0203 	and.w	r2, r2, #3
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	4093      	lsls	r3, r2
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a0e:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_GPIO_Init+0x2e8>)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a1c:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a40:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a6a:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002abe:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f47f ae9d 	bne.w	8002814 <HAL_GPIO_Init+0x10>
  }
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010000 	.word	0x40010000
 8002af0:	48000400 	.word	0x48000400
 8002af4:	48000800 	.word	0x48000800
 8002af8:	48000c00 	.word	0x48000c00
 8002afc:	48001000 	.word	0x48001000
 8002b00:	48001400 	.word	0x48001400
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e001      	b.n	8002b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f806 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d141      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bca:	d131      	bne.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bcc:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd2:	4a46      	ldr	r2, [pc, #280]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bdc:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be4:	4a41      	ldr	r2, [pc, #260]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bec:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2232      	movs	r2, #50	; 0x32
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c02:	e002      	b.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d102      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f2      	bne.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d158      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e057      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c30:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c36:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c40:	e04d      	b.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c48:	d141      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d131      	bne.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c5e:	4a23      	ldr	r2, [pc, #140]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c70:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2232      	movs	r2, #50	; 0x32
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	0c9b      	lsrs	r3, r3, #18
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c8e:	e002      	b.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d102      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f2      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d112      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e011      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ccc:	e007      	b.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd6:	4a05      	ldr	r2, [pc, #20]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	431bde83 	.word	0x431bde83

08002cf8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d06:	6093      	str	r3, [r2, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40007000 	.word	0x40007000

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e306      	b.n	8003338 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d075      	beq.n	8002e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4b97      	ldr	r3, [pc, #604]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d40:	4b94      	ldr	r3, [pc, #592]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3e>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_OscConfig+0x44>
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	4b8d      	ldr	r3, [pc, #564]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05b      	beq.n	8002e20 <HAL_RCC_OscConfig+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d157      	bne.n	8002e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e2e1      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x74>
 8002d7e:	4b85      	ldr	r3, [pc, #532]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a84      	ldr	r2, [pc, #528]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x98>
 8002d96:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b7c      	ldr	r3, [pc, #496]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7b      	ldr	r2, [pc, #492]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a74      	ldr	r2, [pc, #464]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f842 	bl	8000e58 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7fe f83e 	bl	8000e58 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e2a6      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dea:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xc0>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe f82e 	bl	8000e58 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fe f82a 	bl	8000e58 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e292      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0xe8>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d075      	beq.n	8002f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2e:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d102      	bne.n	8002e4e <HAL_RCC_OscConfig+0x136>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_OscConfig+0x13c>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d11f      	bne.n	8002e94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e54:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x154>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e265      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	4946      	ldr	r1, [pc, #280]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e80:	4b45      	ldr	r3, [pc, #276]	; (8002f98 <HAL_RCC_OscConfig+0x280>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd ff9b 	bl	8000dc0 <HAL_InitTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d043      	beq.n	8002f18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e251      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9c:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fd ffd6 	bl	8000e58 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fd ffd2 	bl	8000e58 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e23a      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec2:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	492d      	ldr	r1, [pc, #180]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
 8002ee2:	e01a      	b.n	8002f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fd ffb2 	bl	8000e58 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fd ffae 	bl	8000e58 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e216      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1e0>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d041      	beq.n	8002faa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fd ff8b 	bl	8000e58 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f46:	f7fd ff87 	bl	8000e58 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1ef      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ef      	beq.n	8002f46 <HAL_RCC_OscConfig+0x22e>
 8002f66:	e020      	b.n	8002faa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fd ff6e 	bl	8000e58 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f7e:	e00d      	b.n	8002f9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fd ff6a 	bl	8000e58 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d906      	bls.n	8002f9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1d2      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f9c:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ea      	bne.n	8002f80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80a6 	beq.w	8003104 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fbc:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x2b4>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x2b6>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4a7e      	ldr	r2, [pc, #504]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fde:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <HAL_RCC_OscConfig+0x4bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x4bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x4bc>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fd ff27 	bl	8000e58 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fd ff23 	bl	8000e58 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e18b      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003020:	4b6c      	ldr	r3, [pc, #432]	; (80031d4 <HAL_RCC_OscConfig+0x4bc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d108      	bne.n	8003046 <HAL_RCC_OscConfig+0x32e>
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	4a65      	ldr	r2, [pc, #404]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003044:	e024      	b.n	8003090 <HAL_RCC_OscConfig+0x378>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d110      	bne.n	8003070 <HAL_RCC_OscConfig+0x358>
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305e:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	4a5a      	ldr	r2, [pc, #360]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306e:	e00f      	b.n	8003090 <HAL_RCC_OscConfig+0x378>
 8003070:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fd fede 	bl	8000e58 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fd feda 	bl	8000e58 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e140      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ed      	beq.n	80030a0 <HAL_RCC_OscConfig+0x388>
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fd fec7 	bl	8000e58 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fd fec3 	bl	8000e58 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e129      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ed      	bne.n	80030ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d03c      	beq.n	800318a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fd fe96 	bl	8000e58 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003130:	f7fd fe92 	bl	8000e58 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0fa      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <HAL_RCC_OscConfig+0x418>
 8003150:	e01b      	b.n	800318a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fd fe79 	bl	8000e58 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800316a:	f7fd fe75 	bl	8000e58 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0dd      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 800317e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ef      	bne.n	800316a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80d1 	beq.w	8003336 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b0c      	cmp	r3, #12
 800319e:	f000 808b 	beq.w	80032b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d15e      	bne.n	8003268 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x4b8>)
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd fe4f 	bl	8000e58 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031bc:	e00c      	b.n	80031d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fd fe4b 	bl	8000e58 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d905      	bls.n	80031d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0b3      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d8:	4b59      	ldr	r3, [pc, #356]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ec      	bne.n	80031be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	4b56      	ldr	r3, [pc, #344]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b56      	ldr	r3, [pc, #344]	; (8003344 <HAL_RCC_OscConfig+0x62c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6a11      	ldr	r1, [r2, #32]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f4:	3a01      	subs	r2, #1
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031fe:	0212      	lsls	r2, r2, #8
 8003200:	4311      	orrs	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003206:	0852      	lsrs	r2, r2, #1
 8003208:	3a01      	subs	r2, #1
 800320a:	0552      	lsls	r2, r2, #21
 800320c:	4311      	orrs	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003212:	0852      	lsrs	r2, r2, #1
 8003214:	3a01      	subs	r2, #1
 8003216:	0652      	lsls	r2, r2, #25
 8003218:	4311      	orrs	r1, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800321e:	06d2      	lsls	r2, r2, #27
 8003220:	430a      	orrs	r2, r1
 8003222:	4947      	ldr	r1, [pc, #284]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 8003224:	4313      	orrs	r3, r2
 8003226:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b45      	ldr	r3, [pc, #276]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a44      	ldr	r2, [pc, #272]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003234:	4b42      	ldr	r3, [pc, #264]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a41      	ldr	r2, [pc, #260]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fe0a 	bl	8000e58 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fd fe06 	bl	8000e58 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e06e      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x530>
 8003266:	e066      	b.n	8003336 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a34      	ldr	r2, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003274:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a31      	ldr	r2, [pc, #196]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 8003286:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd fde2 	bl	8000e58 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fd fdde 	bl	8000e58 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e046      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032aa:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x580>
 80032b6:	e03e      	b.n	8003336 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e039      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <HAL_RCC_OscConfig+0x628>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d12c      	bne.n	8003332 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	3b01      	subs	r3, #1
 80032e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d123      	bne.n	8003332 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d11b      	bne.n	8003332 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d113      	bne.n	8003332 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	3b01      	subs	r3, #1
 8003318:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d109      	bne.n	8003332 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	3b01      	subs	r3, #1
 800332c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	019f800c 	.word	0x019f800c

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e11e      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b91      	ldr	r3, [pc, #580]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d910      	bls.n	8003390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b8e      	ldr	r3, [pc, #568]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 020f 	bic.w	r2, r3, #15
 8003376:	498c      	ldr	r1, [pc, #560]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e106      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d073      	beq.n	8003484 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d129      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a4:	4b81      	ldr	r3, [pc, #516]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0f4      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033b4:	f000 f99e 	bl	80036f4 <RCC_GetSysClockFreqFromPLLSource>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4a7c      	ldr	r2, [pc, #496]	; (80035b0 <HAL_RCC_ClockConfig+0x268>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d93f      	bls.n	8003442 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033c2:	4b7a      	ldr	r3, [pc, #488]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d033      	beq.n	8003442 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d12f      	bne.n	8003442 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033e2:	4b72      	ldr	r3, [pc, #456]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ea:	4a70      	ldr	r2, [pc, #448]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e024      	b.n	8003442 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0c6      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0be      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003420:	f000 f8ce 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8003424:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4a61      	ldr	r2, [pc, #388]	; (80035b0 <HAL_RCC_ClockConfig+0x268>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d909      	bls.n	8003442 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003436:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4957      	ldr	r1, [pc, #348]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003454:	f7fd fd00 	bl	8000e58 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fd fcfc 	bl	8000e58 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e095      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034bc:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4936      	ldr	r1, [pc, #216]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
 80034d6:	e008      	b.n	80034ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4a32      	ldr	r2, [pc, #200]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 80034e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d21d      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 020f 	bic.w	r2, r3, #15
 8003500:	4929      	ldr	r1, [pc, #164]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003508:	f7fd fca6 	bl	8000e58 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fd fca2 	bl	8000e58 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e03b      	b.n	800359e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x260>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d1ed      	bne.n	8003510 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4917      	ldr	r1, [pc, #92]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490f      	ldr	r1, [pc, #60]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003572:	f000 f825 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_RCC_ClockConfig+0x264>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490c      	ldr	r1, [pc, #48]	; (80035b4 <HAL_RCC_ClockConfig+0x26c>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x270>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fc12 	bl	8000dc0 <HAL_InitTick>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	04c4b400 	.word	0x04c4b400
 80035b4:	08005308 	.word	0x08005308
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e047      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d102      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e03e      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035ea:	4b23      	ldr	r3, [pc, #140]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d136      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3301      	adds	r3, #1
 800360c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d10c      	bne.n	800362e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	4a16      	ldr	r2, [pc, #88]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361e:	68d2      	ldr	r2, [r2, #12]
 8003620:	0a12      	lsrs	r2, r2, #8
 8003622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]
      break;
 800362c:	e00c      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003638:	68d2      	ldr	r2, [r2, #12]
 800363a:	0a12      	lsrs	r2, r2, #8
 800363c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003640:	fb02 f303 	mul.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
      break;
 8003646:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0e5b      	lsrs	r3, r3, #25
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	e001      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003668:	693b      	ldr	r3, [r7, #16]
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	00f42400 	.word	0x00f42400
 8003680:	016e3600 	.word	0x016e3600

08003684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000000 	.word	0x20000000

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08005318 	.word	0x08005318

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036cc:	f7ff ffda 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0adb      	lsrs	r3, r3, #11
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08005318 	.word	0x08005318

080036f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d10c      	bne.n	8003732 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003722:	68d2      	ldr	r2, [r2, #12]
 8003724:	0a12      	lsrs	r2, r2, #8
 8003726:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	617b      	str	r3, [r7, #20]
    break;
 8003730:	e00c      	b.n	800374c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	0a12      	lsrs	r2, r2, #8
 8003740:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
    break;
 800374a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	0e5b      	lsrs	r3, r3, #25
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	3301      	adds	r3, #1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003766:	687b      	ldr	r3, [r7, #4]
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40021000 	.word	0x40021000
 8003778:	016e3600 	.word	0x016e3600
 800377c:	00f42400 	.word	0x00f42400

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003788:	2300      	movs	r3, #0
 800378a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378c:	2300      	movs	r3, #0
 800378e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8098 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a2:	4b43      	ldr	r3, [pc, #268]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10d      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	4a3f      	ldr	r2, [pc, #252]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ca:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a39      	ldr	r2, [pc, #228]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d6:	f7fd fb3f 	bl	8000e58 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037dc:	e009      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fd fb3b 	bl	8000e58 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d902      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	74fb      	strb	r3, [r7, #19]
        break;
 80037f0:	e005      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ef      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d159      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01e      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	d019      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003820:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800382c:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800384c:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d016      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fd fafb 	bl	8000e58 <HAL_GetTick>
 8003862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003864:	e00b      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fd faf7 	bl	8000e58 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d902      	bls.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	74fb      	strb	r3, [r7, #19]
            break;
 800387c:	e006      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ec      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038a8:	e008      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	74bb      	strb	r3, [r7, #18]
 80038ae:	e005      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038bc:	7c7b      	ldrb	r3, [r7, #17]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4ba7      	ldr	r3, [pc, #668]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	4aa6      	ldr	r2, [pc, #664]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038da:	4ba1      	ldr	r3, [pc, #644]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f023 0203 	bic.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	499d      	ldr	r1, [pc, #628]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038fc:	4b98      	ldr	r3, [pc, #608]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 020c 	bic.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4995      	ldr	r1, [pc, #596]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800391e:	4b90      	ldr	r3, [pc, #576]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	498c      	ldr	r1, [pc, #560]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003940:	4b87      	ldr	r3, [pc, #540]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	4984      	ldr	r1, [pc, #528]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003962:	4b7f      	ldr	r3, [pc, #508]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	497b      	ldr	r1, [pc, #492]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003984:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	4973      	ldr	r1, [pc, #460]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a6:	4b6e      	ldr	r3, [pc, #440]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	496a      	ldr	r1, [pc, #424]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c8:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4962      	ldr	r1, [pc, #392]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ea:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	4959      	ldr	r1, [pc, #356]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a0c:	4b54      	ldr	r3, [pc, #336]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	4951      	ldr	r1, [pc, #324]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4948      	ldr	r1, [pc, #288]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a50:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4940      	ldr	r1, [pc, #256]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a3a      	ldr	r2, [pc, #232]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a88:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	4932      	ldr	r1, [pc, #200]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4924      	ldr	r1, [pc, #144]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	4916      	ldr	r1, [pc, #88]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b16:	d105      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4908      	ldr	r1, [pc, #32]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b4e:	d109      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a02      	ldr	r2, [pc, #8]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b5a:	60d3      	str	r3, [r2, #12]
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4926      	ldr	r1, [pc, #152]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	4918      	ldr	r1, [pc, #96]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e042      	b.n	8003cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fc ffa9 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8c2 	bl	8003de8 <UART_SetConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fbb2 	bl	80043e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fc39 	bl	8004524 <UART_CheckIdleState>
 8003cb2:	4603      	mov	r3, r0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	f040 8083 	bne.w	8003dde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_UART_Transmit+0x28>
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e07b      	b.n	8003de0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x3a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e074      	b.n	8003de0 <HAL_UART_Transmit+0x124>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2221      	movs	r2, #33	; 0x21
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0e:	f7fd f8a3 	bl	8000e58 <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d108      	bne.n	8003d40 <HAL_UART_Transmit+0x84>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e003      	b.n	8003d48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003d50:	e02c      	b.n	8003dac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fc2c 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e039      	b.n	8003de0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3302      	adds	r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e007      	b.n	8003d9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1cc      	bne.n	8003d52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fbf9 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e006      	b.n	8003de0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b08c      	sub	sp, #48	; 0x30
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4baa      	ldr	r3, [pc, #680]	; (80040c0 <UART_SetConfig+0x2d8>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a9f      	ldr	r2, [pc, #636]	; (80040c4 <UART_SetConfig+0x2dc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e50:	4313      	orrs	r3, r2
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f023 010f 	bic.w	r1, r3, #15
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a90      	ldr	r2, [pc, #576]	; (80040c8 <UART_SetConfig+0x2e0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d125      	bne.n	8003ed8 <UART_SetConfig+0xf0>
 8003e8c:	4b8f      	ldr	r3, [pc, #572]	; (80040cc <UART_SetConfig+0x2e4>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d81a      	bhi.n	8003ed0 <UART_SetConfig+0xe8>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0xb8>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ec1 	.word	0x08003ec1
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ec9 	.word	0x08003ec9
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e116      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	e112      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec6:	e10e      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ece:	e10a      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed6:	e106      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a7c      	ldr	r2, [pc, #496]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d138      	bne.n	8003f54 <UART_SetConfig+0x16c>
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <UART_SetConfig+0x2e4>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	d82d      	bhi.n	8003f4c <UART_SetConfig+0x164>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x110>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f2d 	.word	0x08003f2d
 8003efc:	08003f4d 	.word	0x08003f4d
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f4d 	.word	0x08003f4d
 8003f08:	08003f3d 	.word	0x08003f3d
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f4d 	.word	0x08003f4d
 8003f18:	08003f35 	.word	0x08003f35
 8003f1c:	08003f4d 	.word	0x08003f4d
 8003f20:	08003f4d 	.word	0x08003f4d
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f32:	e0d8      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3a:	e0d4      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f42:	e0d0      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f4a:	e0cc      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f52:	e0c8      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5e      	ldr	r2, [pc, #376]	; (80040d4 <UART_SetConfig+0x2ec>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d125      	bne.n	8003faa <UART_SetConfig+0x1c2>
 8003f5e:	4b5b      	ldr	r3, [pc, #364]	; (80040cc <UART_SetConfig+0x2e4>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f68:	2b30      	cmp	r3, #48	; 0x30
 8003f6a:	d016      	beq.n	8003f9a <UART_SetConfig+0x1b2>
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d818      	bhi.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d00a      	beq.n	8003f8a <UART_SetConfig+0x1a2>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d814      	bhi.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <UART_SetConfig+0x19a>
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d008      	beq.n	8003f92 <UART_SetConfig+0x1aa>
 8003f80:	e00f      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f88:	e0ad      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f90:	e0a9      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f92:	2304      	movs	r3, #4
 8003f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f98:	e0a5      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa0:	e0a1      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa8:	e09d      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a4a      	ldr	r2, [pc, #296]	; (80040d8 <UART_SetConfig+0x2f0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d125      	bne.n	8004000 <UART_SetConfig+0x218>
 8003fb4:	4b45      	ldr	r3, [pc, #276]	; (80040cc <UART_SetConfig+0x2e4>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc0:	d016      	beq.n	8003ff0 <UART_SetConfig+0x208>
 8003fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc4:	d818      	bhi.n	8003ff8 <UART_SetConfig+0x210>
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d00a      	beq.n	8003fe0 <UART_SetConfig+0x1f8>
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d814      	bhi.n	8003ff8 <UART_SetConfig+0x210>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <UART_SetConfig+0x1f0>
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d008      	beq.n	8003fe8 <UART_SetConfig+0x200>
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fde:	e082      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	e07e      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fee:	e07a      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e076      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffe:	e072      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a35      	ldr	r2, [pc, #212]	; (80040dc <UART_SetConfig+0x2f4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d12a      	bne.n	8004060 <UART_SetConfig+0x278>
 800400a:	4b30      	ldr	r3, [pc, #192]	; (80040cc <UART_SetConfig+0x2e4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004018:	d01a      	beq.n	8004050 <UART_SetConfig+0x268>
 800401a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401e:	d81b      	bhi.n	8004058 <UART_SetConfig+0x270>
 8004020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004024:	d00c      	beq.n	8004040 <UART_SetConfig+0x258>
 8004026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402a:	d815      	bhi.n	8004058 <UART_SetConfig+0x270>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <UART_SetConfig+0x250>
 8004030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004034:	d008      	beq.n	8004048 <UART_SetConfig+0x260>
 8004036:	e00f      	b.n	8004058 <UART_SetConfig+0x270>
 8004038:	2300      	movs	r3, #0
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e052      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8004040:	2302      	movs	r3, #2
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e04e      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8004048:	2304      	movs	r3, #4
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e04a      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8004050:	2308      	movs	r3, #8
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e046      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e042      	b.n	80040e6 <UART_SetConfig+0x2fe>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <UART_SetConfig+0x2dc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d13a      	bne.n	80040e0 <UART_SetConfig+0x2f8>
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <UART_SetConfig+0x2e4>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004078:	d01a      	beq.n	80040b0 <UART_SetConfig+0x2c8>
 800407a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800407e:	d81b      	bhi.n	80040b8 <UART_SetConfig+0x2d0>
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d00c      	beq.n	80040a0 <UART_SetConfig+0x2b8>
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d815      	bhi.n	80040b8 <UART_SetConfig+0x2d0>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <UART_SetConfig+0x2b0>
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004094:	d008      	beq.n	80040a8 <UART_SetConfig+0x2c0>
 8004096:	e00f      	b.n	80040b8 <UART_SetConfig+0x2d0>
 8004098:	2300      	movs	r3, #0
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409e:	e022      	b.n	80040e6 <UART_SetConfig+0x2fe>
 80040a0:	2302      	movs	r3, #2
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a6:	e01e      	b.n	80040e6 <UART_SetConfig+0x2fe>
 80040a8:	2304      	movs	r3, #4
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ae:	e01a      	b.n	80040e6 <UART_SetConfig+0x2fe>
 80040b0:	2308      	movs	r3, #8
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b6:	e016      	b.n	80040e6 <UART_SetConfig+0x2fe>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040be:	e012      	b.n	80040e6 <UART_SetConfig+0x2fe>
 80040c0:	cfff69f3 	.word	0xcfff69f3
 80040c4:	40008000 	.word	0x40008000
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40004400 	.word	0x40004400
 80040d4:	40004800 	.word	0x40004800
 80040d8:	40004c00 	.word	0x40004c00
 80040dc:	40005000 	.word	0x40005000
 80040e0:	2310      	movs	r3, #16
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4aae      	ldr	r2, [pc, #696]	; (80043a4 <UART_SetConfig+0x5bc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	f040 8097 	bne.w	8004220 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d823      	bhi.n	8004142 <UART_SetConfig+0x35a>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x318>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004125 	.word	0x08004125
 8004104:	08004143 	.word	0x08004143
 8004108:	0800412d 	.word	0x0800412d
 800410c:	08004143 	.word	0x08004143
 8004110:	08004133 	.word	0x08004133
 8004114:	08004143 	.word	0x08004143
 8004118:	08004143 	.word	0x08004143
 800411c:	08004143 	.word	0x08004143
 8004120:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004124:	f7ff faba 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8004128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800412a:	e010      	b.n	800414e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b9e      	ldr	r3, [pc, #632]	; (80043a8 <UART_SetConfig+0x5c0>)
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004130:	e00d      	b.n	800414e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7ff fa45 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004138:	e009      	b.n	800414e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004140:	e005      	b.n	800414e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800414c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8130 	beq.w	80043b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	4a94      	ldr	r2, [pc, #592]	; (80043ac <UART_SetConfig+0x5c4>)
 800415c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004160:	461a      	mov	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	fbb3 f3f2 	udiv	r3, r3, r2
 8004168:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	429a      	cmp	r2, r3
 8004178:	d305      	bcc.n	8004186 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	429a      	cmp	r2, r3
 8004184:	d903      	bls.n	800418e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800418c:	e113      	b.n	80043b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	2200      	movs	r2, #0
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	60fa      	str	r2, [r7, #12]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	4a84      	ldr	r2, [pc, #528]	; (80043ac <UART_SetConfig+0x5c4>)
 800419c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2200      	movs	r2, #0
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041b0:	f7fc f88e 	bl	80002d0 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	020b      	lsls	r3, r1, #8
 80041c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041ca:	0202      	lsls	r2, r0, #8
 80041cc:	6979      	ldr	r1, [r7, #20]
 80041ce:	6849      	ldr	r1, [r1, #4]
 80041d0:	0849      	lsrs	r1, r1, #1
 80041d2:	2000      	movs	r0, #0
 80041d4:	460c      	mov	r4, r1
 80041d6:	4605      	mov	r5, r0
 80041d8:	eb12 0804 	adds.w	r8, r2, r4
 80041dc:	eb43 0905 	adc.w	r9, r3, r5
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	469a      	mov	sl, r3
 80041e8:	4693      	mov	fp, r2
 80041ea:	4652      	mov	r2, sl
 80041ec:	465b      	mov	r3, fp
 80041ee:	4640      	mov	r0, r8
 80041f0:	4649      	mov	r1, r9
 80041f2:	f7fc f86d 	bl	80002d0 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4613      	mov	r3, r2
 80041fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004204:	d308      	bcc.n	8004218 <UART_SetConfig+0x430>
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420c:	d204      	bcs.n	8004218 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	e0ce      	b.n	80043b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800421e:	e0ca      	b.n	80043b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004228:	d166      	bne.n	80042f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800422a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800422e:	2b08      	cmp	r3, #8
 8004230:	d827      	bhi.n	8004282 <UART_SetConfig+0x49a>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x450>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800425d 	.word	0x0800425d
 800423c:	08004265 	.word	0x08004265
 8004240:	0800426d 	.word	0x0800426d
 8004244:	08004283 	.word	0x08004283
 8004248:	08004273 	.word	0x08004273
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
 8004258:	0800427b 	.word	0x0800427b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7ff fa1e 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8004260:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004262:	e014      	b.n	800428e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7ff fa30 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800426a:	e010      	b.n	800428e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800426c:	4b4e      	ldr	r3, [pc, #312]	; (80043a8 <UART_SetConfig+0x5c0>)
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004270:	e00d      	b.n	800428e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004272:	f7ff f9a5 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8004276:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004278:	e009      	b.n	800428e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004280:	e005      	b.n	800428e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800428c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8090 	beq.w	80043b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	4a44      	ldr	r2, [pc, #272]	; (80043ac <UART_SetConfig+0x5c4>)
 800429c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a8:	005a      	lsls	r2, r3, #1
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	441a      	add	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	d916      	bls.n	80042f0 <UART_SetConfig+0x508>
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c8:	d212      	bcs.n	80042f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f023 030f 	bic.w	r3, r3, #15
 80042d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	b29a      	uxth	r2, r3
 80042e0:	8bfb      	ldrh	r3, [r7, #30]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	8bfa      	ldrh	r2, [r7, #30]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	e062      	b.n	80043b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042f6:	e05e      	b.n	80043b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d828      	bhi.n	8004352 <UART_SetConfig+0x56a>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0x520>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	0800432d 	.word	0x0800432d
 800430c:	08004335 	.word	0x08004335
 8004310:	0800433d 	.word	0x0800433d
 8004314:	08004353 	.word	0x08004353
 8004318:	08004343 	.word	0x08004343
 800431c:	08004353 	.word	0x08004353
 8004320:	08004353 	.word	0x08004353
 8004324:	08004353 	.word	0x08004353
 8004328:	0800434b 	.word	0x0800434b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800432c:	f7ff f9b6 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8004330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004332:	e014      	b.n	800435e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7ff f9c8 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004338:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800433a:	e010      	b.n	800435e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <UART_SetConfig+0x5c0>)
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004340:	e00d      	b.n	800435e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004342:	f7ff f93d 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8004346:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004348:	e009      	b.n	800435e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004350:	e005      	b.n	800435e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800435c:	bf00      	nop
    }

    if (pclk != 0U)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d028      	beq.n	80043b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	4a10      	ldr	r2, [pc, #64]	; (80043ac <UART_SetConfig+0x5c4>)
 800436a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800436e:	461a      	mov	r2, r3
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	fbb3 f2f2 	udiv	r2, r3, r2
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	441a      	add	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	d910      	bls.n	80043b0 <UART_SetConfig+0x5c8>
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d20c      	bcs.n	80043b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	b29a      	uxth	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	e009      	b.n	80043b6 <UART_SetConfig+0x5ce>
 80043a2:	bf00      	nop
 80043a4:	40008000 	.word	0x40008000
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	08005320 	.word	0x08005320
      }
      else
      {
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80043d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3730      	adds	r7, #48	; 0x30
 80043da:	46bd      	mov	sp, r7
 80043dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044de:	d10a      	bne.n	80044f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af02      	add	r7, sp, #8
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004534:	f7fc fc90 	bl	8000e58 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b08      	cmp	r3, #8
 8004546:	d10e      	bne.n	8004566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f82f 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e025      	b.n	80045b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d10e      	bne.n	8004592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f819 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e00f      	b.n	80045b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b09c      	sub	sp, #112	; 0x70
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ca:	e0a9      	b.n	8004720 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d2:	f000 80a5 	beq.w	8004720 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fc fc3f 	bl	8000e58 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <UART_WaitOnFlagUntilTimeout+0x32>
 80045e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d140      	bne.n	800466e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004600:	667b      	str	r3, [r7, #100]	; 0x64
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004610:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e6      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3308      	adds	r3, #8
 8004624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	663b      	str	r3, [r7, #96]	; 0x60
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3308      	adds	r3, #8
 800463c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800463e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e5      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e069      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d051      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468a:	d149      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004694:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
 80046b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	613b      	str	r3, [r7, #16]
   return(result);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046e8:	623a      	str	r2, [r7, #32]
 80046ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	69f9      	ldr	r1, [r7, #28]
 80046ee:	6a3a      	ldr	r2, [r7, #32]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e010      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	f43f af46 	beq.w	80045cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3770      	adds	r7, #112	; 0x70
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_UARTEx_DisableFifoMode+0x16>
 800475c:	2302      	movs	r3, #2
 800475e:	e027      	b.n	80047b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800478e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e02d      	b.n	8004830 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f84f 	bl	80048b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e02d      	b.n	80048ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f811 	bl	80048b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d108      	bne.n	80048d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048d4:	e031      	b.n	800493a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048d6:	2308      	movs	r3, #8
 80048d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048da:	2308      	movs	r3, #8
 80048dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	0e5b      	lsrs	r3, r3, #25
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	0f5b      	lsrs	r3, r3, #29
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	7b3a      	ldrb	r2, [r7, #12]
 8004902:	4911      	ldr	r1, [pc, #68]	; (8004948 <UARTEx_SetNbDataToProcess+0x94>)
 8004904:	5c8a      	ldrb	r2, [r1, r2]
 8004906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800490a:	7b3a      	ldrb	r2, [r7, #12]
 800490c:	490f      	ldr	r1, [pc, #60]	; (800494c <UARTEx_SetNbDataToProcess+0x98>)
 800490e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004910:	fb93 f3f2 	sdiv	r3, r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	7b7a      	ldrb	r2, [r7, #13]
 8004920:	4909      	ldr	r1, [pc, #36]	; (8004948 <UARTEx_SetNbDataToProcess+0x94>)
 8004922:	5c8a      	ldrb	r2, [r1, r2]
 8004924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004928:	7b7a      	ldrb	r2, [r7, #13]
 800492a:	4908      	ldr	r1, [pc, #32]	; (800494c <UARTEx_SetNbDataToProcess+0x98>)
 800492c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800492e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	08005338 	.word	0x08005338
 800494c:	08005340 	.word	0x08005340

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4d0d      	ldr	r5, [pc, #52]	; (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2600      	movs	r6, #0
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4d0b      	ldr	r5, [pc, #44]	; (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	; (80049a0 <__libc_init_array+0x44>)
 8004970:	f000 fc8e 	bl	8005290 <_init>
 8004974:	1b64      	subs	r4, r4, r5
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2600      	movs	r6, #0
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005384 	.word	0x08005384
 8004998:	08005384 	.word	0x08005384
 800499c:	08005384 	.word	0x08005384
 80049a0:	08005388 	.word	0x08005388

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <siprintf>:
 80049b4:	b40e      	push	{r1, r2, r3}
 80049b6:	b500      	push	{lr}
 80049b8:	b09c      	sub	sp, #112	; 0x70
 80049ba:	ab1d      	add	r3, sp, #116	; 0x74
 80049bc:	9002      	str	r0, [sp, #8]
 80049be:	9006      	str	r0, [sp, #24]
 80049c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049c4:	4809      	ldr	r0, [pc, #36]	; (80049ec <siprintf+0x38>)
 80049c6:	9107      	str	r1, [sp, #28]
 80049c8:	9104      	str	r1, [sp, #16]
 80049ca:	4909      	ldr	r1, [pc, #36]	; (80049f0 <siprintf+0x3c>)
 80049cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d0:	9105      	str	r1, [sp, #20]
 80049d2:	6800      	ldr	r0, [r0, #0]
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	a902      	add	r1, sp, #8
 80049d8:	f000 f868 	bl	8004aac <_svfiprintf_r>
 80049dc:	9b02      	ldr	r3, [sp, #8]
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	b01c      	add	sp, #112	; 0x70
 80049e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e8:	b003      	add	sp, #12
 80049ea:	4770      	bx	lr
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	ffff0208 	.word	0xffff0208

080049f4 <__ssputs_r>:
 80049f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	688e      	ldr	r6, [r1, #8]
 80049fa:	429e      	cmp	r6, r3
 80049fc:	4682      	mov	sl, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	4690      	mov	r8, r2
 8004a02:	461f      	mov	r7, r3
 8004a04:	d838      	bhi.n	8004a78 <__ssputs_r+0x84>
 8004a06:	898a      	ldrh	r2, [r1, #12]
 8004a08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a0c:	d032      	beq.n	8004a74 <__ssputs_r+0x80>
 8004a0e:	6825      	ldr	r5, [r4, #0]
 8004a10:	6909      	ldr	r1, [r1, #16]
 8004a12:	eba5 0901 	sub.w	r9, r5, r1
 8004a16:	6965      	ldr	r5, [r4, #20]
 8004a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a20:	3301      	adds	r3, #1
 8004a22:	444b      	add	r3, r9
 8004a24:	106d      	asrs	r5, r5, #1
 8004a26:	429d      	cmp	r5, r3
 8004a28:	bf38      	it	cc
 8004a2a:	461d      	movcc	r5, r3
 8004a2c:	0553      	lsls	r3, r2, #21
 8004a2e:	d531      	bpl.n	8004a94 <__ssputs_r+0xa0>
 8004a30:	4629      	mov	r1, r5
 8004a32:	f000 fb63 	bl	80050fc <_malloc_r>
 8004a36:	4606      	mov	r6, r0
 8004a38:	b950      	cbnz	r0, 8004a50 <__ssputs_r+0x5c>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	f8ca 3000 	str.w	r3, [sl]
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	6921      	ldr	r1, [r4, #16]
 8004a52:	464a      	mov	r2, r9
 8004a54:	f000 fabe 	bl	8004fd4 <memcpy>
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	6126      	str	r6, [r4, #16]
 8004a66:	6165      	str	r5, [r4, #20]
 8004a68:	444e      	add	r6, r9
 8004a6a:	eba5 0509 	sub.w	r5, r5, r9
 8004a6e:	6026      	str	r6, [r4, #0]
 8004a70:	60a5      	str	r5, [r4, #8]
 8004a72:	463e      	mov	r6, r7
 8004a74:	42be      	cmp	r6, r7
 8004a76:	d900      	bls.n	8004a7a <__ssputs_r+0x86>
 8004a78:	463e      	mov	r6, r7
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4641      	mov	r1, r8
 8004a80:	f000 fab6 	bl	8004ff0 <memmove>
 8004a84:	68a3      	ldr	r3, [r4, #8]
 8004a86:	1b9b      	subs	r3, r3, r6
 8004a88:	60a3      	str	r3, [r4, #8]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	4433      	add	r3, r6
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	2000      	movs	r0, #0
 8004a92:	e7db      	b.n	8004a4c <__ssputs_r+0x58>
 8004a94:	462a      	mov	r2, r5
 8004a96:	f000 fba5 	bl	80051e4 <_realloc_r>
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d1e1      	bne.n	8004a64 <__ssputs_r+0x70>
 8004aa0:	6921      	ldr	r1, [r4, #16]
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	f000 fabe 	bl	8005024 <_free_r>
 8004aa8:	e7c7      	b.n	8004a3a <__ssputs_r+0x46>
	...

08004aac <_svfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	4698      	mov	r8, r3
 8004ab2:	898b      	ldrh	r3, [r1, #12]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	b09d      	sub	sp, #116	; 0x74
 8004ab8:	4607      	mov	r7, r0
 8004aba:	460d      	mov	r5, r1
 8004abc:	4614      	mov	r4, r2
 8004abe:	d50e      	bpl.n	8004ade <_svfiprintf_r+0x32>
 8004ac0:	690b      	ldr	r3, [r1, #16]
 8004ac2:	b963      	cbnz	r3, 8004ade <_svfiprintf_r+0x32>
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	f000 fb19 	bl	80050fc <_malloc_r>
 8004aca:	6028      	str	r0, [r5, #0]
 8004acc:	6128      	str	r0, [r5, #16]
 8004ace:	b920      	cbnz	r0, 8004ada <_svfiprintf_r+0x2e>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad8:	e0d1      	b.n	8004c7e <_svfiprintf_r+0x1d2>
 8004ada:	2340      	movs	r3, #64	; 0x40
 8004adc:	616b      	str	r3, [r5, #20]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aec:	2330      	movs	r3, #48	; 0x30
 8004aee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c98 <_svfiprintf_r+0x1ec>
 8004af2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004af6:	f04f 0901 	mov.w	r9, #1
 8004afa:	4623      	mov	r3, r4
 8004afc:	469a      	mov	sl, r3
 8004afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b02:	b10a      	cbz	r2, 8004b08 <_svfiprintf_r+0x5c>
 8004b04:	2a25      	cmp	r2, #37	; 0x25
 8004b06:	d1f9      	bne.n	8004afc <_svfiprintf_r+0x50>
 8004b08:	ebba 0b04 	subs.w	fp, sl, r4
 8004b0c:	d00b      	beq.n	8004b26 <_svfiprintf_r+0x7a>
 8004b0e:	465b      	mov	r3, fp
 8004b10:	4622      	mov	r2, r4
 8004b12:	4629      	mov	r1, r5
 8004b14:	4638      	mov	r0, r7
 8004b16:	f7ff ff6d 	bl	80049f4 <__ssputs_r>
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f000 80aa 	beq.w	8004c74 <_svfiprintf_r+0x1c8>
 8004b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b22:	445a      	add	r2, fp
 8004b24:	9209      	str	r2, [sp, #36]	; 0x24
 8004b26:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80a2 	beq.w	8004c74 <_svfiprintf_r+0x1c8>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b3a:	f10a 0a01 	add.w	sl, sl, #1
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	9307      	str	r3, [sp, #28]
 8004b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b46:	931a      	str	r3, [sp, #104]	; 0x68
 8004b48:	4654      	mov	r4, sl
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b50:	4851      	ldr	r0, [pc, #324]	; (8004c98 <_svfiprintf_r+0x1ec>)
 8004b52:	f7fb fb6d 	bl	8000230 <memchr>
 8004b56:	9a04      	ldr	r2, [sp, #16]
 8004b58:	b9d8      	cbnz	r0, 8004b92 <_svfiprintf_r+0xe6>
 8004b5a:	06d0      	lsls	r0, r2, #27
 8004b5c:	bf44      	itt	mi
 8004b5e:	2320      	movmi	r3, #32
 8004b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b64:	0711      	lsls	r1, r2, #28
 8004b66:	bf44      	itt	mi
 8004b68:	232b      	movmi	r3, #43	; 0x2b
 8004b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b72:	2b2a      	cmp	r3, #42	; 0x2a
 8004b74:	d015      	beq.n	8004ba2 <_svfiprintf_r+0xf6>
 8004b76:	9a07      	ldr	r2, [sp, #28]
 8004b78:	4654      	mov	r4, sl
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f04f 0c0a 	mov.w	ip, #10
 8004b80:	4621      	mov	r1, r4
 8004b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b86:	3b30      	subs	r3, #48	; 0x30
 8004b88:	2b09      	cmp	r3, #9
 8004b8a:	d94e      	bls.n	8004c2a <_svfiprintf_r+0x17e>
 8004b8c:	b1b0      	cbz	r0, 8004bbc <_svfiprintf_r+0x110>
 8004b8e:	9207      	str	r2, [sp, #28]
 8004b90:	e014      	b.n	8004bbc <_svfiprintf_r+0x110>
 8004b92:	eba0 0308 	sub.w	r3, r0, r8
 8004b96:	fa09 f303 	lsl.w	r3, r9, r3
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	46a2      	mov	sl, r4
 8004ba0:	e7d2      	b.n	8004b48 <_svfiprintf_r+0x9c>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	9103      	str	r1, [sp, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	bfbb      	ittet	lt
 8004bae:	425b      	neglt	r3, r3
 8004bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8004bb4:	9307      	strge	r3, [sp, #28]
 8004bb6:	9307      	strlt	r3, [sp, #28]
 8004bb8:	bfb8      	it	lt
 8004bba:	9204      	strlt	r2, [sp, #16]
 8004bbc:	7823      	ldrb	r3, [r4, #0]
 8004bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc0:	d10c      	bne.n	8004bdc <_svfiprintf_r+0x130>
 8004bc2:	7863      	ldrb	r3, [r4, #1]
 8004bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc6:	d135      	bne.n	8004c34 <_svfiprintf_r+0x188>
 8004bc8:	9b03      	ldr	r3, [sp, #12]
 8004bca:	1d1a      	adds	r2, r3, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	9203      	str	r2, [sp, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bfb8      	it	lt
 8004bd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004bd8:	3402      	adds	r4, #2
 8004bda:	9305      	str	r3, [sp, #20]
 8004bdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ca8 <_svfiprintf_r+0x1fc>
 8004be0:	7821      	ldrb	r1, [r4, #0]
 8004be2:	2203      	movs	r2, #3
 8004be4:	4650      	mov	r0, sl
 8004be6:	f7fb fb23 	bl	8000230 <memchr>
 8004bea:	b140      	cbz	r0, 8004bfe <_svfiprintf_r+0x152>
 8004bec:	2340      	movs	r3, #64	; 0x40
 8004bee:	eba0 000a 	sub.w	r0, r0, sl
 8004bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8004bf6:	9b04      	ldr	r3, [sp, #16]
 8004bf8:	4303      	orrs	r3, r0
 8004bfa:	3401      	adds	r4, #1
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c02:	4826      	ldr	r0, [pc, #152]	; (8004c9c <_svfiprintf_r+0x1f0>)
 8004c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c08:	2206      	movs	r2, #6
 8004c0a:	f7fb fb11 	bl	8000230 <memchr>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d038      	beq.n	8004c84 <_svfiprintf_r+0x1d8>
 8004c12:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <_svfiprintf_r+0x1f4>)
 8004c14:	bb1b      	cbnz	r3, 8004c5e <_svfiprintf_r+0x1b2>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	3307      	adds	r3, #7
 8004c1a:	f023 0307 	bic.w	r3, r3, #7
 8004c1e:	3308      	adds	r3, #8
 8004c20:	9303      	str	r3, [sp, #12]
 8004c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c24:	4433      	add	r3, r6
 8004c26:	9309      	str	r3, [sp, #36]	; 0x24
 8004c28:	e767      	b.n	8004afa <_svfiprintf_r+0x4e>
 8004c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c2e:	460c      	mov	r4, r1
 8004c30:	2001      	movs	r0, #1
 8004c32:	e7a5      	b.n	8004b80 <_svfiprintf_r+0xd4>
 8004c34:	2300      	movs	r3, #0
 8004c36:	3401      	adds	r4, #1
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4620      	mov	r0, r4
 8004c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c46:	3a30      	subs	r2, #48	; 0x30
 8004c48:	2a09      	cmp	r2, #9
 8004c4a:	d903      	bls.n	8004c54 <_svfiprintf_r+0x1a8>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0c5      	beq.n	8004bdc <_svfiprintf_r+0x130>
 8004c50:	9105      	str	r1, [sp, #20]
 8004c52:	e7c3      	b.n	8004bdc <_svfiprintf_r+0x130>
 8004c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c58:	4604      	mov	r4, r0
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7f0      	b.n	8004c40 <_svfiprintf_r+0x194>
 8004c5e:	ab03      	add	r3, sp, #12
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	462a      	mov	r2, r5
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <_svfiprintf_r+0x1f8>)
 8004c66:	a904      	add	r1, sp, #16
 8004c68:	4638      	mov	r0, r7
 8004c6a:	f3af 8000 	nop.w
 8004c6e:	1c42      	adds	r2, r0, #1
 8004c70:	4606      	mov	r6, r0
 8004c72:	d1d6      	bne.n	8004c22 <_svfiprintf_r+0x176>
 8004c74:	89ab      	ldrh	r3, [r5, #12]
 8004c76:	065b      	lsls	r3, r3, #25
 8004c78:	f53f af2c 	bmi.w	8004ad4 <_svfiprintf_r+0x28>
 8004c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c7e:	b01d      	add	sp, #116	; 0x74
 8004c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c84:	ab03      	add	r3, sp, #12
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	462a      	mov	r2, r5
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <_svfiprintf_r+0x1f8>)
 8004c8c:	a904      	add	r1, sp, #16
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f000 f87a 	bl	8004d88 <_printf_i>
 8004c94:	e7eb      	b.n	8004c6e <_svfiprintf_r+0x1c2>
 8004c96:	bf00      	nop
 8004c98:	08005348 	.word	0x08005348
 8004c9c:	08005352 	.word	0x08005352
 8004ca0:	00000000 	.word	0x00000000
 8004ca4:	080049f5 	.word	0x080049f5
 8004ca8:	0800534e 	.word	0x0800534e

08004cac <_printf_common>:
 8004cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	688a      	ldr	r2, [r1, #8]
 8004cb6:	690b      	ldr	r3, [r1, #16]
 8004cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bfb8      	it	lt
 8004cc0:	4613      	movlt	r3, r2
 8004cc2:	6033      	str	r3, [r6, #0]
 8004cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cc8:	4607      	mov	r7, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	b10a      	cbz	r2, 8004cd2 <_printf_common+0x26>
 8004cce:	3301      	adds	r3, #1
 8004cd0:	6033      	str	r3, [r6, #0]
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	0699      	lsls	r1, r3, #26
 8004cd6:	bf42      	ittt	mi
 8004cd8:	6833      	ldrmi	r3, [r6, #0]
 8004cda:	3302      	addmi	r3, #2
 8004cdc:	6033      	strmi	r3, [r6, #0]
 8004cde:	6825      	ldr	r5, [r4, #0]
 8004ce0:	f015 0506 	ands.w	r5, r5, #6
 8004ce4:	d106      	bne.n	8004cf4 <_printf_common+0x48>
 8004ce6:	f104 0a19 	add.w	sl, r4, #25
 8004cea:	68e3      	ldr	r3, [r4, #12]
 8004cec:	6832      	ldr	r2, [r6, #0]
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	42ab      	cmp	r3, r5
 8004cf2:	dc26      	bgt.n	8004d42 <_printf_common+0x96>
 8004cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cf8:	1e13      	subs	r3, r2, #0
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	bf18      	it	ne
 8004cfe:	2301      	movne	r3, #1
 8004d00:	0692      	lsls	r2, r2, #26
 8004d02:	d42b      	bmi.n	8004d5c <_printf_common+0xb0>
 8004d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c0      	blx	r8
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d01e      	beq.n	8004d50 <_printf_common+0xa4>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	68e5      	ldr	r5, [r4, #12]
 8004d16:	6832      	ldr	r2, [r6, #0]
 8004d18:	f003 0306 	and.w	r3, r3, #6
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	bf08      	it	eq
 8004d20:	1aad      	subeq	r5, r5, r2
 8004d22:	68a3      	ldr	r3, [r4, #8]
 8004d24:	6922      	ldr	r2, [r4, #16]
 8004d26:	bf0c      	ite	eq
 8004d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d2c:	2500      	movne	r5, #0
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	bfc4      	itt	gt
 8004d32:	1a9b      	subgt	r3, r3, r2
 8004d34:	18ed      	addgt	r5, r5, r3
 8004d36:	2600      	movs	r6, #0
 8004d38:	341a      	adds	r4, #26
 8004d3a:	42b5      	cmp	r5, r6
 8004d3c:	d11a      	bne.n	8004d74 <_printf_common+0xc8>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e008      	b.n	8004d54 <_printf_common+0xa8>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4652      	mov	r2, sl
 8004d46:	4649      	mov	r1, r9
 8004d48:	4638      	mov	r0, r7
 8004d4a:	47c0      	blx	r8
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d103      	bne.n	8004d58 <_printf_common+0xac>
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d58:	3501      	adds	r5, #1
 8004d5a:	e7c6      	b.n	8004cea <_printf_common+0x3e>
 8004d5c:	18e1      	adds	r1, r4, r3
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	2030      	movs	r0, #48	; 0x30
 8004d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d66:	4422      	add	r2, r4
 8004d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d70:	3302      	adds	r3, #2
 8004d72:	e7c7      	b.n	8004d04 <_printf_common+0x58>
 8004d74:	2301      	movs	r3, #1
 8004d76:	4622      	mov	r2, r4
 8004d78:	4649      	mov	r1, r9
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d0e6      	beq.n	8004d50 <_printf_common+0xa4>
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7d9      	b.n	8004d3a <_printf_common+0x8e>
	...

08004d88 <_printf_i>:
 8004d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	7e0f      	ldrb	r7, [r1, #24]
 8004d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d90:	2f78      	cmp	r7, #120	; 0x78
 8004d92:	4691      	mov	r9, r2
 8004d94:	4680      	mov	r8, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	469a      	mov	sl, r3
 8004d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d9e:	d807      	bhi.n	8004db0 <_printf_i+0x28>
 8004da0:	2f62      	cmp	r7, #98	; 0x62
 8004da2:	d80a      	bhi.n	8004dba <_printf_i+0x32>
 8004da4:	2f00      	cmp	r7, #0
 8004da6:	f000 80d8 	beq.w	8004f5a <_printf_i+0x1d2>
 8004daa:	2f58      	cmp	r7, #88	; 0x58
 8004dac:	f000 80a3 	beq.w	8004ef6 <_printf_i+0x16e>
 8004db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004db8:	e03a      	b.n	8004e30 <_printf_i+0xa8>
 8004dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dbe:	2b15      	cmp	r3, #21
 8004dc0:	d8f6      	bhi.n	8004db0 <_printf_i+0x28>
 8004dc2:	a101      	add	r1, pc, #4	; (adr r1, 8004dc8 <_printf_i+0x40>)
 8004dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dc8:	08004e21 	.word	0x08004e21
 8004dcc:	08004e35 	.word	0x08004e35
 8004dd0:	08004db1 	.word	0x08004db1
 8004dd4:	08004db1 	.word	0x08004db1
 8004dd8:	08004db1 	.word	0x08004db1
 8004ddc:	08004db1 	.word	0x08004db1
 8004de0:	08004e35 	.word	0x08004e35
 8004de4:	08004db1 	.word	0x08004db1
 8004de8:	08004db1 	.word	0x08004db1
 8004dec:	08004db1 	.word	0x08004db1
 8004df0:	08004db1 	.word	0x08004db1
 8004df4:	08004f41 	.word	0x08004f41
 8004df8:	08004e65 	.word	0x08004e65
 8004dfc:	08004f23 	.word	0x08004f23
 8004e00:	08004db1 	.word	0x08004db1
 8004e04:	08004db1 	.word	0x08004db1
 8004e08:	08004f63 	.word	0x08004f63
 8004e0c:	08004db1 	.word	0x08004db1
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004db1 	.word	0x08004db1
 8004e18:	08004db1 	.word	0x08004db1
 8004e1c:	08004f2b 	.word	0x08004f2b
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	1d1a      	adds	r2, r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	602a      	str	r2, [r5, #0]
 8004e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0a3      	b.n	8004f7c <_printf_i+0x1f4>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	6829      	ldr	r1, [r5, #0]
 8004e38:	0606      	lsls	r6, r0, #24
 8004e3a:	f101 0304 	add.w	r3, r1, #4
 8004e3e:	d50a      	bpl.n	8004e56 <_printf_i+0xce>
 8004e40:	680e      	ldr	r6, [r1, #0]
 8004e42:	602b      	str	r3, [r5, #0]
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	da03      	bge.n	8004e50 <_printf_i+0xc8>
 8004e48:	232d      	movs	r3, #45	; 0x2d
 8004e4a:	4276      	negs	r6, r6
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	485e      	ldr	r0, [pc, #376]	; (8004fcc <_printf_i+0x244>)
 8004e52:	230a      	movs	r3, #10
 8004e54:	e019      	b.n	8004e8a <_printf_i+0x102>
 8004e56:	680e      	ldr	r6, [r1, #0]
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e5e:	bf18      	it	ne
 8004e60:	b236      	sxthne	r6, r6
 8004e62:	e7ef      	b.n	8004e44 <_printf_i+0xbc>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	6029      	str	r1, [r5, #0]
 8004e6c:	0601      	lsls	r1, r0, #24
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0xec>
 8004e70:	681e      	ldr	r6, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <_printf_i+0xf2>
 8004e74:	0646      	lsls	r6, r0, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0xe8>
 8004e78:	881e      	ldrh	r6, [r3, #0]
 8004e7a:	4854      	ldr	r0, [pc, #336]	; (8004fcc <_printf_i+0x244>)
 8004e7c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e7e:	bf0c      	ite	eq
 8004e80:	2308      	moveq	r3, #8
 8004e82:	230a      	movne	r3, #10
 8004e84:	2100      	movs	r1, #0
 8004e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e8a:	6865      	ldr	r5, [r4, #4]
 8004e8c:	60a5      	str	r5, [r4, #8]
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	bfa2      	ittt	ge
 8004e92:	6821      	ldrge	r1, [r4, #0]
 8004e94:	f021 0104 	bicge.w	r1, r1, #4
 8004e98:	6021      	strge	r1, [r4, #0]
 8004e9a:	b90e      	cbnz	r6, 8004ea0 <_printf_i+0x118>
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	d04d      	beq.n	8004f3c <_printf_i+0x1b4>
 8004ea0:	4615      	mov	r5, r2
 8004ea2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ea6:	fb03 6711 	mls	r7, r3, r1, r6
 8004eaa:	5dc7      	ldrb	r7, [r0, r7]
 8004eac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eb0:	4637      	mov	r7, r6
 8004eb2:	42bb      	cmp	r3, r7
 8004eb4:	460e      	mov	r6, r1
 8004eb6:	d9f4      	bls.n	8004ea2 <_printf_i+0x11a>
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d10b      	bne.n	8004ed4 <_printf_i+0x14c>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	07de      	lsls	r6, r3, #31
 8004ec0:	d508      	bpl.n	8004ed4 <_printf_i+0x14c>
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	6861      	ldr	r1, [r4, #4]
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	bfde      	ittt	le
 8004eca:	2330      	movle	r3, #48	; 0x30
 8004ecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ed0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ed4:	1b52      	subs	r2, r2, r5
 8004ed6:	6122      	str	r2, [r4, #16]
 8004ed8:	f8cd a000 	str.w	sl, [sp]
 8004edc:	464b      	mov	r3, r9
 8004ede:	aa03      	add	r2, sp, #12
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f7ff fee2 	bl	8004cac <_printf_common>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d14c      	bne.n	8004f86 <_printf_i+0x1fe>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef0:	b004      	add	sp, #16
 8004ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef6:	4835      	ldr	r0, [pc, #212]	; (8004fcc <_printf_i+0x244>)
 8004ef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004efc:	6829      	ldr	r1, [r5, #0]
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f04:	6029      	str	r1, [r5, #0]
 8004f06:	061d      	lsls	r5, r3, #24
 8004f08:	d514      	bpl.n	8004f34 <_printf_i+0x1ac>
 8004f0a:	07df      	lsls	r7, r3, #31
 8004f0c:	bf44      	itt	mi
 8004f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f12:	6023      	strmi	r3, [r4, #0]
 8004f14:	b91e      	cbnz	r6, 8004f1e <_printf_i+0x196>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	f023 0320 	bic.w	r3, r3, #32
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	2310      	movs	r3, #16
 8004f20:	e7b0      	b.n	8004e84 <_printf_i+0xfc>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	2378      	movs	r3, #120	; 0x78
 8004f2c:	4828      	ldr	r0, [pc, #160]	; (8004fd0 <_printf_i+0x248>)
 8004f2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f32:	e7e3      	b.n	8004efc <_printf_i+0x174>
 8004f34:	0659      	lsls	r1, r3, #25
 8004f36:	bf48      	it	mi
 8004f38:	b2b6      	uxthmi	r6, r6
 8004f3a:	e7e6      	b.n	8004f0a <_printf_i+0x182>
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	e7bb      	b.n	8004eb8 <_printf_i+0x130>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	6826      	ldr	r6, [r4, #0]
 8004f44:	6961      	ldr	r1, [r4, #20]
 8004f46:	1d18      	adds	r0, r3, #4
 8004f48:	6028      	str	r0, [r5, #0]
 8004f4a:	0635      	lsls	r5, r6, #24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	d501      	bpl.n	8004f54 <_printf_i+0x1cc>
 8004f50:	6019      	str	r1, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <_printf_i+0x1d2>
 8004f54:	0670      	lsls	r0, r6, #25
 8004f56:	d5fb      	bpl.n	8004f50 <_printf_i+0x1c8>
 8004f58:	8019      	strh	r1, [r3, #0]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	4615      	mov	r5, r2
 8004f60:	e7ba      	b.n	8004ed8 <_printf_i+0x150>
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	1d1a      	adds	r2, r3, #4
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f7fb f95e 	bl	8000230 <memchr>
 8004f74:	b108      	cbz	r0, 8004f7a <_printf_i+0x1f2>
 8004f76:	1b40      	subs	r0, r0, r5
 8004f78:	6060      	str	r0, [r4, #4]
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f84:	e7a8      	b.n	8004ed8 <_printf_i+0x150>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	462a      	mov	r2, r5
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d0ab      	beq.n	8004eec <_printf_i+0x164>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	d413      	bmi.n	8004fc2 <_printf_i+0x23a>
 8004f9a:	68e0      	ldr	r0, [r4, #12]
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	bfb8      	it	lt
 8004fa2:	4618      	movlt	r0, r3
 8004fa4:	e7a4      	b.n	8004ef0 <_printf_i+0x168>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4632      	mov	r2, r6
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	47d0      	blx	sl
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d09b      	beq.n	8004eec <_printf_i+0x164>
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	9903      	ldr	r1, [sp, #12]
 8004fba:	1a5b      	subs	r3, r3, r1
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	dcf2      	bgt.n	8004fa6 <_printf_i+0x21e>
 8004fc0:	e7eb      	b.n	8004f9a <_printf_i+0x212>
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	f104 0619 	add.w	r6, r4, #25
 8004fc8:	e7f5      	b.n	8004fb6 <_printf_i+0x22e>
 8004fca:	bf00      	nop
 8004fcc:	08005359 	.word	0x08005359
 8004fd0:	0800536a 	.word	0x0800536a

08004fd4 <memcpy>:
 8004fd4:	440a      	add	r2, r1
 8004fd6:	4291      	cmp	r1, r2
 8004fd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fdc:	d100      	bne.n	8004fe0 <memcpy+0xc>
 8004fde:	4770      	bx	lr
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fea:	4291      	cmp	r1, r2
 8004fec:	d1f9      	bne.n	8004fe2 <memcpy+0xe>
 8004fee:	bd10      	pop	{r4, pc}

08004ff0 <memmove>:
 8004ff0:	4288      	cmp	r0, r1
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	eb01 0402 	add.w	r4, r1, r2
 8004ff8:	d902      	bls.n	8005000 <memmove+0x10>
 8004ffa:	4284      	cmp	r4, r0
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	d807      	bhi.n	8005010 <memmove+0x20>
 8005000:	1e43      	subs	r3, r0, #1
 8005002:	42a1      	cmp	r1, r4
 8005004:	d008      	beq.n	8005018 <memmove+0x28>
 8005006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800500a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800500e:	e7f8      	b.n	8005002 <memmove+0x12>
 8005010:	4402      	add	r2, r0
 8005012:	4601      	mov	r1, r0
 8005014:	428a      	cmp	r2, r1
 8005016:	d100      	bne.n	800501a <memmove+0x2a>
 8005018:	bd10      	pop	{r4, pc}
 800501a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800501e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005022:	e7f7      	b.n	8005014 <memmove+0x24>

08005024 <_free_r>:
 8005024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005026:	2900      	cmp	r1, #0
 8005028:	d044      	beq.n	80050b4 <_free_r+0x90>
 800502a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502e:	9001      	str	r0, [sp, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f1a1 0404 	sub.w	r4, r1, #4
 8005036:	bfb8      	it	lt
 8005038:	18e4      	addlt	r4, r4, r3
 800503a:	f000 f913 	bl	8005264 <__malloc_lock>
 800503e:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <_free_r+0x94>)
 8005040:	9801      	ldr	r0, [sp, #4]
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	b933      	cbnz	r3, 8005054 <_free_r+0x30>
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005050:	f000 b90e 	b.w	8005270 <__malloc_unlock>
 8005054:	42a3      	cmp	r3, r4
 8005056:	d908      	bls.n	800506a <_free_r+0x46>
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	1961      	adds	r1, r4, r5
 800505c:	428b      	cmp	r3, r1
 800505e:	bf01      	itttt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	1949      	addeq	r1, r1, r5
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	e7ed      	b.n	8005046 <_free_r+0x22>
 800506a:	461a      	mov	r2, r3
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b10b      	cbz	r3, 8005074 <_free_r+0x50>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d9fa      	bls.n	800506a <_free_r+0x46>
 8005074:	6811      	ldr	r1, [r2, #0]
 8005076:	1855      	adds	r5, r2, r1
 8005078:	42a5      	cmp	r5, r4
 800507a:	d10b      	bne.n	8005094 <_free_r+0x70>
 800507c:	6824      	ldr	r4, [r4, #0]
 800507e:	4421      	add	r1, r4
 8005080:	1854      	adds	r4, r2, r1
 8005082:	42a3      	cmp	r3, r4
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	d1e0      	bne.n	800504a <_free_r+0x26>
 8005088:	681c      	ldr	r4, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	6053      	str	r3, [r2, #4]
 800508e:	4421      	add	r1, r4
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	e7da      	b.n	800504a <_free_r+0x26>
 8005094:	d902      	bls.n	800509c <_free_r+0x78>
 8005096:	230c      	movs	r3, #12
 8005098:	6003      	str	r3, [r0, #0]
 800509a:	e7d6      	b.n	800504a <_free_r+0x26>
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	1961      	adds	r1, r4, r5
 80050a0:	428b      	cmp	r3, r1
 80050a2:	bf04      	itt	eq
 80050a4:	6819      	ldreq	r1, [r3, #0]
 80050a6:	685b      	ldreq	r3, [r3, #4]
 80050a8:	6063      	str	r3, [r4, #4]
 80050aa:	bf04      	itt	eq
 80050ac:	1949      	addeq	r1, r1, r5
 80050ae:	6021      	streq	r1, [r4, #0]
 80050b0:	6054      	str	r4, [r2, #4]
 80050b2:	e7ca      	b.n	800504a <_free_r+0x26>
 80050b4:	b003      	add	sp, #12
 80050b6:	bd30      	pop	{r4, r5, pc}
 80050b8:	20000190 	.word	0x20000190

080050bc <sbrk_aligned>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4e0e      	ldr	r6, [pc, #56]	; (80050f8 <sbrk_aligned+0x3c>)
 80050c0:	460c      	mov	r4, r1
 80050c2:	6831      	ldr	r1, [r6, #0]
 80050c4:	4605      	mov	r5, r0
 80050c6:	b911      	cbnz	r1, 80050ce <sbrk_aligned+0x12>
 80050c8:	f000 f8bc 	bl	8005244 <_sbrk_r>
 80050cc:	6030      	str	r0, [r6, #0]
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 f8b7 	bl	8005244 <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d00a      	beq.n	80050f0 <sbrk_aligned+0x34>
 80050da:	1cc4      	adds	r4, r0, #3
 80050dc:	f024 0403 	bic.w	r4, r4, #3
 80050e0:	42a0      	cmp	r0, r4
 80050e2:	d007      	beq.n	80050f4 <sbrk_aligned+0x38>
 80050e4:	1a21      	subs	r1, r4, r0
 80050e6:	4628      	mov	r0, r5
 80050e8:	f000 f8ac 	bl	8005244 <_sbrk_r>
 80050ec:	3001      	adds	r0, #1
 80050ee:	d101      	bne.n	80050f4 <sbrk_aligned+0x38>
 80050f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050f4:	4620      	mov	r0, r4
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	20000194 	.word	0x20000194

080050fc <_malloc_r>:
 80050fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005100:	1ccd      	adds	r5, r1, #3
 8005102:	f025 0503 	bic.w	r5, r5, #3
 8005106:	3508      	adds	r5, #8
 8005108:	2d0c      	cmp	r5, #12
 800510a:	bf38      	it	cc
 800510c:	250c      	movcc	r5, #12
 800510e:	2d00      	cmp	r5, #0
 8005110:	4607      	mov	r7, r0
 8005112:	db01      	blt.n	8005118 <_malloc_r+0x1c>
 8005114:	42a9      	cmp	r1, r5
 8005116:	d905      	bls.n	8005124 <_malloc_r+0x28>
 8005118:	230c      	movs	r3, #12
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	2600      	movs	r6, #0
 800511e:	4630      	mov	r0, r6
 8005120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005124:	4e2e      	ldr	r6, [pc, #184]	; (80051e0 <_malloc_r+0xe4>)
 8005126:	f000 f89d 	bl	8005264 <__malloc_lock>
 800512a:	6833      	ldr	r3, [r6, #0]
 800512c:	461c      	mov	r4, r3
 800512e:	bb34      	cbnz	r4, 800517e <_malloc_r+0x82>
 8005130:	4629      	mov	r1, r5
 8005132:	4638      	mov	r0, r7
 8005134:	f7ff ffc2 	bl	80050bc <sbrk_aligned>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	4604      	mov	r4, r0
 800513c:	d14d      	bne.n	80051da <_malloc_r+0xde>
 800513e:	6834      	ldr	r4, [r6, #0]
 8005140:	4626      	mov	r6, r4
 8005142:	2e00      	cmp	r6, #0
 8005144:	d140      	bne.n	80051c8 <_malloc_r+0xcc>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	4631      	mov	r1, r6
 800514a:	4638      	mov	r0, r7
 800514c:	eb04 0803 	add.w	r8, r4, r3
 8005150:	f000 f878 	bl	8005244 <_sbrk_r>
 8005154:	4580      	cmp	r8, r0
 8005156:	d13a      	bne.n	80051ce <_malloc_r+0xd2>
 8005158:	6821      	ldr	r1, [r4, #0]
 800515a:	3503      	adds	r5, #3
 800515c:	1a6d      	subs	r5, r5, r1
 800515e:	f025 0503 	bic.w	r5, r5, #3
 8005162:	3508      	adds	r5, #8
 8005164:	2d0c      	cmp	r5, #12
 8005166:	bf38      	it	cc
 8005168:	250c      	movcc	r5, #12
 800516a:	4629      	mov	r1, r5
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff ffa5 	bl	80050bc <sbrk_aligned>
 8005172:	3001      	adds	r0, #1
 8005174:	d02b      	beq.n	80051ce <_malloc_r+0xd2>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	442b      	add	r3, r5
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	e00e      	b.n	800519c <_malloc_r+0xa0>
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	1b52      	subs	r2, r2, r5
 8005182:	d41e      	bmi.n	80051c2 <_malloc_r+0xc6>
 8005184:	2a0b      	cmp	r2, #11
 8005186:	d916      	bls.n	80051b6 <_malloc_r+0xba>
 8005188:	1961      	adds	r1, r4, r5
 800518a:	42a3      	cmp	r3, r4
 800518c:	6025      	str	r5, [r4, #0]
 800518e:	bf18      	it	ne
 8005190:	6059      	strne	r1, [r3, #4]
 8005192:	6863      	ldr	r3, [r4, #4]
 8005194:	bf08      	it	eq
 8005196:	6031      	streq	r1, [r6, #0]
 8005198:	5162      	str	r2, [r4, r5]
 800519a:	604b      	str	r3, [r1, #4]
 800519c:	4638      	mov	r0, r7
 800519e:	f104 060b 	add.w	r6, r4, #11
 80051a2:	f000 f865 	bl	8005270 <__malloc_unlock>
 80051a6:	f026 0607 	bic.w	r6, r6, #7
 80051aa:	1d23      	adds	r3, r4, #4
 80051ac:	1af2      	subs	r2, r6, r3
 80051ae:	d0b6      	beq.n	800511e <_malloc_r+0x22>
 80051b0:	1b9b      	subs	r3, r3, r6
 80051b2:	50a3      	str	r3, [r4, r2]
 80051b4:	e7b3      	b.n	800511e <_malloc_r+0x22>
 80051b6:	6862      	ldr	r2, [r4, #4]
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	bf0c      	ite	eq
 80051bc:	6032      	streq	r2, [r6, #0]
 80051be:	605a      	strne	r2, [r3, #4]
 80051c0:	e7ec      	b.n	800519c <_malloc_r+0xa0>
 80051c2:	4623      	mov	r3, r4
 80051c4:	6864      	ldr	r4, [r4, #4]
 80051c6:	e7b2      	b.n	800512e <_malloc_r+0x32>
 80051c8:	4634      	mov	r4, r6
 80051ca:	6876      	ldr	r6, [r6, #4]
 80051cc:	e7b9      	b.n	8005142 <_malloc_r+0x46>
 80051ce:	230c      	movs	r3, #12
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	4638      	mov	r0, r7
 80051d4:	f000 f84c 	bl	8005270 <__malloc_unlock>
 80051d8:	e7a1      	b.n	800511e <_malloc_r+0x22>
 80051da:	6025      	str	r5, [r4, #0]
 80051dc:	e7de      	b.n	800519c <_malloc_r+0xa0>
 80051de:	bf00      	nop
 80051e0:	20000190 	.word	0x20000190

080051e4 <_realloc_r>:
 80051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	4680      	mov	r8, r0
 80051ea:	4614      	mov	r4, r2
 80051ec:	460e      	mov	r6, r1
 80051ee:	b921      	cbnz	r1, 80051fa <_realloc_r+0x16>
 80051f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	4611      	mov	r1, r2
 80051f6:	f7ff bf81 	b.w	80050fc <_malloc_r>
 80051fa:	b92a      	cbnz	r2, 8005208 <_realloc_r+0x24>
 80051fc:	f7ff ff12 	bl	8005024 <_free_r>
 8005200:	4625      	mov	r5, r4
 8005202:	4628      	mov	r0, r5
 8005204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005208:	f000 f838 	bl	800527c <_malloc_usable_size_r>
 800520c:	4284      	cmp	r4, r0
 800520e:	4607      	mov	r7, r0
 8005210:	d802      	bhi.n	8005218 <_realloc_r+0x34>
 8005212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005216:	d812      	bhi.n	800523e <_realloc_r+0x5a>
 8005218:	4621      	mov	r1, r4
 800521a:	4640      	mov	r0, r8
 800521c:	f7ff ff6e 	bl	80050fc <_malloc_r>
 8005220:	4605      	mov	r5, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d0ed      	beq.n	8005202 <_realloc_r+0x1e>
 8005226:	42bc      	cmp	r4, r7
 8005228:	4622      	mov	r2, r4
 800522a:	4631      	mov	r1, r6
 800522c:	bf28      	it	cs
 800522e:	463a      	movcs	r2, r7
 8005230:	f7ff fed0 	bl	8004fd4 <memcpy>
 8005234:	4631      	mov	r1, r6
 8005236:	4640      	mov	r0, r8
 8005238:	f7ff fef4 	bl	8005024 <_free_r>
 800523c:	e7e1      	b.n	8005202 <_realloc_r+0x1e>
 800523e:	4635      	mov	r5, r6
 8005240:	e7df      	b.n	8005202 <_realloc_r+0x1e>
	...

08005244 <_sbrk_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d06      	ldr	r5, [pc, #24]	; (8005260 <_sbrk_r+0x1c>)
 8005248:	2300      	movs	r3, #0
 800524a:	4604      	mov	r4, r0
 800524c:	4608      	mov	r0, r1
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	f7fb fd2c 	bl	8000cac <_sbrk>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_sbrk_r+0x1a>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_sbrk_r+0x1a>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	20000198 	.word	0x20000198

08005264 <__malloc_lock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_lock+0x8>)
 8005266:	f000 b811 	b.w	800528c <__retarget_lock_acquire_recursive>
 800526a:	bf00      	nop
 800526c:	2000019c 	.word	0x2000019c

08005270 <__malloc_unlock>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__malloc_unlock+0x8>)
 8005272:	f000 b80c 	b.w	800528e <__retarget_lock_release_recursive>
 8005276:	bf00      	nop
 8005278:	2000019c 	.word	0x2000019c

0800527c <_malloc_usable_size_r>:
 800527c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005280:	1f18      	subs	r0, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfbc      	itt	lt
 8005286:	580b      	ldrlt	r3, [r1, r0]
 8005288:	18c0      	addlt	r0, r0, r3
 800528a:	4770      	bx	lr

0800528c <__retarget_lock_acquire_recursive>:
 800528c:	4770      	bx	lr

0800528e <__retarget_lock_release_recursive>:
 800528e:	4770      	bx	lr

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
