
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004804  08004804  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800480c  0800480c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08004820  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004820  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff2  00000000  00000000  00031123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00033e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026013  00000000  00000000  00034b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7d0  00000000  00000000  0005ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc13e  00000000  00000000  0006a303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  00166494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080047ac 	.word	0x080047ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080047ac 	.word	0x080047ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t AD_RES = 0, Vamb, DC_Multiplier;
 8000522:	2300      	movs	r3, #0
 8000524:	80fb      	strh	r3, [r7, #6]
	uint16_t lampeggio = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fbbe 	bl	8000caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f839 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f991 	bl	8000858 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000536:	f000 f8f9 	bl	800072c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800053a:	f000 f941 	bl	80007c0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800053e:	f000 f87d 	bl	800063c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000542:	4816      	ldr	r0, [pc, #88]	; (800059c <main+0x80>)
 8000544:	f001 f836 	bl	80015b4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8000548:	2101      	movs	r1, #1
 800054a:	4814      	ldr	r0, [pc, #80]	; (800059c <main+0x80>)
 800054c:	f001 f916 	bl	800177c <HAL_ADC_PollForConversion>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Start ADC Conversion
	          HAL_ADC_Start(&hadc1);
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <main+0x80>)
 8000552:	f001 f82f 	bl	80015b4 <HAL_ADC_Start>
	         // Poll ADC1 Perihperal & TimeOut = 1mSec
	          HAL_ADC_PollForConversion(&hadc1, 1);
 8000556:	2101      	movs	r1, #1
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <main+0x80>)
 800055a:	f001 f90f 	bl	800177c <HAL_ADC_PollForConversion>
	         // Read The ADC Conversion Result & Map It To PWM DutyCycle
	          AD_RES = HAL_ADC_GetValue(&hadc1);
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <main+0x80>)
 8000560:	f001 fa12 	bl	8001988 <HAL_ADC_GetValue>
 8000564:	4603      	mov	r3, r0
 8000566:	80fb      	strh	r3, [r7, #6]
	          lampeggio = (AD_RES<<2);
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	80bb      	strh	r3, [r7, #4]
	          // LED ON
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2110      	movs	r1, #16
 8000572:	480b      	ldr	r0, [pc, #44]	; (80005a0 <main+0x84>)
 8000574:	f002 fa78 	bl	8002a68 <HAL_GPIO_WritePin>
	          HAL_Delay(lampeggio);
 8000578:	88bb      	ldrh	r3, [r7, #4]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fc06 	bl	8000d8c <HAL_Delay>
	          // LED OFF
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x84>)
 8000586:	f002 fa6f 	bl	8002a68 <HAL_GPIO_WritePin>
	          HAL_Delay(lampeggio);
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fbfd 	bl	8000d8c <HAL_Delay>
	          HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fbfa 	bl	8000d8c <HAL_Delay>
	          HAL_ADC_Start(&hadc1);
 8000598:	e7da      	b.n	8000550 <main+0x34>
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028
 80005a0:	48000800 	.word	0x48000800

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2238      	movs	r2, #56	; 0x38
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f8f2 	bl	800479c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f002 fa8a 	bl	8002ae0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005e6:	2355      	movs	r3, #85	; 0x55
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fb24 	bl	8002c48 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000606:	f000 f9a9 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2303      	movs	r3, #3
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fe28 	bl	8003278 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800062e:	f000 f995 	bl	800095c <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f004 f8a1 	bl	800479c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_ADC1_Init+0xe8>)
 800065c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000660:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000664:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000668:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_ADC1_Init+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_ADC1_Init+0xe8>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000684:	2204      	movs	r2, #4
 8000686:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_ADC1_Init+0xe8>)
 800068a:	2200      	movs	r2, #0
 800068c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000696:	2201      	movs	r2, #1
 8000698:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006c6:	f000 fdb3 	bl	8001230 <HAL_ADC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006d0:	f000 f944 	bl	800095c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <MX_ADC1_Init+0xe8>)
 80006e0:	f001 fe28 	bl	8002334 <HAL_ADCEx_MultiModeConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ea:	f000 f937 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_ADC1_Init+0xec>)
 80006f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f2:	2306      	movs	r3, #6
 80006f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fa:	237f      	movs	r3, #127	; 0x7f
 80006fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_ADC1_Init+0xe8>)
 800070c:	f001 f94a 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000716:	f000 f921 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	; 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000028 	.word	0x20000028
 8000728:	08600004 	.word	0x08600004

0800072c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_LPUART1_UART_Init+0x90>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f003 f9ec 	bl	8003b4c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f8ef 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	f003 ff1d 	bl	80045c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800078c:	f000 f8e6 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f003 ff52 	bl	800463c <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800079e:	f000 f8dd 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	f003 fed3 	bl	800454e <HAL_UARTEx_DisableFifoMode>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ae:	f000 f8d5 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000094 	.word	0x20000094
 80007bc:	40008000 	.word	0x40008000

080007c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007c6:	4a23      	ldr	r2, [pc, #140]	; (8000854 <MX_USART1_UART_Init+0x94>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x90>)
 800080a:	f003 f99f 	bl	8003b4c <HAL_UART_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000814:	f000 f8a2 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_USART1_UART_Init+0x90>)
 800081c:	f003 fed0 	bl	80045c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000826:	f000 f899 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x90>)
 800082e:	f003 ff05 	bl	800463c <HAL_UARTEx_SetRxFifoThreshold>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000838:	f000 f890 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_USART1_UART_Init+0x90>)
 800083e:	f003 fe86 	bl	800454e <HAL_UARTEx_DisableFifoMode>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 f888 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000124 	.word	0x20000124
 8000854:	40013800 	.word	0x40013800

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <MX_GPIO_Init+0xfc>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a32      	ldr	r2, [pc, #200]	; (8000954 <MX_GPIO_Init+0xfc>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0320 	and.w	r3, r3, #32
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f002 f8c7 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	481e      	ldr	r0, [pc, #120]	; (8000958 <MX_GPIO_Init+0x100>)
 80008e0:	f002 f8c2 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <MX_GPIO_Init+0x100>)
 80008fc:	f001 ff32 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 ff23 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800091e:	2310      	movs	r3, #16
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_GPIO_Init+0x100>)
 8000936:	f001 ff15 	bl	8002764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2028      	movs	r0, #40	; 0x28
 8000940:	f001 fedb 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f001 fef2 	bl	800272e <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	; 0x58
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800099e:	f002 f943 	bl	8002c28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09e      	sub	sp, #120	; 0x78
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	2254      	movs	r2, #84	; 0x54
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fee3 	bl	800479c <memset>
  if(hadc->Instance==ADC1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009de:	d134      	bne.n	8000a4a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fe5d 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009fc:	f7ff ffae 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_ADC_MspInit+0xa4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_ADC_MspInit+0xa4>)
 8000a06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_ADC_MspInit+0xa4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_ADC_MspInit+0xa4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_ADC_MspInit+0xa4>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_ADC_MspInit+0xa4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a30:	2302      	movs	r3, #2
 8000a32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a34:	2303      	movs	r3, #3
 8000a36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f001 fe8d 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3778      	adds	r7, #120	; 0x78
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a2      	sub	sp, #136	; 0x88
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2254      	movs	r2, #84	; 0x54
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fe8f 	bl	800479c <memset>
  if(huart->Instance==LPUART1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <HAL_UART_MspInit+0x168>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d139      	bne.n	8000afc <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fe0b 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff ff5c 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa4:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa8:	4a46      	ldr	r2, [pc, #280]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ab0:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a40      	ldr	r2, [pc, #256]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f001 fe35 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000afa:	e05c      	b.n	8000bb6 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <HAL_UART_MspInit+0x170>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d157      	bne.n	8000bb6 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fdcc 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8000b1e:	f7ff ff1d 	bl	800095c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x16c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b86:	4619      	mov	r1, r3
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <HAL_UART_MspInit+0x174>)
 8000b8a:	f001 fdeb 	bl	8002764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f001 fdd7 	bl	8002764 <HAL_GPIO_Init>
}
 8000bb6:	bf00      	nop
 8000bb8:	3788      	adds	r7, #136	; 0x88
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40008000 	.word	0x40008000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	48000800 	.word	0x48000800

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f898 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c2c:	f001 ff34 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c82:	f7ff ffd7 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f003 fd65 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fc47 	bl	800051c <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   r0, =_estack
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c9c:	08004814 	.word	0x08004814
  ldr r2, =_sbss
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca4:	200001b8 	.word	0x200001b8

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>

08000caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f001 fd15 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f80e 	bl	8000cdc <HAL_InitTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ccc:	f7ff fe4c 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]

}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_InitTick+0x68>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d022      	beq.n	8000d36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_InitTick+0x68>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fd20 	bl	800274a <HAL_SYSTICK_Config>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10f      	bne.n	8000d30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b0f      	cmp	r3, #15
 8000d14:	d809      	bhi.n	8000d2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d16:	2200      	movs	r2, #0
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d1e:	f001 fcec 	bl	80026fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_InitTick+0x70>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e007      	b.n	8000d3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e004      	b.n	8000d3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e001      	b.n	8000d3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x20>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <HAL_IncTick+0x1c>)
 8000d60:	6013      	str	r3, [r2, #0]
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	200001b4 	.word	0x200001b4
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200001b4 	.word	0x200001b4

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000da4:	d004      	beq.n	8000db0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_Delay+0x40>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db0:	bf00      	nop
 8000db2:	f7ff ffdf 	bl	8000d74 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d8f7      	bhi.n	8000db2 <HAL_Delay+0x26>
  {
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3360      	adds	r3, #96	; 0x60
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LL_ADC_SetOffset+0x44>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	4313      	orrs	r3, r2
 8000e68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	03fff000 	.word	0x03fff000

08000e80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3360      	adds	r3, #96	; 0x60
 8000e8e:	461a      	mov	r2, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3360      	adds	r3, #96	; 0x60
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b087      	sub	sp, #28
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3360      	adds	r3, #96	; 0x60
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f0c:	bf00      	nop
 8000f0e:	371c      	adds	r7, #28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3360      	adds	r3, #96	; 0x60
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	615a      	str	r2, [r3, #20]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b087      	sub	sp, #28
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3330      	adds	r3, #48	; 0x30
 8000faa:	461a      	mov	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	211f      	movs	r1, #31
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	401a      	ands	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0e9b      	lsrs	r3, r3, #26
 8000fd2:	f003 011f 	and.w	r1, r3, #31
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b087      	sub	sp, #28
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3314      	adds	r3, #20
 8001002:	461a      	mov	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	0e5b      	lsrs	r3, r3, #25
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	0d1b      	lsrs	r3, r3, #20
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	2107      	movs	r1, #7
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	0d1b      	lsrs	r3, r3, #20
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	431a      	orrs	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d10a      	bne.n	8001072 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001068:	431a      	orrs	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001070:	e00a      	b.n	8001088 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	407f0000 	.word	0x407f0000

08001098 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 031f 	and.w	r3, r3, #31
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6093      	str	r3, [r2, #8]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001108:	d101      	bne.n	800110e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800112c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001130:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001158:	d101      	bne.n	800115e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800117c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <LL_ADC_IsEnabled+0x18>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <LL_ADC_IsEnabled+0x1a>
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ce:	f043 0204 	orr.w	r2, r3, #4
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d101      	bne.n	80011fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b08      	cmp	r3, #8
 800121a:	d101      	bne.n	8001220 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e1af      	b.n	80015aa <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fba9 	bl	80009b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff3f 	bl	80010f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff25 	bl	80010d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff5a 	bl	8001144 <LL_ADC_IsInternalRegulatorEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d115      	bne.n	80012c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff3e 	bl	800111c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012a0:	4b9f      	ldr	r3, [pc, #636]	; (8001520 <HAL_ADC_Init+0x2f0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	4a9f      	ldr	r2, [pc, #636]	; (8001524 <HAL_ADC_Init+0x2f4>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	3301      	adds	r3, #1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b4:	e002      	b.n	80012bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f9      	bne.n	80012b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff3c 	bl	8001144 <LL_ADC_IsInternalRegulatorEnabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d6:	f043 0210 	orr.w	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff75 	bl	80011e2 <LL_ADC_REG_IsConversionOngoing>
 80012f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 8148 	bne.w	8001598 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8144 	bne.w	8001598 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001318:	f043 0202 	orr.w	r2, r3, #2
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff35 	bl	8001194 <LL_ADC_IsEnabled>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d141      	bne.n	80013b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001338:	d004      	beq.n	8001344 <HAL_ADC_Init+0x114>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7a      	ldr	r2, [pc, #488]	; (8001528 <HAL_ADC_Init+0x2f8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10f      	bne.n	8001364 <HAL_ADC_Init+0x134>
 8001344:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001348:	f7ff ff24 	bl	8001194 <LL_ADC_IsEnabled>
 800134c:	4604      	mov	r4, r0
 800134e:	4876      	ldr	r0, [pc, #472]	; (8001528 <HAL_ADC_Init+0x2f8>)
 8001350:	f7ff ff20 	bl	8001194 <LL_ADC_IsEnabled>
 8001354:	4603      	mov	r3, r0
 8001356:	4323      	orrs	r3, r4
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e012      	b.n	800138a <HAL_ADC_Init+0x15a>
 8001364:	4871      	ldr	r0, [pc, #452]	; (800152c <HAL_ADC_Init+0x2fc>)
 8001366:	f7ff ff15 	bl	8001194 <LL_ADC_IsEnabled>
 800136a:	4604      	mov	r4, r0
 800136c:	4870      	ldr	r0, [pc, #448]	; (8001530 <HAL_ADC_Init+0x300>)
 800136e:	f7ff ff11 	bl	8001194 <LL_ADC_IsEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	431c      	orrs	r4, r3
 8001376:	486f      	ldr	r0, [pc, #444]	; (8001534 <HAL_ADC_Init+0x304>)
 8001378:	f7ff ff0c 	bl	8001194 <LL_ADC_IsEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	4323      	orrs	r3, r4
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d012      	beq.n	80013b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	d004      	beq.n	80013a2 <HAL_ADC_Init+0x172>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a62      	ldr	r2, [pc, #392]	; (8001528 <HAL_ADC_Init+0x2f8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Init+0x176>
 80013a2:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_ADC_Init+0x308>)
 80013a4:	e000      	b.n	80013a8 <HAL_ADC_Init+0x178>
 80013a6:	4a65      	ldr	r2, [pc, #404]	; (800153c <HAL_ADC_Init+0x30c>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f7ff fd0e 	bl	8000dd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7f5b      	ldrb	r3, [r3, #29]
 80013b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d106      	bne.n	80013f0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	3b01      	subs	r3, #1
 80013e8:	045b      	lsls	r3, r3, #17
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d009      	beq.n	800140c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <HAL_ADC_Init+0x310>)
 8001414:	4013      	ands	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	430b      	orrs	r3, r1
 800141e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fed1 	bl	80011e2 <LL_ADC_REG_IsConversionOngoing>
 8001440:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fede 	bl	8001208 <LL_ADC_INJ_IsConversionOngoing>
 800144c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d17f      	bne.n	8001554 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d17c      	bne.n	8001554 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800145e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001466:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	430b      	orrs	r3, r1
 8001482:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d017      	beq.n	80014bc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800149a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6911      	ldr	r1, [r2, #16]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80014ba:	e013      	b.n	80014e4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d12a      	bne.n	8001544 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001504:	4311      	orrs	r1, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001510:	430a      	orrs	r2, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	e019      	b.n	8001554 <HAL_ADC_Init+0x324>
 8001520:	20000000 	.word	0x20000000
 8001524:	053e2d63 	.word	0x053e2d63
 8001528:	50000100 	.word	0x50000100
 800152c:	50000400 	.word	0x50000400
 8001530:	50000500 	.word	0x50000500
 8001534:	50000600 	.word	0x50000600
 8001538:	50000300 	.word	0x50000300
 800153c:	50000700 	.word	0x50000700
 8001540:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10c      	bne.n	8001576 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f023 010f 	bic.w	r1, r3, #15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
 8001574:	e007      	b.n	8001586 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 020f 	bic.w	r2, r2, #15
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	65da      	str	r2, [r3, #92]	; 0x5c
 8001596:	e007      	b.n	80015a8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	f043 0210 	orr.w	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop

080015b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c4:	d004      	beq.n	80015d0 <HAL_ADC_Start+0x1c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a67      	ldr	r2, [pc, #412]	; (8001768 <HAL_ADC_Start+0x1b4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_Start+0x20>
 80015d0:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_ADC_Start+0x1b8>)
 80015d2:	e000      	b.n	80015d6 <HAL_ADC_Start+0x22>
 80015d4:	4b66      	ldr	r3, [pc, #408]	; (8001770 <HAL_ADC_Start+0x1bc>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fd5e 	bl	8001098 <LL_ADC_GetMultimode>
 80015dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fdfd 	bl	80011e2 <LL_ADC_REG_IsConversionOngoing>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 80b4 	bne.w	8001758 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Start+0x4a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e0af      	b.n	800175e <HAL_ADC_Start+0x1aa>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fe0c 	bl	8002224 <ADC_Enable>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 809b 	bne.w	800174e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <HAL_ADC_Start+0x1b4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d009      	beq.n	800164a <HAL_ADC_Start+0x96>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_ADC_Start+0x1c0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d002      	beq.n	8001646 <HAL_ADC_Start+0x92>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	e003      	b.n	800164e <HAL_ADC_Start+0x9a>
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_ADC_Start+0x1c4>)
 8001648:	e001      	b.n	800164e <HAL_ADC_Start+0x9a>
 800164a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4293      	cmp	r3, r2
 8001654:	d002      	beq.n	800165c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001674:	d106      	bne.n	8001684 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f023 0206 	bic.w	r2, r3, #6
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	661a      	str	r2, [r3, #96]	; 0x60
 8001682:	e002      	b.n	800168a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	221c      	movs	r2, #28
 8001690:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_ADC_Start+0x1b4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_ADC_Start+0x104>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <HAL_ADC_Start+0x1c0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d002      	beq.n	80016b4 <HAL_ADC_Start+0x100>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	e003      	b.n	80016bc <HAL_ADC_Start+0x108>
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_ADC_Start+0x1c4>)
 80016b6:	e001      	b.n	80016bc <HAL_ADC_Start+0x108>
 80016b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d008      	beq.n	80016d6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d002      	beq.n	80016d6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b09      	cmp	r3, #9
 80016d4:	d114      	bne.n	8001700 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd5e 	bl	80011ba <LL_ADC_REG_StartConversion>
 80016fe:	e02d      	b.n	800175c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_ADC_Start+0x1b4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d009      	beq.n	800172a <HAL_ADC_Start+0x176>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a16      	ldr	r2, [pc, #88]	; (8001774 <HAL_ADC_Start+0x1c0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d002      	beq.n	8001726 <HAL_ADC_Start+0x172>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e003      	b.n	800172e <HAL_ADC_Start+0x17a>
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_ADC_Start+0x1c4>)
 8001728:	e001      	b.n	800172e <HAL_ADC_Start+0x17a>
 800172a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800172e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00f      	beq.n	800175c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001744:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c
 800174c:	e006      	b.n	800175c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001756:	e001      	b.n	800175c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001758:	2302      	movs	r3, #2
 800175a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800175c:	7dfb      	ldrb	r3, [r7, #23]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	50000100 	.word	0x50000100
 800176c:	50000300 	.word	0x50000300
 8001770:	50000700 	.word	0x50000700
 8001774:	50000500 	.word	0x50000500
 8001778:	50000400 	.word	0x50000400

0800177c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178e:	d004      	beq.n	800179a <HAL_ADC_PollForConversion+0x1e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a77      	ldr	r2, [pc, #476]	; (8001974 <HAL_ADC_PollForConversion+0x1f8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_ADC_PollForConversion+0x22>
 800179a:	4b77      	ldr	r3, [pc, #476]	; (8001978 <HAL_ADC_PollForConversion+0x1fc>)
 800179c:	e000      	b.n	80017a0 <HAL_ADC_PollForConversion+0x24>
 800179e:	4b77      	ldr	r3, [pc, #476]	; (800197c <HAL_ADC_PollForConversion+0x200>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fc79 	bl	8001098 <LL_ADC_GetMultimode>
 80017a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d102      	bne.n	80017b6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017b0:	2308      	movs	r3, #8
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	e037      	b.n	8001826 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d002      	beq.n	80017c8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d111      	bne.n	80017ec <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0c1      	b.n	800196a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017e6:	2304      	movs	r3, #4
 80017e8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017ea:	e01c      	b.n	8001826 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f4:	d004      	beq.n	8001800 <HAL_ADC_PollForConversion+0x84>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5e      	ldr	r2, [pc, #376]	; (8001974 <HAL_ADC_PollForConversion+0x1f8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_ADC_PollForConversion+0x88>
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_ADC_PollForConversion+0x1fc>)
 8001802:	e000      	b.n	8001806 <HAL_ADC_PollForConversion+0x8a>
 8001804:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_ADC_PollForConversion+0x200>)
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc54 	bl	80010b4 <LL_ADC_GetMultiDMATransfer>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	f043 0220 	orr.w	r2, r3, #32
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0a3      	b.n	800196a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001822:	2304      	movs	r3, #4
 8001824:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001826:	f7ff faa5 	bl	8000d74 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800182c:	e021      	b.n	8001872 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001834:	d01d      	beq.n	8001872 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001836:	f7ff fa9d 	bl	8000d74 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d302      	bcc.n	800184c <HAL_ADC_PollForConversion+0xd0>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d112      	bne.n	8001872 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10b      	bne.n	8001872 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	f043 0204 	orr.w	r2, r3, #4
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e07b      	b.n	800196a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0d6      	beq.n	800182e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fb6f 	bl	8000f74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01c      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7f5b      	ldrb	r3, [r3, #29]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d118      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d111      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_ADC_PollForConversion+0x1f8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d009      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x178>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a26      	ldr	r2, [pc, #152]	; (8001980 <HAL_ADC_PollForConversion+0x204>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d002      	beq.n	80018f0 <HAL_ADC_PollForConversion+0x174>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e003      	b.n	80018f8 <HAL_ADC_PollForConversion+0x17c>
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_ADC_PollForConversion+0x208>)
 80018f2:	e001      	b.n	80018f8 <HAL_ADC_PollForConversion+0x17c>
 80018f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d008      	beq.n	8001912 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d002      	beq.n	8001912 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b09      	cmp	r3, #9
 8001910:	d104      	bne.n	800191c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e014      	b.n	8001946 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <HAL_ADC_PollForConversion+0x1f8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_ADC_PollForConversion+0x1be>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <HAL_ADC_PollForConversion+0x204>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d002      	beq.n	8001936 <HAL_ADC_PollForConversion+0x1ba>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	e003      	b.n	800193e <HAL_ADC_PollForConversion+0x1c2>
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_ADC_PollForConversion+0x208>)
 8001938:	e001      	b.n	800193e <HAL_ADC_PollForConversion+0x1c2>
 800193a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800193e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d104      	bne.n	8001956 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2208      	movs	r2, #8
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e008      	b.n	8001968 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	220c      	movs	r2, #12
 8001966:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	50000100 	.word	0x50000100
 8001978:	50000300 	.word	0x50000300
 800197c:	50000700 	.word	0x50000700
 8001980:	50000500 	.word	0x50000500
 8001984:	50000400 	.word	0x50000400

08001988 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0b6      	sub	sp, #216	; 0xd8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x24>
 80019c2:	2302      	movs	r3, #2
 80019c4:	f000 bc13 	b.w	80021ee <HAL_ADC_ConfigChannel+0x84a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fc04 	bl	80011e2 <LL_ADC_REG_IsConversionOngoing>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 83f3 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff fad3 	bl	8000f9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fbf2 	bl	80011e2 <LL_ADC_REG_IsConversionOngoing>
 80019fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fbfe 	bl	8001208 <LL_ADC_INJ_IsConversionOngoing>
 8001a0c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 81d9 	bne.w	8001dcc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 81d4 	bne.w	8001dcc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a2c:	d10f      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff fada 	bl	8000ff2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa81 	bl	8000f4e <LL_ADC_SetSamplingTimeCommonConfig>
 8001a4c:	e00e      	b.n	8001a6c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f7ff fac9 	bl	8000ff2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa71 	bl	8000f4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d022      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6919      	ldr	r1, [r3, #16]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a9e:	f7ff f9cb 	bl	8000e38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6919      	ldr	r1, [r3, #16]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f7ff fa17 	bl	8000ee2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6919      	ldr	r1, [r3, #16]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7f1b      	ldrb	r3, [r3, #28]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d102      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x126>
 8001ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_ConfigChannel+0x128>
 8001aca:	2300      	movs	r3, #0
 8001acc:	461a      	mov	r2, r3
 8001ace:	f7ff fa23 	bl	8000f18 <LL_ADC_SetOffsetSaturation>
 8001ad2:	e17b      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9d0 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10a      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x15c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f9c5 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	f003 021f 	and.w	r2, r3, #31
 8001afe:	e01e      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x19a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f9ba 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	e004      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x1b2>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0e9b      	lsrs	r3, r3, #26
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	e018      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1e4>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	e004      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d106      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f989 	bl	8000eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f96d 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10a      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x222>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f962 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	e01e      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x260>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f957 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e004      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x278>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	e018      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x2aa>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e004      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d106      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f926 	bl	8000eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2102      	movs	r1, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f90a 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x2e8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f8ff 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	e01e      	b.n	8001cca <HAL_ADC_ConfigChannel+0x326>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2102      	movs	r1, #2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f8f4 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e004      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x33e>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	e016      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x36c>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d02:	2320      	movs	r3, #32
 8001d04:	e004      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d106      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f8c5 	bl	8000eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2103      	movs	r1, #3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f8a9 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x3aa>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f89e 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	e017      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x3da>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2103      	movs	r1, #3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f893 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d68:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x3f2>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	e011      	b.n	8001dba <HAL_ADC_ConfigChannel+0x416>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001da6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001dae:	2320      	movs	r3, #32
 8001db0:	e003      	b.n	8001dba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d106      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f870 	bl	8000eac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f9df 	bl	8001194 <LL_ADC_IsEnabled>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 813d 	bne.w	8002058 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f7ff f92c 	bl	8001048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4aa2      	ldr	r2, [pc, #648]	; (8002080 <HAL_ADC_ConfigChannel+0x6dc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	f040 812e 	bne.w	8002058 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10b      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x480>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e019      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x4b4>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e003      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	bf94      	ite	ls
 8001e52:	2301      	movls	r3, #1
 8001e54:	2300      	movhi	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d079      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x4d4>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0e9b      	lsrs	r3, r3, #26
 8001e6e:	3301      	adds	r3, #1
 8001e70:	069b      	lsls	r3, r3, #26
 8001e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e76:	e015      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x500>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e88:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e003      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	069b      	lsls	r3, r3, #26
 8001ea0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x520>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	e017      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x550>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e003      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	ea42 0103 	orr.w	r1, r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x576>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	051b      	lsls	r3, r3, #20
 8001f18:	e018      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x5a8>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e003      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	e07e      	b.n	800204e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x5c8>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	3301      	adds	r3, #1
 8001f64:	069b      	lsls	r3, r3, #26
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f6a:	e015      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x5f4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e003      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x614>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	e017      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x644>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	61fb      	str	r3, [r7, #28]
  return result;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x670>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	3b1e      	subs	r3, #30
 800200c:	051b      	lsls	r3, r3, #20
 800200e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002012:	e01b      	b.n	800204c <HAL_ADC_ConfigChannel+0x6a8>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	613b      	str	r3, [r7, #16]
  return result;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e003      	b.n	8002038 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	051b      	lsls	r3, r3, #20
 8002048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204c:	430b      	orrs	r3, r1
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe ffcd 	bl	8000ff2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_ADC_ConfigChannel+0x6e0>)
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80be 	beq.w	80021e2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206e:	d004      	beq.n	800207a <HAL_ADC_ConfigChannel+0x6d6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_ADC_ConfigChannel+0x6e4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x6ec>
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_ADC_ConfigChannel+0x6e8>)
 800207c:	e009      	b.n	8002092 <HAL_ADC_ConfigChannel+0x6ee>
 800207e:	bf00      	nop
 8002080:	407f0000 	.word	0x407f0000
 8002084:	80080000 	.word	0x80080000
 8002088:	50000100 	.word	0x50000100
 800208c:	50000300 	.word	0x50000300
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_ADC_ConfigChannel+0x854>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fec2 	bl	8000e1c <LL_ADC_GetCommonPathInternalCh>
 8002098:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_ADC_ConfigChannel+0x858>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x70c>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a55      	ldr	r2, [pc, #340]	; (8002200 <HAL_ADC_ConfigChannel+0x85c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d13a      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d134      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c4:	d005      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x72e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_ADC_ConfigChannel+0x860>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 8085 	bne.w	80021dc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020da:	d004      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x742>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a49      	ldr	r2, [pc, #292]	; (8002208 <HAL_ADC_ConfigChannel+0x864>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x746>
 80020e6:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_ADC_ConfigChannel+0x868>)
 80020e8:	e000      	b.n	80020ec <HAL_ADC_ConfigChannel+0x748>
 80020ea:	4a43      	ldr	r2, [pc, #268]	; (80021f8 <HAL_ADC_ConfigChannel+0x854>)
 80020ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f7fe fe7d 	bl	8000df6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020fc:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_ADC_ConfigChannel+0x86c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	4a44      	ldr	r2, [pc, #272]	; (8002214 <HAL_ADC_ConfigChannel+0x870>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002116:	e002      	b.n	800211e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3b01      	subs	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f9      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002124:	e05a      	b.n	80021dc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3b      	ldr	r2, [pc, #236]	; (8002218 <HAL_ADC_ConfigChannel+0x874>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d125      	bne.n	800217c <HAL_ADC_ConfigChannel+0x7d8>
 8002130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d11f      	bne.n	800217c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_ADC_ConfigChannel+0x864>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d104      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x7ac>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_ADC_ConfigChannel+0x878>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d047      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002158:	d004      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x7c0>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_ADC_ConfigChannel+0x864>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x7c4>
 8002164:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_ADC_ConfigChannel+0x868>)
 8002166:	e000      	b.n	800216a <HAL_ADC_ConfigChannel+0x7c6>
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <HAL_ADC_ConfigChannel+0x854>)
 800216a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7fe fe3e 	bl	8000df6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800217a:	e031      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <HAL_ADC_ConfigChannel+0x87c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12d      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d127      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_ADC_ConfigChannel+0x864>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x80c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_ADC_ConfigChannel+0x864>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x810>
 80021b0:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_ADC_ConfigChannel+0x868>)
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x812>
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_ADC_ConfigChannel+0x854>)
 80021b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f7fe fe18 	bl	8000df6 <LL_ADC_SetCommonPathInternalCh>
 80021c6:	e00c      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f043 0220 	orr.w	r2, r3, #32
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021da:	e002      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80021ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	37d8      	adds	r7, #216	; 0xd8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	50000700 	.word	0x50000700
 80021fc:	c3210000 	.word	0xc3210000
 8002200:	90c00010 	.word	0x90c00010
 8002204:	50000600 	.word	0x50000600
 8002208:	50000100 	.word	0x50000100
 800220c:	50000300 	.word	0x50000300
 8002210:	20000000 	.word	0x20000000
 8002214:	053e2d63 	.word	0x053e2d63
 8002218:	c7520000 	.word	0xc7520000
 800221c:	50000500 	.word	0x50000500
 8002220:	cb840000 	.word	0xcb840000

08002224 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe ffaf 	bl	8001194 <LL_ADC_IsEnabled>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d14d      	bne.n	80022d8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <ADC_Enable+0xc0>)
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e039      	b.n	80022da <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe ff7e 	bl	800116c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002270:	f7fe fd80 	bl	8000d74 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002276:	e028      	b.n	80022ca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ff89 	bl	8001194 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe ff6d 	bl	800116c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002292:	f7fe fd6f 	bl	8000d74 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d914      	bls.n	80022ca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d00d      	beq.n	80022ca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e007      	b.n	80022da <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d1cf      	bne.n	8002278 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	8000003f 	.word	0x8000003f

080022e8 <LL_ADC_IsEnabled>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_IsConversionOngoing>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d101      	bne.n	8002326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b0a1      	sub	sp, #132	; 0x84
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0e7      	b.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800235a:	2300      	movs	r3, #0
 800235c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800235e:	2300      	movs	r3, #0
 8002360:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236a:	d102      	bne.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	e009      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d102      	bne.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800237c:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	e001      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0be      	b.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ffb1 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 80023ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ffab 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 80a0 	bne.w	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 809c 	bne.w	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d0:	d004      	beq.n	80023dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a55      	ldr	r2, [pc, #340]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023dc:	4b56      	ldr	r3, [pc, #344]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80023de:	e000      	b.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023e0:	4b56      	ldr	r3, [pc, #344]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80023e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04b      	beq.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023fe:	035b      	lsls	r3, r3, #13
 8002400:	430b      	orrs	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002406:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002410:	d004      	beq.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10f      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800241c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002420:	f7ff ff62 	bl	80022e8 <LL_ADC_IsEnabled>
 8002424:	4604      	mov	r4, r0
 8002426:	4841      	ldr	r0, [pc, #260]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002428:	f7ff ff5e 	bl	80022e8 <LL_ADC_IsEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	4323      	orrs	r3, r4
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e012      	b.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800243c:	483c      	ldr	r0, [pc, #240]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800243e:	f7ff ff53 	bl	80022e8 <LL_ADC_IsEnabled>
 8002442:	4604      	mov	r4, r0
 8002444:	483b      	ldr	r0, [pc, #236]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002446:	f7ff ff4f 	bl	80022e8 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	431c      	orrs	r4, r3
 800244e:	483c      	ldr	r0, [pc, #240]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002450:	f7ff ff4a 	bl	80022e8 <LL_ADC_IsEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	4323      	orrs	r3, r4
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d056      	beq.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800246e:	f023 030f 	bic.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6892      	ldr	r2, [r2, #8]
 800247a:	430a      	orrs	r2, r1
 800247c:	431a      	orrs	r2, r3
 800247e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002480:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002482:	e047      	b.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800248c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002498:	d004      	beq.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a23      	ldr	r2, [pc, #140]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10f      	bne.n	80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80024a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024a8:	f7ff ff1e 	bl	80022e8 <LL_ADC_IsEnabled>
 80024ac:	4604      	mov	r4, r0
 80024ae:	481f      	ldr	r0, [pc, #124]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024b0:	f7ff ff1a 	bl	80022e8 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4323      	orrs	r3, r4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e012      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80024c4:	481a      	ldr	r0, [pc, #104]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024c6:	f7ff ff0f 	bl	80022e8 <LL_ADC_IsEnabled>
 80024ca:	4604      	mov	r4, r0
 80024cc:	4819      	ldr	r0, [pc, #100]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024ce:	f7ff ff0b 	bl	80022e8 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	431c      	orrs	r4, r3
 80024d6:	481a      	ldr	r0, [pc, #104]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024d8:	f7ff ff06 	bl	80022e8 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	4323      	orrs	r3, r4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024f6:	f023 030f 	bic.w	r3, r3, #15
 80024fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024fe:	e009      	b.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002512:	e000      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002514:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800251e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002522:	4618      	mov	r0, r3
 8002524:	3784      	adds	r7, #132	; 0x84
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop
 800252c:	50000100 	.word	0x50000100
 8002530:	50000400 	.word	0x50000400
 8002534:	50000500 	.word	0x50000500
 8002538:	50000300 	.word	0x50000300
 800253c:	50000700 	.word	0x50000700
 8002540:	50000600 	.word	0x50000600

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff40 	bl	800258c <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff90 	bl	8002638 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5f 	bl	80025e4 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff33 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa4 	bl	80026a0 <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002772:	e15a      	b.n	8002a2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 814c 	beq.w	8002a24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d005      	beq.n	80027a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d130      	bne.n	8002806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027da:	2201      	movs	r2, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0201 	and.w	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d017      	beq.n	8002842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d123      	bne.n	8002896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80a6 	beq.w	8002a24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d8:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_GPIO_Init+0x2e4>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	4a5a      	ldr	r2, [pc, #360]	; (8002a48 <HAL_GPIO_Init+0x2e4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6613      	str	r3, [r2, #96]	; 0x60
 80028e4:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_GPIO_Init+0x2e4>)
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f0:	4a56      	ldr	r2, [pc, #344]	; (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800291a:	d01f      	beq.n	800295c <HAL_GPIO_Init+0x1f8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a4c      	ldr	r2, [pc, #304]	; (8002a50 <HAL_GPIO_Init+0x2ec>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d019      	beq.n	8002958 <HAL_GPIO_Init+0x1f4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a4b      	ldr	r2, [pc, #300]	; (8002a54 <HAL_GPIO_Init+0x2f0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <HAL_GPIO_Init+0x1f0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4a      	ldr	r2, [pc, #296]	; (8002a58 <HAL_GPIO_Init+0x2f4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_GPIO_Init+0x1ec>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a49      	ldr	r2, [pc, #292]	; (8002a5c <HAL_GPIO_Init+0x2f8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0x1e8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a48      	ldr	r2, [pc, #288]	; (8002a60 <HAL_GPIO_Init+0x2fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_GPIO_Init+0x1e4>
 8002944:	2305      	movs	r3, #5
 8002946:	e00a      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002948:	2306      	movs	r3, #6
 800294a:	e008      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 800294c:	2304      	movs	r3, #4
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002950:	2303      	movs	r3, #3
 8002952:	e004      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 800295c:	2300      	movs	r3, #0
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296e:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_GPIO_Init+0x2e8>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_GPIO_Init+0x300>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ca:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_GPIO_Init+0x300>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f ae9d 	bne.w	8002774 <HAL_GPIO_Init+0x10>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000c00 	.word	0x48000c00
 8002a5c:	48001000 	.word	0x48001000
 8002a60:	48001400 	.word	0x48001400
 8002a64:	40010400 	.word	0x40010400

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f806 	bl	8002ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d141      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aee:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d131      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002afc:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b14:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2232      	movs	r2, #50	; 0x32
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b32:	e002      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b46:	d102      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d158      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e057      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b66:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b70:	e04d      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d141      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d131      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2232      	movs	r2, #50	; 0x32
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9b      	lsrs	r3, r3, #18
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbe:	e002      	b.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d102      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f2      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d112      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e011      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bfc:	e007      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	20000000 	.word	0x20000000
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c36:	6093      	str	r3, [r2, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40007000 	.word	0x40007000

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e306      	b.n	8003268 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d075      	beq.n	8002d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4b97      	ldr	r3, [pc, #604]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c70:	4b94      	ldr	r3, [pc, #592]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3e>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_OscConfig+0x44>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b8d      	ldr	r3, [pc, #564]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x108>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d157      	bne.n	8002d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e2e1      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x74>
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a84      	ldr	r2, [pc, #528]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7e      	ldr	r2, [pc, #504]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7b      	ldr	r2, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002ce0:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f838 	bl	8000d74 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe f834 	bl	8000d74 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e2a6      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0xc0>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe f824 	bl	8000d74 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe f820 	bl	8000d74 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e292      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d42:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0xe8>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d075      	beq.n	8002e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d68:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	d102      	bne.n	8002d7e <HAL_RCC_OscConfig+0x136>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_OscConfig+0x13c>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11f      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_OscConfig+0x154>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e265      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	4946      	ldr	r1, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002db0:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd ff91 	bl	8000cdc <HAL_InitTick>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d043      	beq.n	8002e48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e251      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3c      	ldr	r2, [pc, #240]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fd ffcc 	bl	8000d74 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fd ffc8 	bl	8000d74 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e23a      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	492d      	ldr	r1, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
 8002e12:	e01a      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fd ffa8 	bl	8000d74 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fd ffa4 	bl	8000d74 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e216      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e3a:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1e0>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d041      	beq.n	8002eda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fd ff81 	bl	8000d74 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd ff7d 	bl	8000d74 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1ef      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ef      	beq.n	8002e76 <HAL_RCC_OscConfig+0x22e>
 8002e96:	e020      	b.n	8002eda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fd ff64 	bl	8000d74 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eae:	e00d      	b.n	8002ecc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fd ff60 	bl	8000d74 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d906      	bls.n	8002ecc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1d2      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ecc:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ea      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80a6 	beq.w	8003034 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eec:	4b84      	ldr	r3, [pc, #528]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_OscConfig+0x2b4>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x2b6>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b7f      	ldr	r3, [pc, #508]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	4a7e      	ldr	r2, [pc, #504]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f0e:	4b7c      	ldr	r3, [pc, #496]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1e:	4b79      	ldr	r3, [pc, #484]	; (8003104 <HAL_RCC_OscConfig+0x4bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_RCC_OscConfig+0x4bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a75      	ldr	r2, [pc, #468]	; (8003104 <HAL_RCC_OscConfig+0x4bc>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fd ff1d 	bl	8000d74 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fd ff19 	bl	8000d74 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e18b      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f50:	4b6c      	ldr	r3, [pc, #432]	; (8003104 <HAL_RCC_OscConfig+0x4bc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_RCC_OscConfig+0x32e>
 8002f64:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f74:	e024      	b.n	8002fc0 <HAL_RCC_OscConfig+0x378>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d110      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x358>
 8002f7e:	4b60      	ldr	r3, [pc, #384]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	4a5e      	ldr	r2, [pc, #376]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f043 0304 	orr.w	r3, r3, #4
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	4a5a      	ldr	r2, [pc, #360]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f9e:	e00f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x378>
 8002fa0:	4b57      	ldr	r3, [pc, #348]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d016      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fd fed4 	bl	8000d74 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fd fed0 	bl	8000d74 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e140      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe6:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ed      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x388>
 8002ff4:	e015      	b.n	8003022 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fd febd 	bl	8000d74 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fd feb9 	bl	8000d74 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e129      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003014:	4b3a      	ldr	r3, [pc, #232]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ed      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b35      	ldr	r3, [pc, #212]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a34      	ldr	r2, [pc, #208]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03c      	beq.n	80030ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01c      	beq.n	8003082 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 800304a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fd fe8c 	bl	8000d74 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003060:	f7fd fe88 	bl	8000d74 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0fa      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ef      	beq.n	8003060 <HAL_RCC_OscConfig+0x418>
 8003080:	e01b      	b.n	80030ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003082:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 8003084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fd fe6f 	bl	8000d74 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800309a:	f7fd fe6b 	bl	8000d74 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0dd      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ef      	bne.n	800309a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80d1 	beq.w	8003266 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	f000 808b 	beq.w	80031e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d15e      	bne.n	8003198 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd fe45 	bl	8000d74 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ec:	e00c      	b.n	8003108 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fe41 	bl	8000d74 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d905      	bls.n	8003108 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0b3      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ec      	bne.n	80030ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003114:	4b56      	ldr	r3, [pc, #344]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_RCC_OscConfig+0x62c>)
 800311a:	4013      	ands	r3, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6a11      	ldr	r1, [r2, #32]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003124:	3a01      	subs	r2, #1
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800312e:	0212      	lsls	r2, r2, #8
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003136:	0852      	lsrs	r2, r2, #1
 8003138:	3a01      	subs	r2, #1
 800313a:	0552      	lsls	r2, r2, #21
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003142:	0852      	lsrs	r2, r2, #1
 8003144:	3a01      	subs	r2, #1
 8003146:	0652      	lsls	r2, r2, #25
 8003148:	4311      	orrs	r1, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800314e:	06d2      	lsls	r2, r2, #27
 8003150:	430a      	orrs	r2, r1
 8003152:	4947      	ldr	r1, [pc, #284]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 8003154:	4313      	orrs	r3, r2
 8003156:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b45      	ldr	r3, [pc, #276]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a44      	ldr	r2, [pc, #272]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a41      	ldr	r2, [pc, #260]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fd fe00 	bl	8000d74 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd fdfc 	bl	8000d74 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e06e      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x530>
 8003196:	e066      	b.n	8003266 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a34      	ldr	r2, [pc, #208]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031a4:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a31      	ldr	r2, [pc, #196]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031b0:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 80031b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fdd8 	bl	8000d74 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fd fdd4 	bl	8000d74 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e046      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031da:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x580>
 80031e6:	e03e      	b.n	8003266 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e039      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0203 	and.w	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	429a      	cmp	r2, r3
 8003206:	d12c      	bne.n	8003262 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	3b01      	subs	r3, #1
 8003214:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d123      	bne.n	8003262 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11b      	bne.n	8003262 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d113      	bne.n	8003262 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	3b01      	subs	r3, #1
 8003248:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d109      	bne.n	8003262 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	3b01      	subs	r3, #1
 800325c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	019f800c 	.word	0x019f800c

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e11e      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b8e      	ldr	r3, [pc, #568]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	498c      	ldr	r1, [pc, #560]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b8a      	ldr	r3, [pc, #552]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e106      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d073      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d129      	bne.n	8003328 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d4:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0f4      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032e4:	f000 f99e 	bl	8003624 <RCC_GetSysClockFreqFromPLLSource>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4a7c      	ldr	r2, [pc, #496]	; (80034e0 <HAL_RCC_ClockConfig+0x268>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d93f      	bls.n	8003372 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003306:	2b00      	cmp	r3, #0
 8003308:	d033      	beq.n	8003372 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12f      	bne.n	8003372 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003312:	4b72      	ldr	r3, [pc, #456]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331a:	4a70      	ldr	r2, [pc, #448]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 800331c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003320:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e024      	b.n	8003372 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0c6      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0be      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003350:	f000 f8ce 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 8003354:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4a61      	ldr	r2, [pc, #388]	; (80034e0 <HAL_RCC_ClockConfig+0x268>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d909      	bls.n	8003372 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800335e:	4b5f      	ldr	r3, [pc, #380]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003366:	4a5d      	ldr	r2, [pc, #372]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003372:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 0203 	bic.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4957      	ldr	r1, [pc, #348]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003380:	4313      	orrs	r3, r2
 8003382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003384:	f7fd fcf6 	bl	8000d74 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fd fcf2 	bl	8000d74 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e095      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 020c 	and.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1eb      	bne.n	800338c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a42      	ldr	r2, [pc, #264]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033e4:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033ec:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80033ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4936      	ldr	r1, [pc, #216]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
 8003406:	e008      	b.n	800341a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d105      	bne.n	800341a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003418:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d21d      	bcs.n	8003464 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 020f 	bic.w	r2, r3, #15
 8003430:	4929      	ldr	r1, [pc, #164]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003438:	f7fd fc9c 	bl	8000d74 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fd fc98 	bl	8000d74 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e03b      	b.n	80034ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d1ed      	bne.n	8003440 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4917      	ldr	r1, [pc, #92]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	490f      	ldr	r1, [pc, #60]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034a2:	f000 f825 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCC_ClockConfig+0x264>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	490c      	ldr	r1, [pc, #48]	; (80034e4 <HAL_RCC_ClockConfig+0x26c>)
 80034b4:	5ccb      	ldrb	r3, [r1, r3]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x270>)
 80034c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x274>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fc08 	bl	8000cdc <HAL_InitTick>
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40021000 	.word	0x40021000
 80034e0:	04c4b400 	.word	0x04c4b400
 80034e4:	080047c4 	.word	0x080047c4
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034f6:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d102      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e047      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d102      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e03e      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d136      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3301      	adds	r3, #1
 800353c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d10c      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003544:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800354e:	68d2      	ldr	r2, [r2, #12]
 8003550:	0a12      	lsrs	r2, r2, #8
 8003552:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	617b      	str	r3, [r7, #20]
      break;
 800355c:	e00c      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4a10      	ldr	r2, [pc, #64]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003568:	68d2      	ldr	r2, [r2, #12]
 800356a:	0a12      	lsrs	r2, r2, #8
 800356c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
      break;
 8003576:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0e5b      	lsrs	r3, r3, #25
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e001      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003598:	693b      	ldr	r3, [r7, #16]
}
 800359a:	4618      	mov	r0, r3
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	016e3600 	.word	0x016e3600

080035b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4904      	ldr	r1, [pc, #16]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	080047d4 	.word	0x080047d4

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035fc:	f7ff ffda 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0adb      	lsrs	r3, r3, #11
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4904      	ldr	r1, [pc, #16]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	080047d4 	.word	0x080047d4

08003624 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3301      	adds	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d10c      	bne.n	8003662 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003652:	68d2      	ldr	r2, [r2, #12]
 8003654:	0a12      	lsrs	r2, r2, #8
 8003656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
    break;
 8003660:	e00c      	b.n	800367c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	0a12      	lsrs	r2, r2, #8
 8003670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
    break;
 800367a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0e5b      	lsrs	r3, r3, #25
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003696:	687b      	ldr	r3, [r7, #4]
}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40021000 	.word	0x40021000
 80036a8:	016e3600 	.word	0x016e3600
 80036ac:	00f42400 	.word	0x00f42400

080036b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036bc:	2300      	movs	r3, #0
 80036be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8098 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	4a3f      	ldr	r2, [pc, #252]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fa:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003706:	f7fd fb35 	bl	8000d74 <HAL_GetTick>
 800370a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370c:	e009      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fd fb31 	bl	8000d74 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d902      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	74fb      	strb	r3, [r7, #19]
        break;
 8003720:	e005      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003722:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ef      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d159      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01e      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	429a      	cmp	r2, r3
 800374e:	d019      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376c:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fd faf1 	bl	8000d74 <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003794:	e00b      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd faed 	bl	8000d74 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d902      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	74fb      	strb	r3, [r7, #19]
            break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ec      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037d8:	e008      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	74bb      	strb	r3, [r7, #18]
 80037de:	e005      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ec:	7c7b      	ldrb	r3, [r7, #17]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f2:	4ba7      	ldr	r3, [pc, #668]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	4aa6      	ldr	r2, [pc, #664]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380a:	4ba1      	ldr	r3, [pc, #644]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f023 0203 	bic.w	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	499d      	ldr	r1, [pc, #628]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382c:	4b98      	ldr	r3, [pc, #608]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 020c 	bic.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4995      	ldr	r1, [pc, #596]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800384e:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	498c      	ldr	r1, [pc, #560]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003870:	4b87      	ldr	r3, [pc, #540]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	4984      	ldr	r1, [pc, #528]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003892:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	497b      	ldr	r1, [pc, #492]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b4:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	4973      	ldr	r1, [pc, #460]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d6:	4b6e      	ldr	r3, [pc, #440]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	496a      	ldr	r1, [pc, #424]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f8:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4962      	ldr	r1, [pc, #392]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800391a:	4b5d      	ldr	r3, [pc, #372]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	4959      	ldr	r1, [pc, #356]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800393c:	4b54      	ldr	r3, [pc, #336]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	4951      	ldr	r1, [pc, #324]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800395e:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4948      	ldr	r1, [pc, #288]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003980:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4940      	ldr	r1, [pc, #256]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039b8:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	4932      	ldr	r1, [pc, #200]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d6:	d105      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d8:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4924      	ldr	r1, [pc, #144]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a10:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a46:	d105      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d019      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4908      	ldr	r1, [pc, #32]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7e:	d109      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a02      	ldr	r2, [pc, #8]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8a:	60d3      	str	r3, [r2, #12]
 8003a8c:	e002      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	4926      	ldr	r1, [pc, #152]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003abe:	d105      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a20      	ldr	r2, [pc, #128]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d015      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae6:	4918      	ldr	r1, [pc, #96]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d105      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000

08003b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e042      	b.n	8003be4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fc ff71 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2224      	movs	r2, #36	; 0x24
 8003b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f82c 	bl	8003bec <UART_SetConfig>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e022      	b.n	8003be4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fb1c 	bl	80041e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fba3 	bl	8004328 <UART_CheckIdleState>
 8003be2:	4603      	mov	r3, r0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b08c      	sub	sp, #48	; 0x30
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4baa      	ldr	r3, [pc, #680]	; (8003ec4 <UART_SetConfig+0x2d8>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a9f      	ldr	r2, [pc, #636]	; (8003ec8 <UART_SetConfig+0x2dc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	4313      	orrs	r3, r2
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f023 010f 	bic.w	r1, r3, #15
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a90      	ldr	r2, [pc, #576]	; (8003ecc <UART_SetConfig+0x2e0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d125      	bne.n	8003cdc <UART_SetConfig+0xf0>
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d81a      	bhi.n	8003cd4 <UART_SetConfig+0xe8>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0xb8>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc5 	.word	0x08003cc5
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003ccd 	.word	0x08003ccd
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e116      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	e112      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cca:	e10e      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	e10a      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cda:	e106      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a7c      	ldr	r2, [pc, #496]	; (8003ed4 <UART_SetConfig+0x2e8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d138      	bne.n	8003d58 <UART_SetConfig+0x16c>
 8003ce6:	4b7a      	ldr	r3, [pc, #488]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d82d      	bhi.n	8003d50 <UART_SetConfig+0x164>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0x110>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d51 	.word	0x08003d51
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d51 	.word	0x08003d51
 8003d18:	08003d51 	.word	0x08003d51
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	08003d51 	.word	0x08003d51
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d51 	.word	0x08003d51
 8003d2c:	08003d49 	.word	0x08003d49
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d36:	e0d8      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	e0d4      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d40:	2304      	movs	r3, #4
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d46:	e0d0      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	e0cc      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d50:	2310      	movs	r3, #16
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d56:	e0c8      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <UART_SetConfig+0x2ec>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d125      	bne.n	8003dae <UART_SetConfig+0x1c2>
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d6c:	2b30      	cmp	r3, #48	; 0x30
 8003d6e:	d016      	beq.n	8003d9e <UART_SetConfig+0x1b2>
 8003d70:	2b30      	cmp	r3, #48	; 0x30
 8003d72:	d818      	bhi.n	8003da6 <UART_SetConfig+0x1ba>
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d00a      	beq.n	8003d8e <UART_SetConfig+0x1a2>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d814      	bhi.n	8003da6 <UART_SetConfig+0x1ba>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <UART_SetConfig+0x19a>
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d008      	beq.n	8003d96 <UART_SetConfig+0x1aa>
 8003d84:	e00f      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8c:	e0ad      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d94:	e0a9      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d96:	2304      	movs	r3, #4
 8003d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9c:	e0a5      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da4:	e0a1      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003da6:	2310      	movs	r3, #16
 8003da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dac:	e09d      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <UART_SetConfig+0x2f0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d125      	bne.n	8003e04 <UART_SetConfig+0x218>
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc4:	d016      	beq.n	8003df4 <UART_SetConfig+0x208>
 8003dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc8:	d818      	bhi.n	8003dfc <UART_SetConfig+0x210>
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d00a      	beq.n	8003de4 <UART_SetConfig+0x1f8>
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d814      	bhi.n	8003dfc <UART_SetConfig+0x210>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <UART_SetConfig+0x1f0>
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d008      	beq.n	8003dec <UART_SetConfig+0x200>
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x210>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e082      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e07e      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df2:	e07a      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfa:	e076      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e02:	e072      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a35      	ldr	r2, [pc, #212]	; (8003ee0 <UART_SetConfig+0x2f4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d12a      	bne.n	8003e64 <UART_SetConfig+0x278>
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1c:	d01a      	beq.n	8003e54 <UART_SetConfig+0x268>
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d81b      	bhi.n	8003e5c <UART_SetConfig+0x270>
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d00c      	beq.n	8003e44 <UART_SetConfig+0x258>
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d815      	bhi.n	8003e5c <UART_SetConfig+0x270>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <UART_SetConfig+0x250>
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d008      	beq.n	8003e4c <UART_SetConfig+0x260>
 8003e3a:	e00f      	b.n	8003e5c <UART_SetConfig+0x270>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e42:	e052      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003e44:	2302      	movs	r3, #2
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4a:	e04e      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e52:	e04a      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003e54:	2308      	movs	r3, #8
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5a:	e046      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e62:	e042      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <UART_SetConfig+0x2dc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d13a      	bne.n	8003ee4 <UART_SetConfig+0x2f8>
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <UART_SetConfig+0x2e4>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7c:	d01a      	beq.n	8003eb4 <UART_SetConfig+0x2c8>
 8003e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0x2d0>
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e88:	d00c      	beq.n	8003ea4 <UART_SetConfig+0x2b8>
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d815      	bhi.n	8003ebc <UART_SetConfig+0x2d0>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <UART_SetConfig+0x2b0>
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d008      	beq.n	8003eac <UART_SetConfig+0x2c0>
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x2d0>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	e022      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	e01e      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	e01a      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eba:	e016      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	e012      	b.n	8003eea <UART_SetConfig+0x2fe>
 8003ec4:	cfff69f3 	.word	0xcfff69f3
 8003ec8:	40008000 	.word	0x40008000
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40004400 	.word	0x40004400
 8003ed8:	40004800 	.word	0x40004800
 8003edc:	40004c00 	.word	0x40004c00
 8003ee0:	40005000 	.word	0x40005000
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4aae      	ldr	r2, [pc, #696]	; (80041a8 <UART_SetConfig+0x5bc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	f040 8097 	bne.w	8004024 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d823      	bhi.n	8003f46 <UART_SetConfig+0x35a>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x318>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f47 	.word	0x08003f47
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f37 	.word	0x08003f37
 8003f18:	08003f47 	.word	0x08003f47
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f47 	.word	0x08003f47
 8003f24:	08003f3f 	.word	0x08003f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7ff fb50 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f2e:	e010      	b.n	8003f52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f30:	4b9e      	ldr	r3, [pc, #632]	; (80041ac <UART_SetConfig+0x5c0>)
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f34:	e00d      	b.n	8003f52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f36:	f7ff fadb 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f3c:	e009      	b.n	8003f52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f44:	e005      	b.n	8003f52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8130 	beq.w	80041ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	4a94      	ldr	r2, [pc, #592]	; (80041b0 <UART_SetConfig+0x5c4>)
 8003f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d305      	bcc.n	8003f8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d903      	bls.n	8003f92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f90:	e113      	b.n	80041ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2200      	movs	r2, #0
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	60fa      	str	r2, [r7, #12]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	4a84      	ldr	r2, [pc, #528]	; (80041b0 <UART_SetConfig+0x5c4>)
 8003fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fb4:	f7fc f930 	bl	8000218 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	020b      	lsls	r3, r1, #8
 8003fca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fce:	0202      	lsls	r2, r0, #8
 8003fd0:	6979      	ldr	r1, [r7, #20]
 8003fd2:	6849      	ldr	r1, [r1, #4]
 8003fd4:	0849      	lsrs	r1, r1, #1
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	4605      	mov	r5, r0
 8003fdc:	eb12 0804 	adds.w	r8, r2, r4
 8003fe0:	eb43 0905 	adc.w	r9, r3, r5
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	469a      	mov	sl, r3
 8003fec:	4693      	mov	fp, r2
 8003fee:	4652      	mov	r2, sl
 8003ff0:	465b      	mov	r3, fp
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	f7fc f90f 	bl	8000218 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4613      	mov	r3, r2
 8004000:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004008:	d308      	bcc.n	800401c <UART_SetConfig+0x430>
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004010:	d204      	bcs.n	800401c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e0ce      	b.n	80041ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004022:	e0ca      	b.n	80041ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402c:	d166      	bne.n	80040fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800402e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004032:	2b08      	cmp	r3, #8
 8004034:	d827      	bhi.n	8004086 <UART_SetConfig+0x49a>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <UART_SetConfig+0x450>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004061 	.word	0x08004061
 8004040:	08004069 	.word	0x08004069
 8004044:	08004071 	.word	0x08004071
 8004048:	08004087 	.word	0x08004087
 800404c:	08004077 	.word	0x08004077
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
 800405c:	0800407f 	.word	0x0800407f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004060:	f7ff fab4 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004066:	e014      	b.n	8004092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7ff fac6 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 800406c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800406e:	e010      	b.n	8004092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004070:	4b4e      	ldr	r3, [pc, #312]	; (80041ac <UART_SetConfig+0x5c0>)
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004074:	e00d      	b.n	8004092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004076:	f7ff fa3b 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800407c:	e009      	b.n	8004092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004084:	e005      	b.n	8004092 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8090 	beq.w	80041ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	4a44      	ldr	r2, [pc, #272]	; (80041b0 <UART_SetConfig+0x5c4>)
 80040a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ac:	005a      	lsls	r2, r3, #1
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	441a      	add	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2b0f      	cmp	r3, #15
 80040c4:	d916      	bls.n	80040f4 <UART_SetConfig+0x508>
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d212      	bcs.n	80040f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f023 030f 	bic.w	r3, r3, #15
 80040d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	8bfb      	ldrh	r3, [r7, #30]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	8bfa      	ldrh	r2, [r7, #30]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	e062      	b.n	80041ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040fa:	e05e      	b.n	80041ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004100:	2b08      	cmp	r3, #8
 8004102:	d828      	bhi.n	8004156 <UART_SetConfig+0x56a>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x520>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7ff fa4c 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004136:	e014      	b.n	8004162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff fa5e 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 800413c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800413e:	e010      	b.n	8004162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <UART_SetConfig+0x5c0>)
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004144:	e00d      	b.n	8004162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7ff f9d3 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800414c:	e009      	b.n	8004162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004154:	e005      	b.n	8004162 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004160:	bf00      	nop
    }

    if (pclk != 0U)
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d028      	beq.n	80041ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <UART_SetConfig+0x5c4>)
 800416e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004172:	461a      	mov	r2, r3
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	fbb3 f2f2 	udiv	r2, r3, r2
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	441a      	add	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	d910      	bls.n	80041b4 <UART_SetConfig+0x5c8>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d20c      	bcs.n	80041b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	b29a      	uxth	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e009      	b.n	80041ba <UART_SetConfig+0x5ce>
 80041a6:	bf00      	nop
 80041a8:	40008000 	.word	0x40008000
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	080047dc 	.word	0x080047dc
      }
      else
      {
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2201      	movs	r2, #1
 80041be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2200      	movs	r2, #0
 80041ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2200      	movs	r2, #0
 80041d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80041d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3730      	adds	r7, #48	; 0x30
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01a      	beq.n	80042fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e2:	d10a      	bne.n	80042fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004338:	f7fc fd1c 	bl	8000d74 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d10e      	bne.n	800436a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f82f 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e025      	b.n	80043b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d10e      	bne.n	8004396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f819 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e00f      	b.n	80043b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b09c      	sub	sp, #112	; 0x70
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	e0a9      	b.n	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	f000 80a5 	beq.w	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fc fccb 	bl	8000d74 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80043ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d140      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004404:	667b      	str	r3, [r7, #100]	; 0x64
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004410:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e6      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	663b      	str	r3, [r7, #96]	; 0x60
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004442:	64ba      	str	r2, [r7, #72]	; 0x48
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e069      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d051      	beq.n	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448e:	d149      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	613b      	str	r3, [r7, #16]
   return(result);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044ec:	623a      	str	r2, [r7, #32]
 80044ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	69f9      	ldr	r1, [r7, #28]
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e010      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	429a      	cmp	r2, r3
 8004540:	f43f af46 	beq.w	80043d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3770      	adds	r7, #112	; 0x70
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_UARTEx_DisableFifoMode+0x16>
 8004560:	2302      	movs	r3, #2
 8004562:	e027      	b.n	80045b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e02d      	b.n	8004634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f84f 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e02d      	b.n	80046b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	; 0x24
 8004660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f811 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d8:	e031      	b.n	800473e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046da:	2308      	movs	r3, #8
 80046dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046de:	2308      	movs	r3, #8
 80046e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	0e5b      	lsrs	r3, r3, #25
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	0f5b      	lsrs	r3, r3, #29
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004702:	7bbb      	ldrb	r3, [r7, #14]
 8004704:	7b3a      	ldrb	r2, [r7, #12]
 8004706:	4911      	ldr	r1, [pc, #68]	; (800474c <UARTEx_SetNbDataToProcess+0x94>)
 8004708:	5c8a      	ldrb	r2, [r1, r2]
 800470a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800470e:	7b3a      	ldrb	r2, [r7, #12]
 8004710:	490f      	ldr	r1, [pc, #60]	; (8004750 <UARTEx_SetNbDataToProcess+0x98>)
 8004712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004714:	fb93 f3f2 	sdiv	r3, r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	7b7a      	ldrb	r2, [r7, #13]
 8004724:	4909      	ldr	r1, [pc, #36]	; (800474c <UARTEx_SetNbDataToProcess+0x94>)
 8004726:	5c8a      	ldrb	r2, [r1, r2]
 8004728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800472c:	7b7a      	ldrb	r2, [r7, #13]
 800472e:	4908      	ldr	r1, [pc, #32]	; (8004750 <UARTEx_SetNbDataToProcess+0x98>)
 8004730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004732:	fb93 f3f2 	sdiv	r3, r3, r2
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	080047f4 	.word	0x080047f4
 8004750:	080047fc 	.word	0x080047fc

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4d0d      	ldr	r5, [pc, #52]	; (800478c <__libc_init_array+0x38>)
 8004758:	4c0d      	ldr	r4, [pc, #52]	; (8004790 <__libc_init_array+0x3c>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	2600      	movs	r6, #0
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	4d0b      	ldr	r5, [pc, #44]	; (8004794 <__libc_init_array+0x40>)
 8004766:	4c0c      	ldr	r4, [pc, #48]	; (8004798 <__libc_init_array+0x44>)
 8004768:	f000 f820 	bl	80047ac <_init>
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	2600      	movs	r6, #0
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	0800480c 	.word	0x0800480c
 8004790:	0800480c 	.word	0x0800480c
 8004794:	0800480c 	.word	0x0800480c
 8004798:	08004810 	.word	0x08004810

0800479c <memset>:
 800479c:	4402      	add	r2, r0
 800479e:	4603      	mov	r3, r0
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d100      	bne.n	80047a6 <memset+0xa>
 80047a4:	4770      	bx	lr
 80047a6:	f803 1b01 	strb.w	r1, [r3], #1
 80047aa:	e7f9      	b.n	80047a0 <memset+0x4>

080047ac <_init>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr

080047b8 <_fini>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr
